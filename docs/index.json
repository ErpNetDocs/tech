{
  "advanced/business-rules/overview.html": {
    "href": "advanced/business-rules/overview.html",
    "title": "User Business Rules | ERP.net Tech Docs",
    "keywords": "User Business Rules"
  },
  "advanced/calculated-attributes/examples/CalculateStandartPricePerLotBasedOnTheIngredientsAndTheOperationsInTheRecipe.html": {
    "href": "advanced/calculated-attributes/examples/CalculateStandartPricePerLotBasedOnTheIngredientsAndTheOperationsInTheRecipe.html",
    "title": "Calculate StandartPricePerLot based on the Ingredients and the Operations in the Recipe | ERP.net Tech Docs",
    "keywords": "Calculate StandartPricePerLot based on the Ingredients and the Operations in the Recipe With this attribute, we can calculate the StandartPricePerLot that is going to be automatically set in the product’s definition we save the recipe. The StandartPricePerLot is determined by the prices of the ingredients and the operations used in the particular recipe. After that, we can use this attribute in a Business rule which to fill in the PricePerLotValue of the product in the recipe. 10: ADD EXP:20 EXP:25 20: SUM CHILD:Ingredients ATTRIB:PriceValue 25: SUM CHILD:Operations EXP:30 30: MULTIPLY EXP:40 EXP:45 40: DIVIDE ATTRIB:StandardPricePerHourValue CONST:60.00 45: CAST EXP:50 CONST:System.Decimal 50: ADD ATTRIB:RunTimeMinutes EXP:60 60: ADD ATTRIB:WaitTimeMinutes EXP:70 70: ADD ATTRIB:SetupTimeMinutes ATTRIB:MoveTimeMinutes Explanation: 10: Add the value of EXP:20 to the value of EXP:25. 20: Sum all recipe's ingredients PriceValues. 25: Sum EXP:30 for all of the recipe's operations. 30: Multiply the value of EXP:40 and EXP:45. 40: Divide the StandardPricePerHourValue by 60.00 to get the StandardPrice per minute. 45: Cast EXP:50 to decimal. 50: Add the values of RunTimeMinutes to EXP:60 => EXP:70 to get the full execution time of the operation."
  },
  "advanced/calculated-attributes/examples/CheckIfAValueOfAFieldIsChangedInTheAdjustmentDocument.html": {
    "href": "advanced/calculated-attributes/examples/CheckIfAValueOfAFieldIsChangedInTheAdjustmentDocument.html",
    "title": "Check If a value of a field Is changed in the Adjustment Document | ERP.net Tech Docs",
    "keywords": "Check If a value of a field Is changed in the Adjustment Document With the current attribute, we can check if the value of a field in the adjustment document is equal to the value of the same filed in the original (adjusted) document. When we have such information, we can determine if the value of this filed is being or has been changed in the adjustment document. Using this attribute, we can for example, create a Business rule which would allow us to prohibit the correction of the value of this field. 10: IIF EXP:20 CONST:False EXP:30 20: EQUAL REF:AdjustedDocument CONST:NULL 30: IIF EXP:40 CONST:False CONST:True 40: EQUAL ATTRIB:@Property1 EXP:50 50: GETOBJVALUE REF:AdjustedDocument ATTRIB:@Property1 Explanation: 10: Check if EXP:20 is true or false. If EXP:20 is True - the calculated attribute displays 'True', else - 'False'. 20: Check if there is AdjustedDocument. If there is no reference to an Adjusted document, then the document is not an Adjustment document. 30: Check if EXP:40 is true or false. 40: Check if the value of the custom property 'Property1' is equal to EXP:50. 50: Get the value of the 'Property1' of the adjusted document."
  },
  "advanced/calculated-attributes/examples/CheckIfTheCurrentUserHasAuthorization.html": {
    "href": "advanced/calculated-attributes/examples/CheckIfTheCurrentUserHasAuthorization.html",
    "title": "Check if the current user has authorization | ERP.net Tech Docs",
    "keywords": "Check if the current user has authorization If we want to determine if the user that is currently logged in the system is authorized (to do, see, or edit an entity, for example) we need to know which Group have such rights. When we have that information, we can simply create a calculated attribute that checks if the User is a part of this Group: 10: IIF EXP:20 CONST:True CONST:False 20: GTE EXP:30 CONST:1 30: SUM EXP:40 CONST:1 40: SELECT REPO:Systems.Security.UserGroups EXP:50 50: WHERE EXP:60 EXP:80 60: EQUAL ATTRIB:UserId EXP:70 70: GETOBJVALUE INPUT:10 SYS:UserId 80: EQUAL ATTRIB:GroupId CONST:5daf849d-9986-462f-9171-a23c1c5839b7 Explanation: 10: Check if EXP:20 is true or false. If EXP:20 is True - the calculated attribute displays the 'True' message, else - 'False'. 20: Check if the list EXP:30 returns at least one record. 30: Return the count of records in the filtered list of EXP:40. 40: Select 'User Groups' filtered by EXP:50. 50: The Filters are expression 60, expression 80... 60: Check if the UserId is equal to EXP:70. 70: Get the Id of the user that is currently editing the entity. 80: Check if the GroupId is equal to the Id of an authorized group."
  },
  "advanced/calculated-attributes/examples/CheckIfTheQuantityIsAWholeNumber.html": {
    "href": "advanced/calculated-attributes/examples/CheckIfTheQuantityIsAWholeNumber.html",
    "title": "Check If the Quantity is a whole number | ERP.net Tech Docs",
    "keywords": "Check If the Quantity is a whole number The current calculated attribute returns true if the quantity in the Sales Order line is whole number, and False - if it is decimal number. The repository of the attribute is Crm.Sales.SalesOrders. It expressions are as follows: 10: IIF EXP:20 CONST:True CONST:False 20: EQUAL ATTRIB:QuantityValue EXP:30 30: CEILING ATTRIB:QuantityValue Explanation: 10: check if expression 20 is true. If so - return True, else - return False 20: check if attribute QuantityValue is equal to expression 30 30: get the smallest integral value greater than or equal to the value in attribute QuantityValue"
  },
  "advanced/calculated-attributes/examples/CheckIfTheSystemTypeOfPaymentTypeInTheSalesOrderIsInCash.html": {
    "href": "advanced/calculated-attributes/examples/CheckIfTheSystemTypeOfPaymentTypeInTheSalesOrderIsInCash.html",
    "title": "Check If the system type of Payment type in the Sales Order is 'In Cash' | ERP.net Tech Docs",
    "keywords": "Check If the system type of Payment type in the Sales Order is 'In Cash' With this attribute we can check if the System Type of Payment type which is set in the Sales Order is 'In Cash'. When we have that information we can, for example, use the attribute to create a Business Rule (for more information, see @Allow a Credit Limit Override When the Client Pays in Cash) that allows a Credit Limit Override when the Client pays in cash. 10: IIF EXP:20 CONST:True CONST:False 20: EQUAL EXP:25 EXP:30 25: CAST CONST:0 CONST:System.Nullable`1[Aloe.EnterpriseOne.Model.Finance.Payments.PaymentTypesRepository+SystemType] 30: GETOBJVALUE REF:PaymentType ATTRIB:SystemType Explanation: 10: Return True of False according to the result of EXP:20 20: Check if EXP:25 is equal to EXP:30 25: Converts '0' to type System.Nullable`1[Aloe.EnterpriseOne.Model.Finance.Payments.PaymentTypesRepository+SystemType] using CAST 30: Get the System Type of the Payment Type which is set in the Sales Order. Note When using EQUAL we should make sure that we are comparing Parameters from the same type. If we don’t know which is the type of the particular object or what is the value that it is going to return we can use the Aloe.EnterpriseOne.Model Documentation . In the particular example we can check PaymentTypesRepository.SystemType Enumeration , where we can see that the value that corresponds to the System Type in 'Cash' is '0'."
  },
  "advanced/calculated-attributes/examples/CheckWhetherTheReleasingOfTheDocumentIsFirstOrNot.html": {
    "href": "advanced/calculated-attributes/examples/CheckWhetherTheReleasingOfTheDocumentIsFirstOrNot.html",
    "title": "Check Whether the Releasing of the Document Is First or Not | ERP.net Tech Docs",
    "keywords": "Check Whether the Releasing of the Document Is First or Not Sometimes we may want to know whether the Released state of document is selected for a first time or not (i.e. if the event is First Releasing). For examples a business case may require a certain business rule to be executed only when first releasing the document. The calculated attributes are a tool which when triggered perform their calculation in real time. This means that if we use a calculated attribute as a condition for a business rule, the condition may be fulfilled today, but not tomorrow and if we reselect the document state it may trigger actions that are no longer needed for this record ( for more information see How to start a Business Rule only on First Releasing? ). To avoid such occurrence, we can use a calculated attribute to define whether the releasing of the document is first or not. 10: IIF EXP:20 CONST:false CONST:true 20: EQUAL EXP:30 CONST:30 30: CAST ATTRIB:State CONST:System.Int32 Explanation: 10: Check if EXP:20 is true or false. If EXP:20 is True - the calculated attribute displays 'True', else - 'False'. 20: Check if EXP:20 is equal to \"30\". 30: Cast the State of the document to integer. State Released is stored as \"30\", for more information see DocumentState Enumeration ."
  },
  "advanced/calculated-attributes/examples/CompareUnitPriceAndStandardUnitPrice.html": {
    "href": "advanced/calculated-attributes/examples/CompareUnitPriceAndStandardUnitPrice.html",
    "title": "Compare Unit Price And Standard Unit Price | ERP.net Tech Docs",
    "keywords": "Compare Unit Price And Standard Unit Price The following calculated attribute calculates if the Unit Price in the Sales Order Lines is greater than the Standard Unit Price of the product and returns a message: 10: IIF EXP:20 CONST:'OK!' CONST:'Not OK!' 20: GT ATTRIB:UnitPriceValue ATTRIB:StandardUnitPriceValue Explanation: 10: Checks if EXP:20 is true or false. If EXP:20 is True - the calculated attribute displays the 'OK!' message, else - 'Not OK!'. 20: Checks if ATTRIB:UnitPriceValue is greater than ATTRIB: StandardUnitPriceValue. If so - returns True, else - False. The same validation may be achieved by using other operator: 10: IIF EXP:20 CONST:'Not OK!' CONST:'OK!' 20: LTE ATTRIB:UnitPriceValue ATTRIB:StandardUnitPriceValue Explanation: 10: Checks if EXP:20 is true or false. If EXP:20 is True - the calculated attribute displays the 'Not OK!' message, else - 'OK!'. 20: Checks if ATTRIB:UnitPriceValue is less than or equal to ATTRIB:StandardUnitPriceValue. If so - returns True, else - False."
  },
  "advanced/calculated-attributes/examples/ConvertPropertyToNumber.html": {
    "href": "advanced/calculated-attributes/examples/ConvertPropertyToNumber.html",
    "title": "Convert a Value of a Custom Property to a Number | ERP.net Tech Docs",
    "keywords": "Convert a Value of a Custom Property to a Number The values of the custom properties are a specific type of value and the CONVERT operator does not know how to handle it properly. For this reason, if we want to covert a custom property's value to a number, we have to CAST it first. Example - Multiply standard price per lot by a coefficient stored in a property Lets say, for example, we want to multiply the standard price per lot of the product by a coefficient stored as a product's custom property @CustomProperty1. Note The repository of the attributes is General.Products.Products RIGHT calculated attribute: 10: MULTIPLY ATTRIB:StandardPricePerLotValue EXP:20 20: CONVERT EXP:30 CONST:System.Decimal 30: CAST ATTRIB:@CustomProperty1 CONST:System.String Explanation: 10: Multiply the value of the 'Standard Price Per Lot' by EXP: 20. 20: Convert EXP:30 to a decimal number. 25: Cast the value of custom property 'CustomProperty1' to a string. WRONG calculated attribute: 10: MULTIPLY ATTRIB:StandardPricePerLotValue EXP:20 20: CONVERT ATTRIB:@CustomProperty1 CONST:System.Decimal Explanation: 10: Multiply the value of the 'Standard Price Per Lot' by EXP: 20. 20: Convert the value of custom property 'CustomProperty1' to a decimal number. Note When we want to convert CustomPropertyValue to numeric value (for example Decimal), we need to CAST it to a string first!"
  },
  "advanced/calculated-attributes/examples/GetAValueOfACustomPropertyInSalesOrderLinesFromTheParentOfferLine.html": {
    "href": "advanced/calculated-attributes/examples/GetAValueOfACustomPropertyInSalesOrderLinesFromTheParentOfferLine.html",
    "title": "Get a Value of a Custom Property in Sales Order Lines from the Parent Offer Line | ERP.net Tech Docs",
    "keywords": "Get a Value of a Custom Property in Sales Order Lines from the Parent Offer Line With this attribute we can for example, determine what is the value of a particular customer property which is set for the parent offer line of the current sales order line. Currently, offer lines customer properties are not automatically transferred to the sales order. Thus, we can use this attribute in a User Business Rule to automate the process. For more information how to create a such User Business Rule , see topic ' How to Use Business Rules to Set a Value into a Custom Property? '. Repository: Crm.Sales.SalesOrderLines 10: GETOBJVALUE EXP:20 ATTRIB:@Propery1 20: FIRST EXP:30 30: FILTER EXP:70 EXP:40 40: EQUAL ATTRIB:LineNo EXP:50 50: CAST EXP:60 CONST:System.Int32 60: GETOBJVALUE INPUT:10 ATTRIB:ParentLineNo 70: GETOBJVALUE EXP: 80 CHILD:Lines 80: CAST REF:ParentDocument CONST:Aloe.EnterpriseOne.Model.Crm.Presales.Offer Explanation: 10: Get the record of custom property \"Propery1\" from EXP:20. 20: Get the first value of EXP:30. 30: Filter the list from EXP:70 with the filters from EXP:40. 40: Check in the LineNumber of the offer line is equal to the value from EXP:50. 50: Cast EXP:60 to \"System.Int32\". 60: Get the ”ParentLineNo“ of the sales order line which is an input for EXP:10. 70: Get the list of child line of the object of EXP:80. 80: Cast the “Parent Document” of the sales order line to \"Aloe.EnterpriseOne.Model.Crm.Presales.Offer\" in order to define the type/entity of the parent document."
  },
  "advanced/calculated-attributes/examples/GetCurrentAvailabilitiesOfAProduct.html": {
    "href": "advanced/calculated-attributes/examples/GetCurrentAvailabilitiesOfAProduct.html",
    "title": "Get Current Availabilities of a Product | ERP.net Tech Docs",
    "keywords": "Get Current Availabilities of a Product This example shows how to create a calculated attribute which returns the sum of the currently available Quantity Base of a particular product. In the example below are applied filters by Product, Store, Store Bin, Lot and Serial Number, because of the specification of the repository of the calculation attribute. Other filters, such as Product Variant and Enterprise Company could be also added if needed. The example is created for Consumption Order Lines, but such attribute could be created for other documents or definitions as well. Repository Name: Production.ShopFloor.ConsumptionOrderLines 10: SUM EXP:20 ATTRIB:QuantityBaseValue 20: FILTER EXP:30 EXP:70 30: SELECT REPO:Logistics.Inventory.CurrentBalances EXP:40 40: WHERE EXP:50 50: EQUAL ATTRIB:ProductId EXP:60 60: GETOBJVALUE INPUT:10 ATTRIB:ProductId 70: AND EXP:100 EXP:80 80: AND EXP:130 EXP:90 90: AND EXP:150 EXP:170 100: EQUAL ATTRIB:StoreId EXP:110 110: CAST EXP:120 CONST:System.Guid 120: GETOBJVALUE INPUT:10 ATTRIB:StoreId 130: EQUAL ATTRIB:StoreBinId EXP:140 140: GETOBJVALUE INPUT:10 ATTRIB:StoreBinId 150: EQUAL ATTRIB:LotId EXP:160 160: GETOBJVALUE INPUT:10 ATTRIB:LotId 170: EQUAL ATTRIB:SerialNumberId EXP:180 180: GETOBJVALUE INPUT:10 ATTRIB:SerialNumberId Explanation: 10: Sum Quantity Base from the filtered list returned by EXP:20 20: Filter the list from EXP:30 by the clauses of EXP:70 30: Select repository \"Logistics.Inventory.CurrentBalances\" and filter by the clauses in EXP:40 40: Filter the list above by the records WHERE/in which the clauses in EXP:50 are True 50: Check whether ATTRIB:ProductId is equal to EXP:60 60: Get ATTRIB:ProductId from the repository of EXP:10 70: EXP:100 and EXP:80 80: EXP:130 and EXP:90 90: EXP:150 and EXP:170 100: Check whether ATTRIB:StoreId is EQUAL to EXP:110 110: CAST EXP:120 to System.Guid 120: Get ATTRIB:StoreId from the repository of EXP:10 130: Check whether ATTRIB:StoreBinId is EQUAL to EXP:140 140: Get ATTRIB:StoreBinId from the repository of EXP:10 150: Check whether ATTRIB:LotId is EQUAL to EXP:160 160: Get ATTRIB:LotId from the repository of EXP:10 170: Check whether ATTRIB:SerialNumberId is EQUAL to EXP:180 180: Get ATTRIB:SerialNumberId from the repository of EXP:10"
  },
  "advanced/calculated-attributes/examples/GetValueAndDescriptionOfReferentObject.html": {
    "href": "advanced/calculated-attributes/examples/GetValueAndDescriptionOfReferentObject.html",
    "title": "Get Value And Description Of Referent Object | ERP.net Tech Docs",
    "keywords": "Get Value And Description Of Referent Object At first - some additional information - when a value is set to a custom property of an object, a new record is added to the \"General.PropertyValue\" repository. The new record has its own Id, and the id of the specific object - EntityItemId. So in a calculated attribute we need to filter the value which are for the specific property (PropertyId) of the specific object (EntityItemId) and then get the value or description. Let's see an example: The current example shows how the get the description of a property of the customer and show it in the Offer form. Such calculated attribute would have the following parameters: Repository Name:Crm.Presales.Offers And the Calculated Attribute expressions are as follows: 10: GETOBJVALUE EXP:20 ATTRIB:Description 20: FIRST EXP:30 30: SELECT REPO:General.PropertyValues EXP:40 40: WHERE EXP:50 50: AND EXP:60 EXP:70 60: EQUAL ATTRIB:PropertyId CONST:e7005814-6140-4708-a9d8-aaaeb5b151ed 70: EQUAL ATTRIB:EntityItemId EXP:80 80: GETOBJVALUE INPUT:10 ATTRIB:CustomerId Explanation: 10: get the attribute Description of the object in expression 20 20: get the first record in the list from expression 30 30: select repository \"General.PropertyValues\" filtered by expression 40 40: the filter is expression 50 50: expression 60 AND expression 70 60: check if the attribute PropertyId is equal to the constant of \"e7005814-6140-4708-a9d8-aaaeb5b151ed\" (this is a Guid) 70: check if the attribute EntityItemId is equal to expression 80 80: get the attribute CustomerId of the input object of expression 10 If we need the value of the property, the first expression may be set to GETOBJVALUE EXP:20 ATTRIB:PropertyValueField."
  },
  "advanced/calculated-attributes/examples/Overview.html": {
    "href": "advanced/calculated-attributes/examples/Overview.html",
    "title": "Examples | ERP.net Tech Docs",
    "keywords": "Examples Compare Unit Price And Standard Unit Price Convert a Value of a Custom Property to a Number Specific Day From Document Date Total Quantity And Scrap Quantity In Recipe Ingredients Calculate StandartPricePerLot based on the Ingredients and the Operations in the Recipe Check If a value of a field Is changed in the Adjustment Document Check if the current user has authorization Check If the Quantity is a whole number Check If the system type of Payment type in the Sales Order is 'In Cash' Check Whether the Releasing of the Document Is First or Not Get a Value of a Custom Property in Sales Order Lines from the Parent Offer Line Get Current Availabilities of a Product Get Value And Description Of Referent Object Sales Amounts Of The Customer For The Last 30 Days"
  },
  "advanced/calculated-attributes/examples/SalesAmountsOfTheCustomerForTheLast30Days.html": {
    "href": "advanced/calculated-attributes/examples/SalesAmountsOfTheCustomerForTheLast30Days.html",
    "title": "Sales Amounts Of The Customer For The Last 30 Days | ERP.net Tech Docs",
    "keywords": "Sales Amounts Of The Customer For The Last 30 Days Let's say the user want to show a field in the Sales Order which calculates the sales amounts of the selected customer for the last 30 days. Such calculated attribute actually represents a report with specific filters. If a user tries to get the sales of a client for the last 30 days, he would open Sales Order Lines report and set the following filters: Client Enterprise Company Enterprise Company Location (eventually) DocumentState (at least Released) Void (he probably won't need voided documents) Document Date So the calculated attribute must SELECT the Sales Order Lines table and filter the records as described above. Such calculated attribute would have the following parameters: Repository Name:Crm.Sales.SalesOrders Name:SOAmountsForTheLast30days And the Calculated Attribute expressions are as follows: 10: SUM EXP:20 ATTRIB:LineAmountValue 20: SELECT REPO:Crm.Sales.SalesOrderLines EXP:30 30: WHERE EXP:40 EXP:90 40: AND EXP:50 EXP:70 50: EQUAL EXP:60 CONST:30 60: CAST EXP:61 CONST:System.Int32 61: GETOBJVALUE REF:Document ATTRIB:State 70: EQUAL EXP:80 CONST:False 80: GETOBJVALUE REF:Document ATTRIB:Void 90: AND EXP:100 EXP:130 100: AND EXP:101 EXP:160 101: EQUAL EXP:110 EXP:120 110: GETOBJVALUE REF:SalesOrder ATTRIB:CustomerId 120: GETOBJVALUE INPUT:10 ATTRIB:CustomerId 130: GTE EXP:140 EXP:150 140: GETOBJVALUE REF:SalesOrder ATTRIB:DocumentDate 150: ADDDAYS EXP:151 CONST:-30 151: GETOBJVALUE INPUT:10 ATTRIB:DocumentDate 160: EQUAL EXP:170 EXP:180 170: GETOBJVALUE REF:SalesOrder ATTRIB:EnterpriseCompanyId 180: GETOBJVALUE INPUT:10 ATTRIB:EnterpriseCompanyId Explanation: 10: Sum all records from expression 20 by their attribute LineAmountValue 20: Select 'Sales Order Lines' filtered by expression 30 30: the filter is expression 40 AND expression 50 40: expression 50 AND expression 70 50: check if expression 60 is equal to expression 30 60: cast expression 61 to \"System.Int32\" (this is integer) 61: get the value of attribute State of the referent object Document 70: check if expression 80 is equal to \"False\" 80: get the value of attribute Void of the referent object Document 90: expression 100 AND expression 130 100: expression 101 AND expression 160 101: check if expression 110 is equal to expression 120 110: get the value of attribute CustomerId of the referent object SalesOrder 120:get the value of attribute CustomerId of the input object of expression 10 130: check if expression 140 is greater than or equal to expression 150 140: get the value of attribute DocumentDate of the referent object SalesOrder 150: add to expression 151 the value of \"-30\" 151: get the value of attribute DocumentDate of the input object of expression 10 160: check if expression 170 is equal to expression 180 170: get the value of attribute EnterpriseCompanyId of the referent object SalesOrder 180: get the value of attribute EnterpriseCompanyId of the input object of expression 10"
  },
  "advanced/calculated-attributes/examples/SpecificDayFromDocumentDate.html": {
    "href": "advanced/calculated-attributes/examples/SpecificDayFromDocumentDate.html",
    "title": "Specific Day From Document Date | ERP.net Tech Docs",
    "keywords": "Specific Day From Document Date A Calculated Attribute is added with the following parameters: Repository Name:Crm.Sales.SalesOrders Name:TenDaysFromDocumentDay And the Calculated Attribute expressions are as follows: 10: ADDDAYS ATTRIB:DocumentDate CONST:10 Explanation: 10: Add 10 days to the date in DocumentDate If showed in the Sales Order form, this attribute calculates and displays 10 days added to the DocumentDate."
  },
  "advanced/calculated-attributes/examples/TotalQuantityAndScrapQuantityInRecipeIngredients.html": {
    "href": "advanced/calculated-attributes/examples/TotalQuantityAndScrapQuantityInRecipeIngredients.html",
    "title": "Total Quantity And Scrap Quantity In Recipe Ingredients | ERP.net Tech Docs",
    "keywords": "Total Quantity And Scrap Quantity In Recipe Ingredients If the user wants to see what is the total Quantity of the material in a Recipe which would include the Used Quantity and the Scrap Rate, he would add the following Calculated Attribute: Repository Name:Production.Technologies.RecipeIngredients Name:TotalUsedQuantity And the Calculated Attribute expressions are as follows: 10: ADD ATTRIB:UsageQuantityValue EXP:20 20: MULTIPLY ATTRIB:UsageQuantityValue ATTRIB:ScrapRate Explanation: 10: Add the result from expression 20 to the attribute UsageQuantityValue 20: Multiply UsageQuantityValue and ScrapRate"
  },
  "advanced/calculated-attributes/operators/add.html": {
    "href": "advanced/calculated-attributes/operators/add.html",
    "title": "ADD - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "ADD - Calculated Attribute Operator Specification Value Name ADD Description The operator returns the sum (total) of two numbers. Parameter 1 Name Number1 Parameter 1 Type numeric type - int, double or decimal Parameter 2 Name Number2 Parameter 2 Type numeric type - int, double or decimal Parameter 3 Name Parameter 3 Type Return Value Number1 + Number2 Note Ensure that the numbers which are summed up are from the the same type. For example, Parameter 1 and Parameter 2 must be both integers, doubles, or decimals. Example The following example adds '0.25' to the the value of the Quantity field in Sales Order Lines and returns the sum of the two numbers. 10: ADD ATTRIB:QuantityValue CONST:0.25 OUTPUT: If 'QuantityValue = 1', the output will be '1.25'. Note The repository of the attribute is Crm.Sales.SalesOrderLines More Examples Total Quantity And Scrap Quantity In Recipe Ingredients"
  },
  "advanced/calculated-attributes/operators/adddays.html": {
    "href": "advanced/calculated-attributes/operators/adddays.html",
    "title": "ADDDAYS - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "ADDDAYS - Calculated Attribute Operator Specification Value Name ADDDAYS Description Adds the specified number of days to the date. Parameter 1 Name Date Parameter 1 Type Date Parameter 2 Name NumDays Parameter 2 Type int Parameter 3 Name Parameter 3 Type Return Value Date + NumDays Example 10: ADDDAYS ATTRIB:DocumentDate CONST:5 OUTPUT: If 'DocumentDate = 2000-01-20', the output will be '2000-01-25'. Note The repository of the attribute is Crm.Sales.SalesOrders"
  },
  "advanced/calculated-attributes/operators/and.html": {
    "href": "advanced/calculated-attributes/operators/and.html",
    "title": "AND - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "AND - Calculated Attribute Operator Specification Value Name AND Description Checks if the two conditions are True. If so - the operator returns True. If any of the specified conditions are not True, the operator returns False. Parameter 1 Name Condition1 Parameter 1 Type boolean Parameter 2 Name Condition2 (optional) Parameter 2 Type boolean Parameter 3 Name Condition3 (optional) Parameter 3 Type boolean Return Value Condition1 AND Condition2 Note Parameter 1 and Parameter 2 are optional. If only Parameter 1 has value, the result is its value (Parameter 1). Example 10: AND EXP:20 EXP:30 20: EQUAL ATTRIB:LineNo CONST:10 30: EQUAL ATTRIB:Notes CONST:Apple OUTPUT: If 'LineNo = 10' and 'Notes = Apple', the output will be 'True'. If 'LineNo = 50' and 'Notes = Apple', the output will be 'False'. If 'LineNo = 10' and 'Notes = Pear', the output will be 'False'. Note The repository of the attribute is Crm.Sales.SalesOrderLines More Examples Sales Amounts Of The Customer For The Last 30 Days Get Value And Description Of Referent Object"
  },
  "advanced/calculated-attributes/operators/cast.html": {
    "href": "advanced/calculated-attributes/operators/cast.html",
    "title": "CAST - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "CAST - Calculated Attribute Operator Specification Value Name CAST Description Casts the parameter to the specified type. Parameter 1 Name param Parameter 1 Type any type Parameter 2 Name type Parameter 2 Type string - 'System.Int32', 'System.String', 'System.Decimal', 'System.Double' and all standart .net types. Parameter 3 Name Parameter 3 Type Return Value Returns the param converted to the type. Note The CAST operator is a secondary operator, used by the other operators to convert their parameters to the same type. The type is usually entered as a constant (CONST). Example The following example converts the value of the 'State' of a Sales Order, whoose type is Enum, to an integer number. Conveting to integer allows comparison between the states (lower -> higher): 10: CONVERT ATTRIB:State CONST:System.Int32 OUTPUT: If 'State = Released', the output will be '30'. Note The repository of the attribute is Crm.Sales.SalesOrders More Examples Check Whether the Releasing of the Document Is First or Not Check If the System type of Payment type in the Sales Order Is 'In Cash'"
  },
  "advanced/calculated-attributes/operators/ceiling.html": {
    "href": "advanced/calculated-attributes/operators/ceiling.html",
    "title": "CEILING - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "CEILING - Calculated Attribute Operator Specification Value Description Returns the smallest integer that is greater than or equal to the specified number. Parameter 1 Name Number1 Parameter 1 Type double or decimal Parameter 2 Name - Parameter 2 Type - Parameter 3 Name - Parameter 3 Type - Return Value The nearest integer which is larger than Number1. Example The following example gets the smallest integer that is greater than or equal to 'Quantity' of a Sales Order Line: 10:CEILING ATTRIB:QuantityValue OUTPUT: If 'QuantityValue = 14.15', the output will be '15'. If 'QuantityValue = 14', the output will be '14'. Note The repository of the attribute is Crm.Sales.SalesOrderLines"
  },
  "advanced/calculated-attributes/operators/concat.html": {
    "href": "advanced/calculated-attributes/operators/concat.html",
    "title": "CONCAT - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "CONCAT - Calculated Attribute Operator Specification Value Description Concatenates two strings. Parameter 1 Name String1 Parameter 1 Type string Parameter 2 Name String2 Parameter 2 Type string Parameter 3 Name - Parameter 3 Type - Return Value String1 + String2 Example The following example concatenates the word 'Red' with the value of the field 'Notes' in Sales Order Lines: 10: CONCAT CONST:Red ATTRIB:Notes OUTPUT: If 'Notes = Apple', the output will be 'RedApple'. Note The repository of the attribute is Crm.Sales.SalesOrderLines If we want to expand the example we can add a space between the both strings: 10: CONCAT CONST:Red EXP:20 20: CONCAT CONST:' ' ATTRIB:Notes OUTPUT: If 'Notes = Apple', the output will be 'Red Apple'."
  },
  "advanced/calculated-attributes/operators/convert.html": {
    "href": "advanced/calculated-attributes/operators/convert.html",
    "title": "CONVERT - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "CONVERT - Calculated Attribute Operator Specification Value Description Returns an object of the specified type and whose value is equivalent to the specified object. This conversion requires absolutely correct input data - if the data is not in the correct form, data loss may occur. For example: if the user tries to convert the string value of '3.12' to decimal, the conversion would be successful. If the conversion of the string is not possible, this may lead to data loss, but no error would be returned. Parameter 1 Name param Parameter 1 Type decimal, int, string or date Parameter 2 Name type Parameter 2 Type string - 'System.Int32', 'System.String', 'System.Decimal', 'System.DateTime' and all standard .net types Parameter 3 Name - Parameter 3 Type - Return Value Returns the param converted to the type. Example The following example converts the value of the 'Quantity' of a Sales Order Line, which is a decimal number, to an integer number: 10: CONVERT ATTRIB:QuantityValue CONST:System.Int32 OUTPUT: If 'QuantityValue = 12.14', the output will be '12'. Note The repository of the attribute is Crm.Sales.SalesOrderLines More Examples Convert a Value of a Custom Property to a Number"
  },
  "advanced/calculated-attributes/operators/count.html": {
    "href": "advanced/calculated-attributes/operators/count.html",
    "title": "COUNT - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "COUNT - Calculated Attribute Operator Specification Value Description Gets the number of elements contained in the list. Parameter 1 Name list Parameter 1 Type list - repository, child. Parameter 2 Name - Parameter 2 Type - Parameter 3 Name - Parameter 3 Type - Return Value int Introduced In Version 2020.1 Example The following example returns the number of lines in the current document (SalesOrder): 10: COUNT CHILD:Lines Note The repository of the attribute is Crm.Sales.SalesOrders If we want to expand the example and if we want to get the number of lines with quantity greater than or equal to 10, the following attribute would do the job: 10: COUNT EXP:20 20: FILTER CHILD:Lines EXP:30 30: GTE ATTRIB:QuantityValue CONST:10.00"
  },
  "advanced/calculated-attributes/operators/divide.html": {
    "href": "advanced/calculated-attributes/operators/divide.html",
    "title": "DIVIDE - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "DIVIDE - Calculated Attribute Operator Specification Value Name DIVIDE Description Divide one number by second number. Parameter 1 Name Number1 Parameter 1 Type numeric type - int, double or decimal Parameter 2 Name Number2 Parameter 2 Type numeric type - int, double or decimal Parameter 3 Name Parameter 3 Type Return Value Number1 / Number2 Note Ensure that the numbers of both parameters are from the the same type. For example, Parameter 1 and Parameter 2 must be both integers, doubles, or decimals. Example 10: DIVIDE ATTRIB:QuantityValue CONST:2.00 OUTPUT: If 'QuantityValue = 6.00', the output will be '3.00'. Note The repository of the attribute is Crm.Sales.SalesOrderLines More Examples Calculate StandartPricePerLot Based on the Ingredients and the Operations in the Recipe"
  },
  "advanced/calculated-attributes/operators/equal.html": {
    "href": "advanced/calculated-attributes/operators/equal.html",
    "title": "EQUAL - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "EQUAL - Calculated Attribute Operator Specification Value Name EQUAL Description Checks if two values are equal. If they are equal, the return value is True, else - the return value is False. Parameter 1 Name Value1 Parameter 1 Type numeric type - int, double or decimal; string; Parameter 2 Name Value2 Parameter 2 Type numeric type - int, double or decimal; string; Parameter 3 Name Parameter 3 Type Return Value boolean (True or False) Note Ensure that the values which are compared up have the same type. For example, Parameter 1 and Parameter 2 must be both integers, or doubles, or decimals, or strings. Example 10: EQUAL ATTRIB:LineNo CONST:30 OUTPUT: If 'LineNo = 30', the output will be 'True'. If 'LineNo = 10', the output will be 'False'. Note The repository of the attribute is Crm.Sales.SalesOrderLines More Examples Check If The Quantity Is A Whole Number Check Whether the Releasing of the Document Is First or Not Get Current Availabilities of a Product"
  },
  "advanced/calculated-attributes/operators/filter.html": {
    "href": "advanced/calculated-attributes/operators/filter.html",
    "title": "FILTER - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "FILTER - Calculated Attribute Operator Specification Value Name FILTER Description Filters the specified list by the condition. Parameter 1 Name list Parameter 1 Type list of objects Parameter 2 Name condition Parameter 2 Type boolean Parameter 3 Name Parameter 3 Type Return Value Returns sub-list, which meets the condition. Example The following example returns a list with all of lines in the current document (SalesOrder) whose quantity is '1.00': 10: FILTER CHILD:Lines EXP:30 30: EQUAL ATTRIB:QuantityValue CONST:1.00 Note The repository of the attribute is Crm.Sales.SalesOrders"
  },
  "advanced/calculated-attributes/operators/first.html": {
    "href": "advanced/calculated-attributes/operators/first.html",
    "title": "FIRST - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "FIRST - Calculated Attribute Operator Specification Value Name FIRST Description Returns the first element in the list. Parameter 1 Name list Parameter 1 Type list of objects Parameter 2 Name Parameter 2 Type Parameter 3 Name Parameter 3 Type Return Value Returns the first element of list. Note The FIRST operator returns the first met element of the list, but the criateria about which element is actually first may not match your expectations. If the sorting of the elements matters, please use in combinations with the SORT - Calculated Attribute Operator and ORDERBY - Calculated Attribute Operator operators. Example The following example returns the first met line of the current document (SalesOrder): 10: FIRST CHILD:Lines Note The repository of the attribute is Crm.Sales.SalesOrders If we want to expand the example we can sort the line ascending by line number. This way the atrribute will return the line with lowest line number: 10: FIRST EXP:20 20: SORT CHILD:Lines ATTR:LineNo CONST:ASC"
  },
  "advanced/calculated-attributes/operators/floor.html": {
    "href": "advanced/calculated-attributes/operators/floor.html",
    "title": "FLOOR - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "FLOOR - Calculated Attribute Operator Specification Value Name FLOOR Description Returns the largest integer less than or equal to the specified number. Parameter 1 Name Number1 Parameter 1 Type double or decimal Parameter 2 Name Parameter 2 Type Parameter 3 Name Parameter 3 Type Return Value Returns the largest integer less than or equal to Number1. Example The following example gets the largest integer that is less than or equal to 'Quantity' of a Sales Order Line: 10: FLOOR ATTRIB:QuantityValue OUTPUT: If 'QuantityValue = 14.85', the output will be '14'. If 'QuantityValue = 14', the output will be '14'. Note The repository of the attribute is Crm.Sales.SalesOrderLines"
  },
  "advanced/calculated-attributes/operators/formatstring.html": {
    "href": "advanced/calculated-attributes/operators/formatstring.html",
    "title": "FORMATSTRING - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "FORMATSTRING - Calculated Attribute Operator Specification Value Description Returns the specified object, formatted by the specified rules. Parameter 1 Name Param1 Parameter 1 Type object (any type) Parameter 2 Name Format Parameter 2 Type constant - the format argument must contain a valid .NET Framework format string, either as a standard format string (for example, \"C\" or \"D\") or as a pattern of custom characters for dates and numeric values (for example, \"MMMM DD, yyyy (dddd)\"). For more information about the supported format specifiers, see @(Format Specifiers). Parameter 3 Name - Parameter 3 Type - Return Value Param1 as a string formatted by the rule in Format. Note For more information about the supported format specifiers, see @(Format Specifiers). Example Here are some examples of the diffrent formats and format specifiers: 10: FORMATSTRING CONST:DocumentDate CONST:yyyy MM dddd OUTPUT: If 'DocumentDate = 2020-03-15', the output will be '2020 03 Sunday'. ( the language of the day of the week depends on the local regional settings ) 10: FORMATSTRING ATTRIB:QuantityValue CONST:n6 OUTPUT: If 'QuantityValue = 150.00', the output will be '150,000000'. ( the decimal symbol separator depends on the local regional settings ) 10: FORMATSTRING ATTRIB:LineAmountValue CONST:C OUTPUT: If 'LineAmountValue = 150.00', the output will be '150.00 $'. ( the decimal symbol separator and the currency symbol depends on the local regional settings ) Note The repository of the attribute is Crm.Sales.SalesOrderLines"
  },
  "advanced/calculated-attributes/operators/getobjvalue.html": {
    "href": "advanced/calculated-attributes/operators/getobjvalue.html",
    "title": "GETOBJVALUE - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "GETOBJVALUE - Calculated Attribute Operator Specification Value Description Gets the specified value from the specified object. This operator is used when the user wants the retrieve a value from object different than the current one. The current object is listed in the 'Repository Name' field in the current row. Parameter 1 Name obj Parameter 1 Type object Parameter 2 Name value Parameter 2 Type attribute value Parameter 3 Name - Parameter 3 Type - Return Value Returns value from obj. Example The following example returns the value of the field 'Default Delivery Term Days' set in the definition of the Customer set the current Sales Order: 10: GETOBJVALUE REF:Customer ATTRIB:DefaultDeliveryTermDays OUTPUT: If 'DefaultDeliveryTermDays = 5', the output will be '5'. Note The repository of the attribute is Crm.Sales.SalesOrders More Examples Check If a Value of a Field Is Changed in the Adjustment Document Get Value And Description Of Referent Object"
  },
  "advanced/calculated-attributes/operators/getvalue.html": {
    "href": "advanced/calculated-attributes/operators/getvalue.html",
    "title": "GETVALUE - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "GETVALUE - Calculated Attribute Operator Specification Value Description Gets the value from the current object. Parameter 1 Name Value Parameter 1 Type attribute value Parameter 2 Name - Parameter 2 Type - Parameter 3 Name - Parameter 3 Type - Return Value Value Example The following example returns the value of the Notes of the current Sales Order Line: 10: GETVALUE ATTRIB:Notes OUTPUT: If 'Notes = Apple', the output will be 'Apple'. Note The repository of the attribute is Crm.Sales.SalesOrderLiness"
  },
  "advanced/calculated-attributes/operators/gt.html": {
    "href": "advanced/calculated-attributes/operators/gt.html",
    "title": "GT - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "GT - Calculated Attribute Operator Specification Value Description Checks if an attribute value is greater than another attribute's value (or a constant). Parameter 1 Name attribute1 Parameter 1 Type numeric (int, double, decimal) or datetime type Parameter 2 Name attribute2 Parameter 2 Type numeric (int, double, decimal) or datetime type Parameter 3 Name - Parameter 3 Type - Return Value If attribute1 > attribute2 the returned value is True, if else - the operator returns False. Note Ensure that the attributes which are compared have the same type. For example, Parameter 1 and Parameter 2 must be both integers, or doubles, or decimals, or datetime. Example 10: GT ATTRIB:LineNo CONST:30 OUTPUT: If 'LineNo = 40', the output will be 'True'. If 'LineNo = 30', the output will be 'False'. If 'LineNo = 20', the output will be 'False'. Note The repository of the attribute is Crm.Sales.SalesOrderLines More Examples Compare Unit Price And Standard Unit Price"
  },
  "advanced/calculated-attributes/operators/gte.html": {
    "href": "advanced/calculated-attributes/operators/gte.html",
    "title": "GTE - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "GTE - Calculated Attribute Operator Specification Value Description Checks if an attribute value is greater than or equal to another attribute's value (or a constant). Parameter 1 Name attribute1 Parameter 1 Type numeric (int, double, decimal) or datetime type Parameter 2 Name attribute2 Parameter 2 Type numeric (int, double, decimal) or datetime type Parameter 3 Name - Parameter 3 Type - Return Value If attribute1 >= attribute2 the returned value is True, if else - the operator returns False. Note Ensure that the attributes which are compared have the same type. For example, Parameter 1 and Parameter 2 must be both integers, or doubles, or decimals, or datetime. Example 10: GT ATTRIB:LineNo CONST:30 OUTPUT: If 'LineNo = 40', the output will be 'True'. If 'LineNo = 30', the output will be 'True'. If 'LineNo = 20', the output will be 'False'. Note The repository of the attribute is Crm.Sales.SalesOrderLines"
  },
  "advanced/calculated-attributes/operators/iif.html": {
    "href": "advanced/calculated-attributes/operators/iif.html",
    "title": "IIF - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "IIF - Calculated Attribute Operator Specification Value Description Depending on a specified condition, returns the second or the third argument. Parameter 1 Name Condition Parameter 1 Type Boolean Parameter 2 Name TrueValue Parameter 2 Type any type Parameter 3 Name FalseValue Parameter 3 Type any type Return Value When Condition is True, returns TrueValue. When Condition is False, returns FalseValue Example 10: IIF EXP:20 CONST:'Quantity is 1.00' CONST: 'Quantity is not 1.00' 20: EQUAL ATTRIB:QuantityValue CONST:1.00 OUTPUT: If 'QuantityValue = 1.00', the output will be 'Quantity is 1.00'. If 'QuantityValue = 2.00', the output will be 'Quantity is not 1.00'. Note The repository of the attribute is Crm.Sales.SalesOrderLines More Examples Compare Unit Price And Standard Unit Price Check If a Value of a Field Is Changed in the Adjustment Document"
  },
  "advanced/calculated-attributes/operators/in.html": {
    "href": "advanced/calculated-attributes/operators/in.html",
    "title": "IN - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "IN - Calculated Attribute Operator Specification Value Description Determines whether a specified value matches any value in a list. The operator is used in combination with SELECT and FILTER as condition. It can be used to search through values of string and guid types. It cannot be used to search through numeric values or dates. Parameter 1 Name param Parameter 1 Type String or Guid Parameter 2 Name list of values Parameter 2 Type the values must be equal to the param type Parameter 3 Name - Parameter 3 Type - Return Value True or False depending on if param equals a member of the list of values. Note Single quotes are only necessary when the values which we compare to are strings. Example The following example checks whether there are Sales Orders with Notes 'Apple' and 'Pear' into the datatabase: 10: SELECT REPO:Crm.Sales.SalesOrders EXP:20 20: WHERE EXP:30 30: IN ATTRIB:Notes CONST:'Apple', 'Pear' OUTPUT: If there is atleast one Sales Order with 'Notes = Apple', the output will be 'True'. If there is atleast one Sales Order with 'Notes = Pear', the output will be 'True'. If there are NO Sales Orders with 'Notes = Apple OR Pear', the output will be 'False'."
  },
  "advanced/calculated-attributes/operators/incnum.html": {
    "href": "advanced/calculated-attributes/operators/incnum.html",
    "title": "INCNUM - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "INCNUM - Calculated Attribute Operator Specification Value Description The INCNUM operator increases the value of its parameter by 1. The operator can be used only for String values whоose last character is a number. The INCNUM operator can be used for consecutive numbering of documents and nomenclatures. Parameter 1 Name Value Parameter 1 Type string Parameter 2 Name - Parameter 2 Type - Parameter 3 Name - Parameter 3 Type - Return Value ++Value Note If you try to increment the string value whоose last character is a number 'AA01', the incrementation will be successful and result will be 'AA02'; If you try to increment a value whoоse type is Decimal, Int or Date, the incrementation won't be successful and the Calculated Attribute won't be compilated; If the value is a string whose last character is not a number ('AA', for example), the incrementation won't be successful. Examples The following example shows how to increase the LotNumber of the Lot by 1 with the INCNUM operator: 10: INCNUM ATTRIB:Number OUTPUT: If 'Number = 0001'', the output will be '0002'. If 'Number = AA01'', the output will be 'AA02'. Note The repository of the attribute is Logistics.Inventory.Lots"
  },
  "advanced/calculated-attributes/operators/left.html": {
    "href": "advanced/calculated-attributes/operators/left.html",
    "title": "LEFT - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "LEFT - Calculated Attribute Operator Specification Value Description Gets the first n characters of a string (starting from left). Parameter 1 Name String Parameter 1 Type string Parameter 2 Name NumChars Parameter 2 Type int Parameter 3 Name - Parameter 3 Type - Return Value Returns the first Numchars characters of the String. Example The following example returns the first 3 characters of the Notes set in the Sales Order: 10: LEFT ATTRIB:Notes CONST:3 OUTPUT: If 'Notes = Apple', the output will be 'App'. If 'Notes = I am', the output will be 'I a'. Note The repository of the attribute is Crm.Sales.SalesOrders"
  },
  "advanced/calculated-attributes/operators/len.html": {
    "href": "advanced/calculated-attributes/operators/len.html",
    "title": "LEN - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "LEN - Calculated Attribute Operator Specification Value Description Returns the length of the string. Parameter 1 Name String Parameter 1 Type string Parameter 2 Name - Parameter 2 Type - Parameter 3 Name - Parameter 3 Type - Return Value Returns the length of a string. Note The spaces are included when calculating the length. Example The following example returns the lenght of the Notes set in the Sales Order: 10: LEN ATTRIB:Notes OUTPUT: If 'Notes = Apple', the output will be '5'. If 'Notes = I am', the output will be '4'. Note The repository of the attribute is Crm.Sales.SalesOrders"
  },
  "advanced/calculated-attributes/operators/like.html": {
    "href": "advanced/calculated-attributes/operators/like.html",
    "title": "LIKE - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "LIKE - Calculated Attribute Operator Specification Value Description Searches for a specified pattern in a string. It is usually used in a combination with the wildcars '%' and '_': The '%' symbol is used to define 0 or more characters before and after the searched string. '_' is used to define specifically 1 character. Parameter 1 Name String1 Parameter 1 Type string Parameter 2 Name Mask Parameter 2 Type string Parameter 3 Name - Parameter 3 Type - Return Value True in case String1 matches Mask. False in case String1 does not match the Mask. Examples 'a%' → Finds any values that start with \"a\". '%a' → Finds any values that end with \"a\". '%a%' → Finds any values that have \"a\" in any position. '_a%' → Finds any values that have \"a\" in the second position. 'a_%_%' → Finds any values that start with \"a\" and are at least 3 characters in length. 'a%o' → Finds any values that start with \"a\" and ends with \"o\". The following example returns True if the the string contains 'Apple' and after 'Apple' there is exactly on character: 10 LIKE ATTRIB:Notes CONST:%Apple_ OUTPUT: If 'Notes = Apples', the output will be 'True'. If 'Notes = Green Apples', the output will be 'True'. If 'Notes = apples', the output will be 'False'. If 'Notes = Apple', the output will be 'False'. If 'Notes = Apples', the output will be 'False'. Note The repository of the attribute is Crm.Sales.SalesOrders"
  },
  "advanced/calculated-attributes/operators/list.html": {
    "href": "advanced/calculated-attributes/operators/list.html",
    "title": "LIST - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "LIST - Calculated Attribute Operator Specification Value Description Returns a list with the string values of the specified attribute of the list of objects.The values in the created list are separated by a separator. If there is no indicated separator, then the list is separated with \", \" (comma + space) by default. Parameter 1 Name list Parameter 1 Type list of objects Parameter 2 Name attribute Parameter 2 Type attribute of the object // An attribute of a referent object could be used as well. For more information, see the example below. Parameter 3 Name separator (optional) // If Parameter3 is not specified, then the default separator is \", \" (comma + space) Parameter 3 Type string Return Value (attributeValue1, attributeValue2, ...) Introduced In Version 2019.1 Example 10: LIST CHILD:Lines EXP:20 CONST:'; ' 20: GETOBJVALUE REF:Product ATTRIB:Name OUTPUT: 'ProductsName1; ProductName2 ...' Note The repository of the attribute is Crm.Sales.SalesOrders"
  },
  "advanced/calculated-attributes/operators/lt.html": {
    "href": "advanced/calculated-attributes/operators/lt.html",
    "title": "LT - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "LT - Calculated Attribute Operator Specification Value Description Checks if an attribute value is smaller than another attribute's value (or a constant). Parameter 1 Name attribute1 Parameter 1 Type numeric (int, double, decimal) or datetime type Parameter 2 Name attribute2 Parameter 2 Type numeric (int, double, decimal) or datetime type Parameter 3 Name - Parameter 3 Type - Return Value If attribute1 < attribute2 the returned value is True, if else - the operator returns False. Note Ensure that the attributes which are compared have the same type. For example, Parameter 1 and Parameter 2 must be both integers, or doubles, or decimals, or datetime. Example 10: LT ATTRIB:LineNo CONST:30 OUTPUT: If 'LineNo = 20', the output will be 'True'. If 'LineNo = 30', the output will be 'False'. If 'LineNo = 40', the output will be 'False'. Note The repository of the attribute is Crm.Sales.SalesOrderLines"
  },
  "advanced/calculated-attributes/operators/lte.html": {
    "href": "advanced/calculated-attributes/operators/lte.html",
    "title": "LTE - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "LTE - Calculated Attribute Operator Specification Value Description Checks if an attribute value is smaller than or equal to another attribute's value (or a constant). Parameter 1 Name attribute1 Parameter 1 Type numeric (int, double, decimal) or datetime type Parameter 2 Name attribute2 Parameter 2 Type numeric (int, double, decimal) or datetime type Parameter 3 Name - Parameter 3 Type - Return Value If attribute1 <= attribute2 the returned value is True, if else - the operator returns False. Note Ensure that the attributes which are compared have the same type. For example, Parameter 1 and Parameter 2 must be both integers, or doubles, or decimals, or datetime. See the example in @(Compare Unit Price And The Standard Unit Price). Example 10: LTE ATTRIB:LineNo CONST:30 OUTPUT: If 'LineNo = 20', the output will be 'True'. If 'LineNo = 30', the output will be 'True'. If 'LineNo = 40', the output will be 'False'. Note The repository of the attribute is Crm.Sales.SalesOrderLines More Examples Compare Unit Price And Standard Unit Price"
  },
  "advanced/calculated-attributes/operators/multiply.html": {
    "href": "advanced/calculated-attributes/operators/multiply.html",
    "title": "MULTIPLY - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "MULTIPLY - Calculated Attribute Operator Specification Value Description Multiply the specified numbers. Parameter 1 Name Number1 Parameter 1 Type numeric type - int, double or decimal Parameter 2 Name Number2 Parameter 2 Type numeric type - int, double or decimal Parameter 3 Name - Parameter 3 Type - Return Value Number1 * Number2 Note Ensure that the numbers of both parameters are from the the same type. For example, Parameter 1 and Parameter 2 must be both integers, doubles, or decimals. Example 10: MULTIPLY ATTRIB:QuantityValue CONST:2.00 OUTPUT: If 'QuantityValue = 3.00', the output will be '6.00'. Note The repository of the attribute is Crm.Sales.SalesOrderLines More Examples Total Quantity And Scrap Quantity In Recipe Ingredients ."
  },
  "advanced/calculated-attributes/operators/not.html": {
    "href": "advanced/calculated-attributes/operators/not.html",
    "title": "NOT - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "NOT - Calculated Attribute Operator Specification Value Description Returns logical negation on an expression. Parameter 1 Name Condition Parameter 1 Type boolean Parameter 2 Name - Parameter 2 Type - Parameter 3 Name - Parameter 3 Type - Return Value False - if Condition is True; True - if Condition is False Example 10: NOT EXP:20 20: EQUAL ATTRIB:LineNo CONST:10 OUTPUT: If 'LineNo = 10', the output will be 'False'. If 'LineNo = 20', the output will be 'True'. Note The repository of the attribute is Crm.Sales.SalesOrderLines"
  },
  "advanced/calculated-attributes/operators/or.html": {
    "href": "advanced/calculated-attributes/operators/or.html",
    "title": "OR - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "OR - Calculated Attribute Operator Specification Value Description Checks if any of the conditions are True. If so - the operator returns True. If all specified conditions are not True, the operator returns False. Parameter 1 Name Condition1 Parameter 1 Type boolean Parameter 2 Name Condition2 Parameter 2 Type boolean Parameter 3 Name - Parameter 3 Type - Return Value Condition1 OR Condition2 Example 10: OR EXP:20 EXP:30 20: EQUAL ATTRIB:LineNo CONST:10 30: EQUAL ATTRIB:LineNo CONST:20 OUTPUT: If 'LineNo = 10', the output will be 'True'. If 'LineNo = 20', the output will be 'True'. If 'LineNo = 30', the output will be 'False'. Note The repository of the attribute is Crm.Sales.SalesOrderLines"
  },
  "advanced/calculated-attributes/operators/orderby.html": {
    "href": "advanced/calculated-attributes/operators/orderby.html",
    "title": "ORDERBY - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "ORDERBY - Calculated Attribute Operator Specification Value Description Clause, that specifies a column or expression on which the query result set is sorted. Used as a clause of SELECT. Parameter 1 Name attribute Parameter 1 Type any type Parameter 2 Name order (optional) //if not set, the default is ASC Parameter 2 Type const - ASC or DESC Parameter 3 Name inner clauses (optional) Parameter 3 Type expression Return Value Ordered result set of a query by the specified column or expression. Introduced In Version (In implementation) Example 10: SELECT REPO:General.Products.Products EXP:20 20: TOP CONST:5 EXP:30 30: ORDERBY ATTR:PartNumber CONST:ASC EXP:40 40: WHERE ..."
  },
  "advanced/calculated-attributes/operators/Overview.html": {
    "href": "advanced/calculated-attributes/operators/Overview.html",
    "title": "Operators | ERP.net Tech Docs",
    "keywords": "Operators CAST - Calculated Attribute Operator CEILING - Calculated Attribute Operator FILTER - Calculated Attribute Operator FLOOR - Calculated Attribute Operator FORMATSTRING - Calculated Attribute Operator GETOBJVALUE - Calculated Attribute Operator GTE - Calculated Attribute Operator INCNUM - Calculated Attribute Operator LEN - Calculated Attribute Operator LTE - Calculated Attribute Operator OR - Calculated Attribute Operator ORDERBY - Calculated Attribute Operator REPLACE - Calculated Attribute Operator SELECT - Calculated Attribute Operator ADD - Calculated Attribute Operator ADDDAYS - Calculated Attribute Operator AND - Calculated Attribute Operator CONCAT - Calculated Attribute Operator CONVERT - Calculated Attribute Operator COUNT - Calculated Attribute Operator DIVIDE - Calculated Attribute Operator EQUAL - Calculated Attribute Operator FIRST - Calculated Attribute Operator GETVALUE - Calculated Attribute Operator GT - Calculated Attribute Operator IIF - Calculated Attribute Operator IN - Calculated Attribute Operator LEFT - Calculated Attribute Operator LIST - Calculated Attribute Operator LT - Calculated Attribute Operator MULTIPLY - Calculated Attribute Operator NOT - Calculated Attribute Operator POS - Calculated Attribute Operator REGEX - Calculated Attribute Operator RIGHT - Calculated Attribute Operator ROUND - Calculated Attribute Operator SORT - Calculated Attribute Operator SUBSTRING - Calculated Attribute Operator SUM - Calculated Attribute Operator TODAY - Calculated Attribute Operator TOLOWER - Calculated Attribute Operator TOP - Calculated Attribute Operator TOUPPER - Calculated Attribute Operator WHERE - Calculated Attribute Operator"
  },
  "advanced/calculated-attributes/operators/pos.html": {
    "href": "advanced/calculated-attributes/operators/pos.html",
    "title": "POS - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "POS - Calculated Attribute Operator Specification Value Description Searches term in string, returns first position or -1 if not found. Parameter 1 Name term Parameter 1 Type string Parameter 2 Name string Parameter 2 Type string Parameter 3 Name - Parameter 3 Type - Return Value Returns the position of term in string. If there are more than one occurrences of term in string, returns the first position. If term is not part of string, returns -1."
  },
  "advanced/calculated-attributes/operators/regex.html": {
    "href": "advanced/calculated-attributes/operators/regex.html",
    "title": "REGEX - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "REGEX - Calculated Attribute Operator Specification Value Description Returns whether the string matches the regex mask. Parameter 1 Name String1 Parameter 1 Type string Parameter 2 Name Mask Parameter 2 Type regex expression Parameter 3 Name - Parameter 3 Type - Return Value True - if String1 matches Mask; False - if String1 does not match the Mask ."
  },
  "advanced/calculated-attributes/operators/replace.html": {
    "href": "advanced/calculated-attributes/operators/replace.html",
    "title": "REPLACE - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "REPLACE - Calculated Attribute Operator Specification Value Description Replaces old with new value in string. Parameter 1 Name String1 Parameter 1 Type string Parameter 2 Name OldValue Parameter 2 Type string Parameter 3 Name NewValue Parameter 3 Type string Return Value A string that is equivalent to String1 except that all instances of OldValue are replaced with NewValue. If OldValue is not found in String1, the operator returns String1."
  },
  "advanced/calculated-attributes/operators/right.html": {
    "href": "advanced/calculated-attributes/operators/right.html",
    "title": "RIGHT - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "RIGHT - Calculated Attribute Operator Specification Value Description Gets the last n characters of a string. Parameter 1 Name String Parameter 1 Type string Parameter 2 Name NumChars Parameter 2 Type int Parameter 3 Name - Parameter 3 Type - Return Value Returns the last NumChars characters of String."
  },
  "advanced/calculated-attributes/operators/round.html": {
    "href": "advanced/calculated-attributes/operators/round.html",
    "title": "ROUND - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "ROUND - Calculated Attribute Operator Specification Value Description Rounds mathematically with the specified precision. Parameter 1 Name Number Parameter 1 Type double or decimal Parameter 2 Name DecimalPlaces (optional) Parameter 2 Type int Parameter 3 Name - Parameter 3 Type - Return Value Number, rounded up to the digit, specified in DecimalPlaces Note Parameter 2 is optional. If Parameter 2 is not set, it is considered 0 (zero)."
  },
  "advanced/calculated-attributes/operators/select.html": {
    "href": "advanced/calculated-attributes/operators/select.html",
    "title": "SELECT - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "SELECT - Calculated Attribute Operator Specification Value Description Gets the objects matching the clauses. Parameter 1 Name Repository Parameter 1 Type repository Parameter 2 Name Clauses (optional, but highly advisable) // For more information see the 'FILTER AND WHERE filtering of a SELECT' section below) Parameter 2 Type operators ( WHERE , TOP ) Parameter 3 Name - Parameter 3 Type - Return Value Returns a list of objects from Repository matching Clauses. Note The SELECT operator returns limited number of records - 20 000. This limit is only for the returned records count, so as setting much filters as possible are highly recommended (filters in the WHERE clause). Example The WHERE clause of the SELECT statement supports the following operators: AND TOP EQUAL GT GTE LT LTE The operators which are not supported by the SELECT operator but may be used by the FILTER operator are: NOT OR LIKE FILTER AND WHERE filtering of a SELECT Having this in mind is really important when extracting lists from the database. When using SELECT operator we send a request to the database and it is preferred to set as much WHERE filters as possible. But if there is a filter, which is not supported by the EnterpriseOne Server, then the list that is returned by the select may be filtered additionally with the FILTER operator. The disadvantages are that the SELECT statement make a direct request to the database, which may reflect on the productivity and may slow down the calculation of the attribute. When using the SELECT operator the user has to apply as much WHERE filters as possible, because this would limit the amount of data which would be extracted from the database into the client. And then, if the select statement does not provide enough filters, the result from the select may be filtered by the FILTER operator which operates on the already loaded data in the client. Here are some examples to picture the information by far: If there is a need of a list of documents which DocumentTypeId is equal to 'bbd8e7ae-c0e0-4c1b-8730-7d68fa52971e' or '89ca5ca4-ad57-44c7-9b33-2ff44e054bff'. The documents are Work Orders. So the following calculated attribute would be incorrect: 10: SELECT REPO:Production.ShopFloor.WorkOrders EXP:20 20: WHERE EXP:30 30: OR EXP:40 EXP:50 40: EQUAL CONST:bbd8e7ae-c0e0-4c1b-8730-7d68fa52971e 45: ATTRIB:DocumentTypeId CONST:System.Guid 50: EQUAL EXP:45 CONST:89ca5ca4-ad57-44c7-9b33-2ff44e054bff This calculated attribute is incorrect and would return errors when used. So, we can set calculated attribute which selects the work orders and then to filter the list, which the SELECT operator returned and apply the FILTER operator for more precision. So the correct calculated attribute is as follows: 10: FILTER EXP:20 EXP:30 20: SELECT REPO:Production.ShopFloor.WorkOrders 30: OR EXP:40 EXP:50 40: EQUAL EXP:45 CONST:bbd8e7ae-c0e0-4c1b-8730-7d68fa52971e 45: CAST ATTRIB:DocumentTypeId CONST:System.Guid 50: EQUAL ATTRIB:DocumentTypeId CONST:89ca5ca4-ad57-44c7-9b33-2ff44e054bff"
  },
  "advanced/calculated-attributes/operators/sort.html": {
    "href": "advanced/calculated-attributes/operators/sort.html",
    "title": "SORT - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "SORT - Calculated Attribute Operator Specification Value Description Sorts the input list according to the specified attribute and order. Parameter 1 Name list Parameter 1 Type list Parameter 2 Name attribute Parameter 2 Type any type Parameter 3 Name order (optional) Parameter 3 Type string - ASC or DESC Return Value Returns the input list from parameter1, sorted by the specified attribute and in the specified order. If not specified, the default order is ascending (ASC) Example Take the last line of a sales order (ordered by LineNo), which has quantity >= 0: SalesOrder=> 10: FIRST EXP:20 20: SORT EXP:30 ATTR:LineNo CONST:DESC 30: FILTER CHILD:Lines EXP:40 40: GTE ATTR:QuantityValue CONST:0"
  },
  "advanced/calculated-attributes/operators/substring.html": {
    "href": "advanced/calculated-attributes/operators/substring.html",
    "title": "SUBSTRING - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "SUBSTRING - Calculated Attribute Operator Specification Value Description Returns a sub-string with the specified start and length. Parameter 1 Name string Parameter 1 Type string Parameter 2 Name start Parameter 2 Type int Parameter 3 Name len Parameter 3 Type int Return Value Part of string, starting from position start and with length of len."
  },
  "advanced/calculated-attributes/operators/sum.html": {
    "href": "advanced/calculated-attributes/operators/sum.html",
    "title": "SUM - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "SUM - Calculated Attribute Operator Specification Value Description Returns the sum of Value for all elements in the specified list. Parameter 1 Name List Parameter 1 Type list of objects Parameter 2 Name Value Parameter 2 Type numeric type - int, double or decimal Parameter 3 Name - Parameter 3 Type - Return Value Returns the sum of the Values of the elements in the List. Example See the example in Sales Amounts Of The Customer For The Last 30 Days"
  },
  "advanced/calculated-attributes/operators/today.html": {
    "href": "advanced/calculated-attributes/operators/today.html",
    "title": "TODAY - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "TODAY - Calculated Attribute Operator Specification Value Description This operator returns today's date, according to the server's regional settings. Parameter 1 Name - Parameter 1 Type - Parameter 2 Name - Parameter 2 Type - Parameter 3 Name - Parameter 3 Type - Return Value Today's date"
  },
  "advanced/calculated-attributes/operators/tolower.html": {
    "href": "advanced/calculated-attributes/operators/tolower.html",
    "title": "TOLOWER - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "TOLOWER - Calculated Attribute Operator Specification Value Description Returns the string, converted to lowercase. Parameter 1 Name string Parameter 1 Type string Parameter 2 Name - Parameter 2 Type - Parameter 3 Name - Parameter 3 Type - Return Value string (in lowercase)"
  },
  "advanced/calculated-attributes/operators/top.html": {
    "href": "advanced/calculated-attributes/operators/top.html",
    "title": "TOP - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "TOP - Calculated Attribute Operator Specification Value Description Clause, returning only the first n elements Parameter 1 Name Number Parameter 1 Type int Parameter 2 Name Clauses Parameter 2 Type operators WHERE Parameter 3 Name - Parameter 3 Type - Return Value The first Number elements. Note The TOP operator is used with the WHERE operator."
  },
  "advanced/calculated-attributes/operators/toupper.html": {
    "href": "advanced/calculated-attributes/operators/toupper.html",
    "title": "TOUPPER - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "TOUPPER - Calculated Attribute Operator Specification Value Description Returns the string, converted to uppercase. Parameter 1 Name string Parameter 1 Type string Parameter 2 Name - Parameter 2 Type - Parameter 3 Name - Parameter 3 Type - Return Value string (in uppercase)"
  },
  "advanced/calculated-attributes/operators/where.html": {
    "href": "advanced/calculated-attributes/operators/where.html",
    "title": "WHERE - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "WHERE - Calculated Attribute Operator Specification Value Description Clause which filters by the specified conditions. The second and the third parameters are optional. Parameter 1 Name Condition1 Parameter 1 Type boolean Parameter 2 Name boolean Parameter 2 Type Condition2 (optional) Parameter 3 Name boolean Parameter 3 Type Condition3 (optional) Return Value Clause, filtered by Condition1 AND Condition2 AND Condition3 Note The operator is used with operator SELECT ."
  },
  "advanced/calculated-attributes/overview.html": {
    "href": "advanced/calculated-attributes/overview.html",
    "title": "User Calculated Attributes | ERP.net Tech Docs",
    "keywords": "User Calculated Attributes User Calculated Attributes are user-defined objects, which extend the system entities. Calculated attributes are defined like formulas. When the value of a calculated attribute is requested, it is calculated \"on the fly\", in real time. Note Calculated attribute formulas are compiled to native executable format. Their calculation speed is very similar to the speed of the system defined calculated attributes. Example - Get default payment term days Suppose, that in a Sales Order, we want to display the customers default payment term (in days). In the Sales Order, we can define the following Calculated Attribute: No Operation Param1 Param2 Param3 10 GETREF REF:Customer ATTRIB:DefaultPaymentTermDays Explanation: GETREF - gets information from a related entity. The related entity is specified in Param1. The desired information is specified in Param2. Line number 10 is the only line in the calculated attribute The return value is the value of the attribute DefaultPaymentTermDays in the Customer entity. Example - Complex filter and summation The following calculated attribute sums all sales order lines, whose product: has a user data attribute, called \"CustPropPrj\", equal to '500' has a Name, containing the word 'Tool' No Operation Param1 Param2 Param3 10 SUM EXP:20 ATTRIB:LineAmount 20 FILTER CHILD:Lines EXP:30 30 IN ATTRIB:Product EXP:40 40 FILTER QUERY:Gen_Products EXP:50 50 AND EXP:60 EXP:70 60 EQUALS ATTRIB:CustPropPrj CONST:500 70 LIKE ATTRIB:Name CONST:'Tool' Explanation: Line 10: Iterates through the data set, specified on Line 20 (EXP:20), then SUMs the attribute LineAmount. Line 20: Filters the Lines subset with the filter, specified in Line 30 (EXP:30). Line 30: Creates a filter, which will be satisfied only by products, specified in the query on Line 40 (EXP:40). Line 40: Creates a query, which filters the products with the condition, specified on Line 50. Line 50: Specifies that the condition is comprised of two conditions, linked with AND. Line 60: Specifies that the first condition is the value of an attribute, called CustPropPrj should be 500. Line 70: Specifies that the second condition is that the Name of the product should contain 'Tool'. This example demonstrates, that Calculated Attributes can calculate very complicated formulas, query the database, get related values, etc."
  },
  "advanced/calculated-attributes/ParameterTypes/Overview.html": {
    "href": "advanced/calculated-attributes/ParameterTypes/Overview.html",
    "title": "Parameter Types | ERP.net Tech Docs",
    "keywords": "Parameter Types The type of the parameter specifies how to obtain the parameter value. Several types are available: CONST - when used, indicates that the Value for this parameter type would be a constant for every calculation of the calculated attribute. For more information, see Parameter Type CONST . ATTRIB - the value of system or user-defined attribute; REF - reference to another object; CHILD - detailed objects, related to the current master object; EXP - the value of the expression with the specified number (the user specifies the number in the Value field); INPUT - the input parameter for the specified expression number (the user specifies the number in the Value field); REPO - a repository; SYS - the value of a particular system variable as Login, Today, EnterpriseCompanyId and others. The Parameter Types are used in every calculated attributes. For examples see Calculated Attributes - Examples ."
  },
  "advanced/calculated-attributes/ParameterTypes/ParameterTypeCONST.html": {
    "href": "advanced/calculated-attributes/ParameterTypes/ParameterTypeCONST.html",
    "title": "Parameter type CONST | ERP.net Tech Docs",
    "keywords": "Parameter type CONST When used, indicates that the Value for this parameter type would be a constant for every calculation of the calculated attribute. The formats of the different types of values which are entered are as follows: Value Description Example NULL null or empty value NULL Boolean true or false value True Integer a whole number (not a fractional number) that can be positive, negative, or zero 93 Decimal number, containing decimal symbol - '.' 93.012 Date date values used in the 'yyyy-MM-dd' format 2020-12-25 Guid Global Unique Identifier - used for objects identification 6B29FC40-CA47-1067-B31D-00DD010662DA String explicitly denoted string, entered in single quotation marks 'Example text.' Type used with CAST . Used for type conversions and the constant is the type to which we want to convert. System.Int32 Everything else is treated as string!"
  },
  "advanced/calculated-attributes/ParameterTypes/ParameterTypeSYS.html": {
    "href": "advanced/calculated-attributes/ParameterTypes/ParameterTypeSYS.html",
    "title": "Parameter type SYS | ERP.net Tech Docs",
    "keywords": "Parameter type SYS SYS parameter type is used for system variables. They can be applied when we need to acquire information for the current user, date, time, enterprise company and oth.. The list of those variables is as follows: Value Description Example (returned value) Login The login of the user that is currently logged in the program. admin UserId The id of the user that is currently logged in the program. 9da64839-a8d0-491d-aebb-4d18fa42b014 RoleName The name of role that is currently set for the user. Administration RoleId The role that is currently set for the user. c764ff2b-38ca-4906-893a-2a21a1691f43 Today Current date. 23.6.2017 0:00:00 Now Current date-time from the server time zone. 23.6.2017 13:25:33 UtcNow Current date-time in Coordinated Universal Time (UTC) 23.6.2017 10:25:33 EnterpriseCompanyId The id of the enterprise company that is currently set for the user. b0e80577-fbbe-4c9b-811e-20b6c6dd465f EnterpriseCompanyLocationId The id of the enterprise company location that is currently set for the user. f2947790-e21f-4def-b533-fdc00a343ce6 Example (usage): 10: GETVALUE SYS:Login The line returns the login of the user that is currently logged in the program."
  },
  "advanced/calculated-attributes/QA/HowToCheckIfACustomPropertyHasValue.html": {
    "href": "advanced/calculated-attributes/QA/HowToCheckIfACustomPropertyHasValue.html",
    "title": "How to check if a custom property has value? | ERP.net Tech Docs",
    "keywords": "How to check if a custom property has value? When there is a need to check if a custom property of an object has value, usually we can just CAST the custom property to a string and then check if it is equal to null. However, the syntax of the calculated attribute should be tailored to the specifics of the Property Type of the particular custom property. Here are examples for the different custom property types which are universal to all repositories. The custom property code which is verified is CustomProperty1. Note that when a custom property is cast to string, only its value will be processed, and not its description. Property Type is 'Text' If the Property Type of the particular custom property is 'Text' use the following expressions: 10: IIF EXP:20 CONST:'null' CONST:'not null' 20: EQUAL EXP:30 CONST:NULL 30: CAST ATTRIB:@CustomProperty1 CONST:System.String Explanation: 10: if EXP:20 is true, return the text 'null, else - return 'not null' 20: if EXP:30 is empty, return true, else - return false 30: cast CustomProperty1 to string Property Type is 'Number' or 'Date' If the Property Type of the particular custom property is 'Number' or 'Date' use the following expressions: 10: IIF EXP:20 CONST:'null' CONST:'not null' 20: OR EXP:30 EXP:40 30: EQUAL EXP:50 CONST:NULL 40: EQUAL EXP:50 CONST:'' 50: CAST ATTRIB:@CustomProperty1 CONST:System.String Explanation: 10: if EXP:20 is true, return the text 'null, else - return 'not null' 20: if EXP:30 OR EXP:40 is true, return true, else - return false 30: if EXP:50 is empty, return true, else - return false 40: if EXP:50 is an empty string, return true, else - return false 50: cast CustomProperty1 to string Property Type is 'Picture' If the Property Type of the particular custom property is 'Picture' use the following expressions: 10: IIF EXP:20 CONST:'null' CONST:'not null' 20: EQUAL EXP:30 CONST:0 30: SUM EXP:40 CONST:1 40: FILTER EXP:70 EXP:50 50: NOT EXP:60 60: EQUAL ATTRIB:Picture CONST:NULL 70: SELECT REPO:General.PropertyValues EXP:80 80: WHERE EXP: 90 EXP:100 90: EQUAL ATTRIB:PropertyId CONST:86ba82c9-8843-e611-82a1-b010410e63e2 100: EQUAL ATTRIB:EntityItemId CONST:47e225e9-f4b6-e611-af28-00155d001f28 Explanation: 10: if EXP:20 is true, return the text 'null, else - return 'not null' 20: if EXP:30 is equal to 0, return true, else - return false 30: count the records of the list returned by EXP:40 40: filter the list returned by EXP:70 by the condition of EXP:50 50: if EXP:60 is true, return false, else - return true 60: if ATTRIB:Picture is equal to NULL, return true, else - return false 70: select the records of table General.PropertyValues filtered by the clauses of EXP:80 80: if EXP:90 AND EXP:100 are true, return true, else - return false 90: if ATTRIB:PropertyId is equal to 86ba82c9-8843-e611-82a1-b010410e63e2, return true, else - return false 100: if ATTRIB: ATTRIB:EntityItemId is equal to 47e225e9-f4b6-e611-af28-00155d001f28, return true, else - return false Note EntityItemId is the Id of the actual entity (particular document, line, product) for which the value is specified."
  },
  "advanced/calculated-attributes/QA/HowToCheckIfAListHaveValues.html": {
    "href": "advanced/calculated-attributes/QA/HowToCheckIfAListHaveValues.html",
    "title": "How to check if a list have values? | ERP.net Tech Docs",
    "keywords": "How to check if a list have values? When working with lists, often there is a need to check if this list actually contains any values (records). For example - there is a calculated attribute which calculates the Quantity in the Sales Order Lines in specified measurement unit. There is always the possibility that the user enter a product which has no dimensions for the required measurement unit. In such cases, an instrument to check the lists records count is needed. The described case is solved by the following expression: SUM(List, 1) This expression returns integer value containing the number of records in the entered list. Here is an example expression and its description. This example is defined in the Sales Order header and checks if the lines contain one specific product. So the Repository of the calculated attribute is Crm.Sales.SalesOrders and its expressions are: 10: SUM EXP:20 CONST:1 20: FILTER CHILD:Lines EXP:30 30: EQUAL ATTRIB:ProductId CONST:d3d83bf0-d1fc-e611-9c53-00155d001f52 Explanation: 10: check the records count in list in expression 20 20: filter the list of Lines (detailed objects of the Sales Order object) by the filter in expression 30 30: check if the ProductId in the line is equal to Guid d3d83bf0-d1fc-e611-9c53-00155d001f52 This calculated attribute returns zero or greater value, depending on the count of the records in the Sales Order Lines with product with id of d3d83bf0-d1fc-e611-9c53-00155d001f52."
  },
  "advanced/calculated-attributes/QA/HowToCheckWhetherAFieldThatPointsToAReferenceObjectHasAValue.html": {
    "href": "advanced/calculated-attributes/QA/HowToCheckWhetherAFieldThatPointsToAReferenceObjectHasAValue.html",
    "title": "How to check whether a field that points to a reference object has a value? | ERP.net Tech Docs",
    "keywords": "How to check whether a field that points to a reference object has a value? Often when we are creating a calculated attribute and we want to get a value from a referent object, first we need to check if the current record has a reference to this object at all. A.k.a. we need to check if a particular Id field has a value or not. The recommended way to perform this validation is to check whether there is a referent object: 20 EQUAL REF:AdjustedDocument CONST:NULL ​ and NOT whether the Id fields itself is empty: 20 EQUAL ATTRIB:AdjustedDocumentId CONST:NULL The first approach is recommended because: a. the second approach may lead to incorrect results - there are cases with wrong results when this approach is used in a SELECT clause or in multiple nested calculated attributes. b. the first approach does not require type conversions - we are directly checking of there is a reference object and we don't have use CAST or CONVERT operators to match the types before the comparison."
  },
  "advanced/calculated-attributes/QA/HowToCreateAnOptimallyFastCalculatedAttribute.html": {
    "href": "advanced/calculated-attributes/QA/HowToCreateAnOptimallyFastCalculatedAttribute.html",
    "title": "How to create an optimally fast calculated attribute? | ERP.net Tech Docs",
    "keywords": "How to create an optimally fast calculated attribute? When creating a calculated attribute there are some things that are good too keep in mind in order to create an optimally fast syntax. Here we are going to describe some advices that should be followed during the design of the attribute. Generally, those advices can be summarized to: Use REF instead of SELECT If you have to use a SELECT – Use WHERE clauses instead of FILTER clauses Filter the FILTER - Filter the list returned to the FILTER as much as you can But let's get into the details. Using a REF means that we are using the collection of elements that have already been loaded in the memory. The REF connection leads only to the records that refer to by the current entity. Using a SELECT means that for each calculation of attribute the system will create a request to the server and will look through the whole table that we have selected. A single table could contain millions of records (or even more). More records inevitably means slower calculation. Like any other design when creating a calculated attribute there usually is more than one way that we can use to calculate the value especially when the calculation is a bit more complicated. Sometimes using SELECT looks like the simplest option (the fist that comes in mind) to reach the value we need, but first, we should always try to think if there is a reference connection that we can use instead in order to achieve a faster calculation. Example: Let's imagine that we need to show a field with Total Line Amount value in the Sales Order Line. Therefore we will need to calculate the Sum of the Line Amount of all Sales Order lines of the particular Sales Order. Such attribute can be created at least two ways (the repository is Crm.Sales.SalesOrderLines): Using a SELECT Using a SELECT (using all records in the Crm.Sales.SalesOrderLines table) 10 SUM EXP:20 ATTRIB:LineAmountValue 20 SELECT REPO:Crm.Sales.SalesOrderLines EXP:30 30 WHERE EXP:40 40 EQUAL ATTRIB:SalesOrderId EXP:50 50 GETOBJVALUE INPUT:10 ATTRIB:SalesOrderId Using a REF Using a REF (using only the lines of the current SalesOrder) 10 SUM EXP:20 ATTRIB:LineAmountValue 20 GETOBJVALUE REF:SalesOrder CHILD:Lines Of course, there are some scenarios in which we want to reach the data of a table to which we simply can use a reference connection. But when using a SELECT the are some tricks that we can use to fast the calculation. When we SELECT a table we can filter its records with WHERE or FILTER clauses. The most important thing that we must know about them is that when using: WHERE clauses – the conditions are applied together with the SELECT to the whole list and directly on the server. Much faster performance in comparison with FILTER, especially for a list with lots of records. FILTER clauses - filters are applied locally (on the client side) to the list that has been returned from the SELECT. Knowing this there are two basic conclusions that we can come to. First, if we should always choose WHERE clauses instead FILTER clauses if possible. Most of the other operators are supported in both cases, but we must say that WHERE clauses have certain limitation. For example, they can not be used along with NOT , OR and LIKE operators (for more information, see SELECT ). If we have no other choice but to use FILTER we proceed to the next paragraph (advice). And second, when we use FILTER clauses we should always try to narrow down the list that we are returning. How to do so? Just apply as much WHERE clauses as possible to the SELECT. This way we are filtering the list before it is returned to the FILTER and therefore it will contain fewer records, which will lead to a faster calculation. As a conclusion, we don’t claim that using a SELECT is a bad thing it is a very powerful tool that just has to be used wisely."
  },
  "advanced/calculated-attributes/QA/HowToDetermineThePartyTypeOfAParty.html": {
    "href": "advanced/calculated-attributes/QA/HowToDetermineThePartyTypeOfAParty.html",
    "title": "How to determine the party type of a party? | ERP.net Tech Docs",
    "keywords": "How to determine the party type of a party? If we need to compare the PartyType to check if it is a company, person or other the following calculation would do the job: CAST ATTRIB:PartyType CONST:System.Int32 Casting the PartyType to integer would return the following values: 0 - Company 1 - Company Location 2 - Person 3 - Store 4 - Company Division"
  },
  "advanced/calculated-attributes/QA/HowToGetAttributeValueFromList.html": {
    "href": "advanced/calculated-attributes/QA/HowToGetAttributeValueFromList.html",
    "title": "How to get attribute value from list? | ERP.net Tech Docs",
    "keywords": "How to get attribute value from list? Often mistake is to try to get a value of an attribute from a list. For example, if we want to get the user who changed the document state: 10: GETOBJVALUE CHILD:StateChanges ATTRIB:UpdateUser This is incorrect expression. The right expression would be to filter the child list and then get the first element of the list. This is an example filtering: 10 GETOBJVALUE EXP:20 ATTRIB:UpdateUser 20 FIRST EXP:30 30 FILTER CHILD:StateChanges EXP:40 40 EQUAL ATTRIB:SystemInitiated CONST:False Explanation: 10: get the value of the UserUpdate field from object in expression 20 20: get the first record in the list in expression 30 30: filter the child list StateChanges by the filter in expression 40 40: check if the attribute SystemInitiated is equal to False"
  },
  "advanced/calculated-attributes/QA/HowToGetSpecificFieldOfAParentDocument.html": {
    "href": "advanced/calculated-attributes/QA/HowToGetSpecificFieldOfAParentDocument.html",
    "title": "How to get specific field of a parent document? | ERP.net Tech Docs",
    "keywords": "How to get specific field of a parent document? When in a calculation attribute there is a need of a value of attribute of the parent document there are two options to get them: The attribute is part of the parent Document table The attribute is part of the specific entity of the parent document If the attribute is part of the parent Document table, than we may get it directly by GETOBJVALUE operator in the following expression: 10: GETOBJVALUE REF:Parent ATTRIB:DocumentNo This expression would be valid for every document which has parent document. But in the second case, when the attribute is part of the specific entity of the parent document (meaning SalesOrder, StoreOrder, StoreTransaction, Payment and etc.) than the user has to tell the calculate attribute what is the parent document. This is done by casting the parent document to the entity which is required (in the example a cast to Offer is used): 10: GETOBJVALUE EXP:20 ATTRIB:DocumentNo 20: CAST REF:Parent CONST:Aloe.EnterpriseOne.Model.Crm.Presales.Offer It is supposed to show such calculated attribute in document form where the parent document is exactly Offer."
  },
  "advanced/calculated-attributes/QA/HowToShowContactOfAPersonInPersonsNavigator.html": {
    "href": "advanced/calculated-attributes/QA/HowToShowContactOfAPersonInPersonsNavigator.html",
    "title": "How to show contact of a Person in Persons navigator? | ERP.net Tech Docs",
    "keywords": "How to show contact of a Person in Persons navigator? The specific of this calculated attribute is that the contact mechanism type is enum type. This is why it is accessed specifically. Its values and codes are as follows: Member name Value Description Address 0 Address value. Stored as 'A'. Mail 1 Mail value. Stored as 'E'. Fax 2 Fax value. Stored as 'F'. MobilePhone 3 MobilePhone value. Stored as 'M'. Other 4 Other value. Stored as 'O'. Telephone 5 Telephone value. Stored as 'T'. WebSite 6 WebSite value. Stored as 'W'. So, lets say we need to get a column with the emails of the persons (if the person has more than one emails - a random one; if a specific email is needed - more filters would be needed). The calculated attribute would have the following expressions: 10 GETOBJVALUE EXP:20 EXP:15 15 GETOBJVALUE REF:ContactMechanism ATTRIB:Name 20 FIRST EXP:21 21 FILTER EXP:30 EXP:22 22 EQUAL EXP:23 EXP:25 23 GETOBJVALUE REF:ContactMechanism ATTRIB:ContactMechanismType 25 CAST CONST:1 CONST:Aloe.EnterpriseOne.Model.General.Contacts.ContactMechanismsRepository+ContactMechanismType 30 SELECT REPO:General.Contacts.PartyContactMechanisms EXP:40 40 WHERE EXP:50 50 EQUAL ATTRIB:PartyId EXP:60 60 GETOBJVALUE INPUT:10 ATTRIB:PartyId Explanation: 10: from the object from EXP:20 get the attribute from EXP:15 15: get the value of the attribute Name from the referent object ContactMechanism 20: get the first element from the list in EXP:21 21: filter the list in EXP:30 by the conditions in EXP:22 22: check if EXP:23 is equal to EXP:25 23: get the value of the attribute ContactMechanismType from the referent object ContactMEchanism 25: cast the constant of \"1\" (this is integer) to type 'Aloe.EnterpriseOne.Model.General.Contacts.ContactMechanismsRepository+ContactMechanismType' 30: select from repository General.Contacts.PartyContactMechanisms and filter it by EXP:40 40: the filter is in EXP:50 50: check if the value of attribute PartyId is equal to EXP:60 60: get the value of attribute PartyId of the input object of expression 10"
  },
  "advanced/calculated-attributes/QA/HowToUseTheCustomerAsACompany.html": {
    "href": "advanced/calculated-attributes/QA/HowToUseTheCustomerAsACompany.html",
    "title": "How to use the customer as a company? | ERP.net Tech Docs",
    "keywords": "How to use the customer as a company? When we work with the customer, we can only get its party attributes as the customer may be company, company location or a person. So if we know that the customer is a company and we need to get his company attributes, we can cast its reference Party to Aloe.EnterpriseOne.Model.General.Contacts.Company. For example, to get the Responsible Person of the company of the customer, the following attribute would do the job: (repository of the attribute: Crm.Customers) Expressions: 10: GETOBJVALUE EXP:20 ResponsiblePersonName 20: CAST REF:Party CONST:Aloe.EnterpriseOne.Model.General.Contacts.Company Note If the customer is not a company, it would return an error."
  },
  "advanced/calculated-attributes/QA/Overview.html": {
    "href": "advanced/calculated-attributes/QA/Overview.html",
    "title": "Q & A | ERP.net Tech Docs",
    "keywords": "Q & A How to check if a custom property has value? How to check if a list have values? How to create an optimally fast calculated attribute? How to show contact of a Person in Persons navigator? How to use the customer as a company? How to check whether a field that points to a reference object has a value? How to determine the party type of a party? How to get attribute value from list? How to get specific field of a parent document?"
  },
  "advanced/concepts/aggregates.html": {
    "href": "advanced/concepts/aggregates.html",
    "title": "Aggregates | ERP.net Tech Docs",
    "keywords": "Aggregates What are Aggregates? \"Aggregate is a pattern in Domain-Driven Design. A DDD aggregate is a cluster of domain objects that can be treated as a single unit. An example may be an order and its line-items, these will be separate objects, but it's useful to treat the order (together with its line items) as a single aggregate.\" https://martinfowler.com/bliki/DDD_Aggregate.html Examples For example, in ERP.net, this is one single aggregate: a SalesOrder the Sales Order Lines of this Sales Order the Distributed Amounts for each of these Sales Order Lines the Document Amounts of this Sales Order the Payment Plan of this Sales Order Parent And Root Objects Each object in an aggregate can have a parent object.The parent is the logical \"owner\" of the child object(s). For example: The parent of Sales Order Line is Sales Order . The parent of Distributed Amount is the Sales Order Line . The ultimate object, which has no parent in the aggregate is the Aggregate Root. In this example, this is the Sales Order . Aggregate Events The Commit and ClientCommit events are now available in two different variations: Object Commit / Client-Commit Aggregate Commit / Client-Commit What is the difference? When an object commit event occurs, it means that the object itself was changed. The aggregate event occurs for the object when there is a change in ANY of its constituent objects, but only if the objects is an aggregate root. Lets take a look at the following structure which in EnterpriseOne is one single aggregate: a SalesOrder (which is the aggregate's root) the Sales Order Lines of this Sales Order the Distributed Amounts for each of these Sales Order Lines the Document Amounts of this Sales Order the Payment Plan of this Sales Order In the example above, the Commit event would occur for the Sales Order if and only if the Sales Order object itself has changed. While the Aggregate Commit will occur for the Sales Order if any of the objects in the aggregate has changed. For example, changing just a single Sales Order Line (without changing the Sales Order itself) would still trigger the Sales Order Aggregate event. Note Commit and Client-Commit still have the same meaning. E.g., Commit is the low-level event, which is triggered for everything committed to the database (be it from client request or as a result of some server processing). While Client-Commit is triggered only based on client requests and is considered the more light-weight approach. Note Initially, only the Aggregate Client Commit event would be available for user-defined business rules Business Rules . The Aggregate Commit will be used only internally, for system-defined business rules todo:(System Business Rules) The reason is to have a more light tread approach. If there is serious need, we can consider adding the Aggregate Commit event in the future for Business Rules . See also: Systems.Core.ExtensibleDataObjects Entity"
  },
  "advanced/concepts/master-detail-attributes.html": {
    "href": "advanced/concepts/master-detail-attributes.html",
    "title": "Master / Detail Attributes | ERP.net Tech Docs",
    "keywords": "Master / Detail Attributes When a document has the same field in its header and lines then these two fields interact in a specific manner. Example of such fields is the \"Store\" field in the Sales Order header and \"Line Store\" in its Sales Order Lines. The common principle is that if the field in the document header has value, we have to ensure that the corresponding field all document lines contains the same value. On the other hand, if the different lines contain different values - the document's header field must be empty. This principle is very important to avoid misleading of the users. Otherwise, if the Store field in the document header could contain a value even if the document lines have different store values - the user may look only in the header and be misled that this store applies to all of its lines as well, which may not be true in all cases. Master / Detail Attributes Concepts and Rules In order to make sure that the main principle described above is followed, is created a set of requirements and rules that are applied for each set of Master/Detail fields. The example for \"Store\" fields in document header/lines is used in the whole description for easy understanding. Concepts In order to allow that different lines may contain different stores and at the same time to follow the main principle - we have to make sure that the Store field in the document header may contain empty (NULL) values. Such value is set only when the document lines have different values. Opposite of this, the value in the field in the document lines is required/mandatory [Required = true] and must always contain a value. It is accepted that the main/leading field is the field in the lines - it is required/mandatory, i.e. there is a guarantee that it always contains a value. For example, if we are generating a Store Orders from Sales Orders - the Store field that is taken into account is the one in the Sales Order lines. We have to create separated Store Orders for each Line Store in order to execute the Sales Order correctly because in the Store Orders there is only one Store field and it is in the header. If the document does not contain any lines, then there is no limitation for the document header value - it doesn't matter if it is empty (NULL) and contains a value (not-NULL). Rules When saving or after we fill in (change) the value of the document header's field, this value is automatically set to ALL document lines. When all document lines have the same value in the Store field, then the field in the document header must contain the same value. The presence of a value in the document header field is an ease for the users - it is not necessary to constantly monitor whether the lines have different values or not. For this reason - after editing the value in the Line Store field and when saving or deleting lines - if it turns out that all lines contain the same Store value, then this value is automatically set in the document header field. When the different document lines have different values in the Store field, then the field in the document header must be empty (NULL). For this reason - after editing the value in the Line Store field and when saving or creating lines, if it turns out that the line contains a different Store value, then the Store field in the document header is automatically set to an empty value (NULL). When adding a new line, then in the Line Store field is set the default value that equal to the value from the document header (unless another default value is explicitly set). If the document header value is empty (NULL), then as a default value in the new line is considered the value from the previous lines. If this is impossible, hard or inapplicable - then the default value is empty (NULL)."
  },
  "advanced/concepts/object-relational-mapping.html": {
    "href": "advanced/concepts/object-relational-mapping.html",
    "title": "Object Relational Mapping | ERP.net Tech Docs",
    "keywords": "Object Relational Mapping Description Entities and Entity Types are terms, frequently used throughout the documentation. Entities are information objects, which represent real-world objects. Entity Type is the collection of all objects of a given type. For example, the Customer XYZ is an entity. Customer ABC is another entity. All customers are of an entity type, called 'Customers'. Definitions Entity - Single object of a given Entity Type. Also called entity object or simply object. It is similar to a data row in a table. Entity Type - The set of all objects of a given type. This is similar to a table. Attribute - a named value, containing information about the entity object. This is similar to a column in a table. Relationship to tables and rows This section contains more advanced information, not usually needed to operate the system. However, deeper understanding of the inner-workings might help sometimes, especially when one needs to access directly an ERP.net database, using database tools. Generally, Entity Types , Entities and Attributes are much like Tables , Rows and Columns. Data of the entities is ultimately stored in the database in the form of tables and rows. However, there is one important distinction - Entity Types and Entities are object-oriented representation of the table data. A technology, called ORM (Object-Relational Mapping) is used to map between entities and tables. In order to illustrate better the difference between objects and tables, lets include some real-world tables and objects: There is an entity type, called 'Party'. It has a descendant (more specialized) entity type, called 'Company'. So, Party is the more abstract and broad term, and Company is just one specialization. Person is another descendant of Party. Lets illustrate this using pseudo-graphics: Party +---- Company +---- Person Each Party has some attributes, like \"Parent Party\" and \"Area\". Company has \"VAT Number\" and \"Registration Type\" attributes. Each Person has \"First Name\" and \"Last Name\". Now, if we look at the tables, they have the following schema: Parties Party Id Parent Party Id Area Id Companies Party Id VAT Number Registration Type Person Party Id First Name Last Name If we look at the objects, they will have the following attributes: Party Parent Party Area Company Parent Party Area VAT Number Registration Type Person Parent Party Area First Name Last Name So, if we use table data, in order to access all attributes of a company or a person, we have to relate (join) data from different tables, using unique Identifiers. The identifiers are the so-called \"surrogate keys\", because they are existing only in the database and have no real-world counterpart. Using such keys and relating data between tables is ordinary in the relational world of the databases. However, internally, the systems use objects, because it is much simpler to process them. Objects already have all the necessary attributes related together and there is no need to use Identifiers or table relations. This is only an introduction to the topic of object-relational mapping. More deeper look would go too deep in the developer details of the subject."
  },
  "advanced/custom-attributes/domain-with-property-allowed-values.html": {
    "href": "advanced/custom-attributes/domain-with-property-allowed-values.html",
    "title": "Domain with Property Allowed Values | ERP.net Tech Docs",
    "keywords": "Domain with Property Allowed Values Domain is the range of the allowed values of the particular Custom Property. It is determined in one of the following ways - sorted by priority: If \"Limit To Allowed Values\" does NOT have a check mark, then any value is valid and the domain is a range of all possible values. If the \"Allowed Values Entity Name\" has a value, then the domain is the set of all records of the specified data type. Note This field should have a value ONLY if \"Limit To Allowed Values\" has a check mark and \"Allowed Values Property\" does not have a value. If the field \"Allowed Values Property\" has a value, then the domain of the current custom property is equal to the domain of the custom property specified in this field. CustomProperty.Domain = CustomProperty.AllowedValuesProperty.Domain Note This field should have a value ONLY if \"Limit To Allowed Values\" has a check mark and \"Allowed Values Entity Name\" does NOT have a value. (Default, Lowest Priority) The domain is the range of the \"Property Allowed Values\" listed in the Gen_Property_Allowed_Values sub-table. Example 1: Let's assume that we have the following properties: Property 1 (Entity Name = Products) Property 2 (Allowed Values Property = Property 1) Property 3 (Entity Name = Products) Property 4 (Entity Name = Companies) Property 5 (Allowed Values Property = Property 2) Property 6 (Limit To Allowed Values = False) In this case, the domains are: Property 1 - Products Property 2 - Products Property 3 - Products Property 4 - Companies Property 5 - Products Property 6 – All possible values Compatible Custom Properties Two custom properties are copy compatible when then and only then their domains are the same. The compatibility allows us to copy values from one custom property to another. It is still possible the copying to throw an error, but this would be caused by different reasons – additional filters set in the definition, for example An important note is that the additional filters do not change the domain of the custom property. They just reduce the range with allowed values. It is also possible future procedures or rules to be added – but they won’t change the actual domain of the custom properties either. In general, we can accept that the domain of the allowed values, from a programming point of view, could be defined as a kind of custom property type. Example 2: If we use the description of Example 1, we can conclude that Property 1 is compatible with Property 2. Both of them are compatible with Property 3 and Property 5. On the other hand Property 1, Property 2, Property 3 and Property 5 are compatible with each other. Property 4 in not compatible with none of the above. Property 6, although it could receive any possible value, is also noncompatible with other custom properties. Inheriting and hereditary root A custom property inherits another custom property by indicating a (hereditary) parent property in the \"Allowed Values Property\" field. The hereditary root is the grand-parent, which does not have a hereditary root on its own. The hereditary root of a custom property clearly defines its domain and is a prerequisite for automatic copying of its allowed values. A hereditary root is defined as follows: If \"Allowed Values Property\" does not have a value, then the hereditary root is the custom property itself Otherwise, the hereditary root is equal to the hereditary root of the parent custom property. This means that: HereditaryRoot (Property) = HereditaryRoot(Property. AllowedValuesProperty) i.e. we look recursively in the relation “Allowed Values Property”. Example 3: If we use the example above, custom properties have the following hereditary roots: Property 1: Property 1 Property 2: Property 1 Property 3: Property 3 Property 4: Property 4 Property 5: Property 1 Property 6: Property 6 Copying Hereditary roots are used to determine the most appropriate \"partner\" for the automatic copying of the allowed values of the custom properties. We will look at an example in which we want to copy custom properties from a Customer to a Sales Order document: Example 4: Let’s assume that: the Customer has the following custom properties: FAVORITE-PRODUCT: (Entity Name = Products) ADVANCE-PRODUCT: (Entity Name = Products) In the Sales Order document type are set the following custom properties: FAVORITE-PRODUCT-CUSTOMER: Allowed Values Property = CUSTOMER. FAVORITE-PRODUCT SALE-ADVANCE-PRODUCT: Allowed Values Property = CUSTOMER.ADVANCE-PRODUCT In this case: All 4 custom properties are \"compatible\". They could inherit values from one another. At the same time, only the following pairs have the same hereditary root: ​ A) FAVORITE-PRODUCT-CUSTOMER and FAVORITE-PRODUCT ​ B) SALE-ADVANCE-PRODUCT and ADVANCE-PRODUCT Copying: Accordingly, when specifying a Customer in Sales Order, only the custom properties that have the same hereditary root will be automatically copied from the Customer to the Document. Custom properties value priorities (when copying to a document) The priority for automatic copying of custom properties to a document is determined according to the following priorities (from the highest to the lowest priority): Note The priorities represent the following logic. If for a custom property is found a value with a higher priority, then – copy the value. If not – search for values with lower priorities Inherited values from the parent document. (Priority 80) The values set in the panel \"Copy customer properties\" (valid only for Sale Orders, but the same priority applies if there is a similar table for other types of data). (Priority 70) Values from custom properties with the same hereditary root in the definition of the „main contractor” of the document. In general cases, this is the party loaded in the field \"To Party\" (an exception are Purchase Invoices, where the Supplier is considered as a \"main contractor\"). (Priority 50) The default values specified in the document type. (Priority 20) If none of the above contains a value for the custom property, but it is specified in the document type – set an empty (NULL) value. (Priority 10) Note Every manual change of value of custom property, should be done after being entered values in all relevant nomenclatures (Enterprise Company, Customer, Parent document etc.)"
  },
  "advanced/custom-attributes/overview.html": {
    "href": "advanced/custom-attributes/overview.html",
    "title": "Custom Attributes | ERP.net Tech Docs",
    "keywords": "Custom Attributes Custom Attributes (also called \"Custom Properties\") allow the user to extend the data model with user-defined attributes. Custom Attributes store values in the database, extending the system tables. Similarity With System Attributes The custom attributes behave mostly like the system attributes. They can be shown in columns, grouped and filtered in navigators just like system attributes. Again similar to system attributes, they can have default values and shown in the view of data forms. Most of the time, the end users can't distinguish between system and custom attributes. It is up to the implementation team to define custom attributes, which fit best the implementation requirements. Note Many custom attributes can easily be defined and set as \"required\". However, this might endanger the whole ERP implementation, since requiring too much data entry for each operation can alienate the end users from the system. Carefully balance the business needs with the end user comfort."
  },
  "advanced/data-objects/extensible-data-objects.html": {
    "href": "advanced/data-objects/extensible-data-objects.html",
    "title": "Extensible Data Objects EDO | ERP.net Tech Docs",
    "keywords": "Extensible Data Objects EDO Description And Usage The Extensible Data Objects (EDO) is a system in ERP.net, which allows attaching additional data to all entities in the system. Types of additional data, which can currently be attached: File Attachments. Track Changes change tracking data. How It Works? EDO objects are stored in the Sys_Objects entity. The system works in the following way: An object in any entity requires attaching additional data. A new record is created in Sys_Objects. The additional data is created in sub-tables, which have referential integrity to Sys_Objects. The record in Sys_Objects has only untyped soft reference (not referential integrity) to the original record. It contains Entity_Type and Entity_Item_Id fields, which uniquely identify the original record. All additional data is related to Sys_Objects through typed referential integrity. In this way, the only untyped soft reference is the original reference in Sys_Objects , but most data is solidly related through typed referential integrity. Note The todo:(Custom Properties) system was implemented prior to the Extensible Data Objects system, so it also uses untyped soft reference. If we would have to design the Custom Properties system now, it would be implemented as \"additional data\" to the EDO system. Future Plans The EDO system is very useful for creating additional data, which can be attached to multiple entities. It is not required that the type of data should be attachable to ALL entities. The data model allows attaching data to any entity, but system business rules or Business Rules can be used to limit the entities, which actually \"accept\" the data. Possible (planned) future uses: Comments/Replies - many objects in the system can be augmented by allowing the users to comment and reply to them. All kinds of attachments - links, pictures, other system objects, etc. Tags/Labels for back-link navigation. Future simplified implementation of custom properties. Reactions - Facebook style reactions. Reviews - marketplace style reviews. See also: Systems.Core.ExtensibleDataObjects Entity"
  },
  "advanced/data-objects/index.html": {
    "href": "advanced/data-objects/index.html",
    "title": "Data Objects Management | ERP.net Tech Docs",
    "keywords": "Data Objects Management Data Objects are a design pattern, used to encapsulate logic, which is available to most data records in the system. Each aggregate root is a data object. All data objects have some common attributes, sub-entities and operations. The following data and operations can be associated with a data object: Track changes [File Attachments] For more detailed information, see Extensible Data Objects ."
  },
  "advanced/data-objects/track-changes.html": {
    "href": "advanced/data-objects/track-changes.html",
    "title": "Track Changes | ERP.net Tech Docs",
    "keywords": "Track Changes Track Changes is a system in ERP.net, which can be used to track the changes in any data table. Tracking Levels The tracking levels specify the detail level of the tracking, as per the following table: Track Changes Level Name Description 0 Do Not Track Changes Do not track any changes for this entity. 1 Track Last Change Store information only for the latest modification of the tracked object. 2 Track Object Changes All the data of Level 1 + General tracking information about each update of the object. Do not store information about the changes in the attributes. 3 Track Object & Attribute Changes All the data of Level 2 + Information about the changes in the attributes, excluding the BLOB attributes. The BLOB (Binary Large Objects) attributes are large size attributes like images, files, etc. 4 Track Object, Attribute & BLOB Changes All the data of Level 3 + Changes in the values of BLOB attributes. Effects And Storage The system stores information based on the tracking level. The following topics summarizes the stored data and other considerations and remarks: Level 0 - Do Not Track Changes. No information is stored. Level 1 - Track Last Change Store information only for the latest modification. This is the lightest tracking mode with the least storage requirements. The information is stored in the Systems.Core.ExtensibleDataObjects Entity Note Extensible Data Objects object is created and maintained ONLY for the root object of the object Aggregates ). Upon first update of the tracked object, a new EDO record is created, if there isn't already one. For each successive update of any object in the aggregate, the data in the EDO is updated. The tracking data includes: Version Number - incremented on each update Creation User - the user who initially created the tracked object (if Track Changes was enabled by that time). Creation Time (UTC) - the time of initial creation in Universal Coordinated Time (UTC) timezone. Last Update User - the user who performed the last update OR deleted the object. Last Update Time (UTC) - the time of the last update. Is Deleted - specifies whether the tracked object is deleted. After the tracked object is deleted, the Extensible Data Objects information stays in the DB for some time, but can be purged by cleanup processes. Please note, that when the tracked object is deleted, the deletion user & time are stored in the Last Update User / Time. Level 2 - Track Object Changes With this level, the Extensible Data Objects is still updated, but also, for each modification, a new record is created in two tables: Systems.Core.ObjectChangesets Entity contains data about change-sets. A change-set is one modification request, sent to the server. One request can contain modifications (creates/updates/deletes) of multiple objects. Each change-set stores the following data: User - the user, who initiated the server request. Time (UTC) - server time in UTC, when the request was executed. Application - the name of the client application, which executed the request. Server Version - the version of the server by the time when the request was executed. Object Changes stores one row for each modified object. One change-set can contain data about multiple object changes. The following data is stored: Repository Name - the name of the object repository, containing the object. Entity Item Id - the Id of the tracked object. Change Type - the type of modification: C, U or D for Create/Update/Delete. Root Object Id - the Id of the Extensible Data Objects for the root object of the Aggregates . Level 3 - Track Object & Attribute Changes When this level is selected, all the data for Level 2 is still stored and maintained. But now, also data about each attribute (field) change is also stored. Note This tracking level can consume A LOT of disk space. Use it only when absolutely necessary. Also, make sure to setup some cleanup process (integrated or external). Attribute Changes stores the following data about each attribute change: Attribute Name - the name of the changed attribute New Value - the string representation (culture insensitive) of the new value Some attribute changes might not be \"sensed\" correctly by the system. Since the Track Changes system works at the application level, changes made by direct SQL statements will not be recorded. When a next update occurs, the system will record the changes to the attribute like it is being made by the next update. This behavior is by design. The most frequent effect of this behavior is that the Document No attribute (which is set by SQL statements and not by the application layer) is recorded as being changed by the 2nd modification of the document. Only the new values are stored (not the old values). This design was chosen for the following reasons: We do not store both old values AND new values to save space. If only the old (and not the new) values are stored, the track changes algorithm can save some space (initial object creation do not need to store values), but performance suffers. This was the initial implementation of the track changes system, but it was abandoned. The track changes process needed to synchronously read the previous database value before each update. This slowed down the actual database transactions and it was decided that the \"new values only\" approach would better fit the performance requirements. The storage of the new values can be performed asynchronously AFTER the actual database transaction has completed. In this way, the track changes system has very minor effect on the speed of the every-day OLTP transactions. One drawback of the asynchronous saving is that, upon server crash, the track changes data about the attribute changes might be lost. In this case, the Object Change will still be recorded, because it is recorded synchronously (as part of the transaction). Level 4 - Track Object, Attribute & Blob Changes Same as Level 3, but the values of BLOB attributes are also saved. This can severely affect the storage requirements and should be used only for small tables and as last resort measure. Configuring Track Changes The Track Changes functionality is activated through the Systems.Core.EntitySettings Entity table. Steps: Create a record in Entity Types, specifying the desired entity. In the Track Changes Level field, fill the desired tracking level. Save and close. The tracking will shortly start. For document entities is provided an opportunity for mass activation of the Track Changes system using the DocumentVersioningSystem registry key. For more information see the description key number 42 in the todo:(Config Options Reference) topic. Note If you try to configure a level lower than the default tracking levels, the option will be ignored. Default Tracking Levels Some entities are configured by default to track their changes. The default tracking level is system configured and cannot be lowered. However, the users can specify higher tracking levels. The following table contains the default system specified tracking levels. Entity Default Tracking Level Activated in version Entities 3 2019.1 Config 3 2019.1 Products 2 2019.1 Parties 4 2019.1 Companies 3 2019.1 Company Locations 3 2019.1 Persons 3 2019.1 Enterprise Companies 3 2019.1 Payment Types 2 2019.1 Payment Accounts 2 2019.1 POS Locations 3 2019.1 POS Terminals 2 2019.1 POS Operators 3 2019.1 POS Roles 3 2019.1 POS Sequences 2 2019.1 Users 3 2019.1 Groups 3 2019.1 User Groups 3 2019.1 Group Access Keys 3 2019.1 Document Types 4 2019.1 Printout Layouts 4 2019.1 Calculated Attributes 3 2019.1 User Business Rules 3 2019.1"
  },
  "advanced/documents/document-flow.html": {
    "href": "advanced/documents/document-flow.html",
    "title": "Document Flow | ERP.net Tech Docs",
    "keywords": "Document Flow"
  },
  "advanced/documents/document-fulfillment.html": {
    "href": "advanced/documents/document-fulfillment.html",
    "title": "Document Fulfillment | ERP.net Tech Docs",
    "keywords": "Document Fulfillment Description Fulfillment is related to the document generation. Fulfillment makes sure that all quantities and amounts from the parent document are transferred to the sub-document. Differences in quantities and amounts between the parent and the sub-document require fulfillment. Documents in ERP.net usually require complete fulfillment before their state can be set to Completed. Fulfillment documents A document is fulfilled with another document. For example: Shipment Order is fulfilled by creating a Shipment . Invoice Order is fulfilled by creating an Invoice . ...and so on. As can be seen in the example, different document entity types usually come (at least) in pairs - orders and execution pairs of entity types. Actually, more and more entity types come in triples - requisition, order and transaction; but that is a different discussion. Note Order documents naturally require fulfillment, which is recorded as execution documents. Discrepancies in quantities and amounts between the parent and the sub-document(s) Quantities and amounts in a sub-document may not always represent an exact execution of the parent document. Why there are differences between the parent and the sub-document? Differences can arise for many reasons: Partial execution. For example, we shipped goods partially. In this case, the Shipment does not completely fulfill the Shipment Order. Partial payment by customer. Adjustments to the parent document, because of processing errors. Adjustments to the parent document, by customer request. Adjustments to the sub-document. etc. All these cases require fulfillment before the document state can be set to Completed. Fulfillment tracking Fulfillment tracking is the process of calculating what remains to be fulfilled and how it is divided in the terms of detail lines. For example, a Sales Order from a customer requests shipment of 10 Oranges. We shipped 8 Oranges and 2 Tangerines. Did we fulfill the Sales Order? The system tracks the fulfillment of a document, using several tracking techniques: Natural matching Parent line Fulfillment table Natural matching Natural matching matches the parent and the sub-documents, based on natural attribute values. Note Natural attributes are attributes, representing real-world things. This is in contrast with artificial attributes, which are required by the inner workings of the software system. In the example above, natural matching will compare the values of: Product Product Variant Lot Serial Number So, let’s review the previous example in the light of natural matching. Sales Order: Line 1: Oranges, 10 kg Shipment: Line 1: Oranges, 8 kg Line 2: Tangerines, 2 kg Natural matching will not qualify the shipment of Tangerines as execution of the sale of Oranges, because it is a different Product. Even if the customer agrees to accept the Tangerines, we cannot represent this in the system. Another example. The customer might order specific lot of the product, but they are ready to accept another lot: Sales Order: 10 Oranges, lot 202 Shipment: 10 Oranges, lot 203 This shipment satisfies the customer in the real world. However, using natural tracking, this will be considered a severe difference. The system will propose reversal of the shipment of lot 203 and shipment again of lot 202. Obviously, this is problematic and might confuse the users. Even more problematic, and more real-world example if two or more lines of the Sales Order contain oranges. In this case, natural matching simply does not work well. The benefit of natural matching is that it does not require special (artificial) tracking attributes or tables. However, it does not work well for some real-world scenarios. Natural matching is used in document generations, created in the earlier stages of ERP.net, but is mostly abandoned in newer developments. Parent line Parent line is widely used algorithm in ERP.net for keeping track of the execution. The idea is simple: The sub-document keeps reference to the parent line, which is being executed. For example: Sales Order: Line 1: Oranges, 10 kg Line 2: Apples, 2 pcs Shipment: Line 1: Oranges, 8 kg, Parent Line = 1 Line 2: Tangerines, 2 kg, Parent Line = 1 Line 3: Pears, 2 pcs, Parent Line = 2 Here, we can see that, although we sent Tangerines, they replace the Oranges. And we sent exactly the missing quantity. And we sent Pears, instead of Apples. Note The measurement unit of the sub-document line should be the same as the parent line. Of course, all this has to be arranged with the customer. The important thing is that, once arranged with the customer, we have to represent in it in the system. Parent line system allows that. Fulfillment table As good as parent line algorithm is, it cannot be used in all places. There are cases, where it might simply be impossible or very hard to match all sub-document lines using only parent line. For example, in the WMS, suppose we have the following: Warehouse Requisition: Line 1: Despatch Oranges, 10 pcs Line 2: Despatch Apples, 2 pcs In the optimization phase, the WMS has created the following plan: Warehouse Order: Line 1: Pick Oranges, 30 pcs (because there are also other orders and all will be sorted out on the packing table) Line 2: Pick Apples, 2 pcs Line 3: Move everything to packing table 3. Obviously, we have a problem here establishing a direct relationship with the parent document. The solution is to use Fulfillment table. The fulfillment table is like a notebook, in which we record how much of the quantity has already been created for the sub-document. This allows the system to create complicated sub-documents, without tracking the direct relationship of the created lines with the parent lines. In this example, after creating the Warehouse Order, the fulfillment table will contain: Warehouse Requisition XXX, Execution of Line 1: Qty:10 Warehouse Requisition XXX, Execution of Line 2: Qty:2 The fulfillment table simply contains the executed quantities, without any regard of how they are executed. It does not contain any reference to the sub-document(s). The system tracks the execution, without specifically deciphering the sub-document(s) contents. The fulfillment table algorithm allows the application of complex algorithms for execution. These algorithms do not need to represent the parent document lines 1:1 with the sub-document lines and hence have the freedom to employ complex optimization techniques."
  },
  "advanced/documents/generation-procedures.html": {
    "href": "advanced/documents/generation-procedures.html",
    "title": "Generation Procedures Overview | ERP.net Tech Docs",
    "keywords": "Generation Procedures Overview Generation Procedures are automated procedures, which generate Documents from other documents. They are the basis for the Document Flow . Generation Procedures are the arrows in the document flow diagrams. Setup In order to start generating documents, the Generation Procedures need to be configured. The configuration is performed in the Document Type entity, in the Document Type Routes child entity. Each Document Type Route is a configuration for a single Generation Procedure. Generation Procedures Lifetime Stages The current topic describes the stages of the lifetime of a generation procedure: NEW - in development, cannot be used ACTIVE - the generation could be actively used by the users AGEING - triggers a warning, can be silenced. OBSOLETE – triggers a warning e or an error and has to be replaced by an active generation procedure. DEAD – does not work, throws an error or is permanently deleted. Details When creating a NEW generation procedure if it replaces a generation procedure that is currently in use, the old generation is marked as obsolete and it enters the lifetime stage AGEING. In those cases, the AGEING generation procedures, which later become OBSOLETE have to be replaced with the ACTIVE procedures that have been released, because they maintain the contemporary business logic, methods of computing and have a better and faster performance. The transition does not have to be made immediately after the release of the new version but it has to be performed before the generation procedure enters the stage DEAD i.e. before its Date of Suspension . For every Generation Procedure that is marked as an Obsolete is scheduled a Date of Suspension on which date the Generation Procedure will be discontinued and could no longer be used.** The date is added in the obsolete procedure's name e.g. \"To be deleted: 9.2021\". As a result of this date, are defined three periods in which the software will inform users accordingly: AGEING - From ([Date of Suspension] - 3 years) to (Date of Suspension] - 1 year) – a pop-up (balloon) message will be displayed informing the user that it is using an obsolete generation. These messages’ only purpose is to inform the users and they won’t interrupt/stop their operating with the system. The messages will be logged into the Information Messages navigator. The messages will stop popping up if for the particular line of the Document Type's Routes the filed \"Allow Obsolete Generation\" is check-marked. OBSOLETE - From ([Date of Suspension] - 1 year) to ([Date of Suspension]) If the filed \"Allow Obsolete Generation\" is NOT check-marked - an error in a modal window will pop up during the execution of the obsolete generation procedure. The error will inform the users that they are using an obsolete procedure and the generation of the sub-document will be interrupted . The error will stop popping up if for the particular line of the Document Type’s Routes the filed \"Allow Obsolete Generation\" is check-marked. If the filed \"Allow Obsolete Generation\" IS check-marked - a pop-up (balloon) message will be displayed informing the user that it is using an obsolete generation. These messages' only purpose is to inform the users and they won’t interrupt/stop their operating with the system. The messages will be logged into the Information Messages navigator. While using this generation, the popping up of this message could no longer be avoided . DEAD - From [Date of Suspension] onwards - generation ceases to operate and enters the the lifetime stage DEAD. An error that can not be avoided will be thrown. With the release of the new main version after the Date of Suspension, the obsolete generation procedure is to be deleted and it will no longer appear in the drop-down lists."
  },
  "advanced/documents/index.html": {
    "href": "advanced/documents/index.html",
    "title": "Documents | ERP.net Tech Docs",
    "keywords": "Documents"
  },
  "advanced/jobs.html": {
    "href": "advanced/jobs.html",
    "title": "Jobs | ERP.net Tech Docs",
    "keywords": "Jobs Jobs is a system in ERP.net, which automatically runs processes. The types of processes, which are run include document state changing, executing scheduled events or similar. The jobs are run in non-busy hours without requiring any user interaction. How to Create and Configure a Job In most cases, in order to create a job, you have to simply create a new record with the desired Job Type in the Job navigator. Most parameters of the jobs have a default value and can operate without additional adjustments. An example is the todo:(J30903 DocumentPrintImages - Deletе Old Document Print Images) jobs, which has only one parameter - \"Print Images Retention Months\" field Enterprise Company's definition, which has a default value of \"60 months\". However, there are jobs that are jobs which are performing more complicated processes and is not logical to be executed for all records in the database. They require configuring additional settings. Such example is !!! Document state change job !!!!. The parameters and therefore the required settings of each job are described in its documentation. How to Run a Job The jobs can be auto-started on a schedule or they can be run manually. Manual Job Starting Each job can be manually started through the Run Manually button available in the Job’s definition and the Jobs Navigator. When the job is started the system will display a Process Screen which will show the progress of the procedure. The Process Screen will also contain a Cancel button. The job will be running until all of the records are processed or until it is manually stopped. Note When cancelled manually the job may not stop immediately. The job will stop right after the currently processed record is finished. Note IMPORTANT: In Version 2020.1 manual starting of a job is not available. Automatic Job Starting Jobs can be started automatically by the jobs execution system following a predefined schedule. Note that currently, only an \"On Idle\" auto-start schedule is available. Generally, the \"On Idle\" auto-start means that the job will be automatically started in non-busy hours if there are available resources. A job is using the \"On Idle\" auto-start schedule when the \"Run On Idle\" option is activated in its definition. The jobs execution system will be started only if the following requirements are met: - The time of the day is between 22:00 and 03:00. - The current server sessions are less than 5. - The last time the job's procedure is completed is more than 12 hours from now. - The procedure is not currently working - There is no manually stated jobs that are currently running Then the conditions described above are met and then the jobs execution system will start a special long-running procedure called \"System Jobs\". The procedure can be monitored as every other long-running procedure in Procedures navigator in ERP.net or the Procedures tab in the Server Manager. The jobs execution system will create a list of pending jobs and will start executing them sequentially. The list is made on the base of the active jobs defined in the databases. Each job runs a maximum of 5 minutes and then it is cancelled by the job runner. Every job can run up to 30 minutes which make a total of 6 times X 5 minutes runs, then it breaks the loop of pending jobs. If the job is interrupted before it's work is finished it must be started again during the 30 minutes period. If there are more records that have to be processed after the 30 minutes have elapsed, the job will start again on the next day. Where is the log? Each job execution is logged in Information Messages. The log contains information about the starting time, ending time, the processed records and the errors that have occurred during the processing (if possible and if any). Example: Process: Job J30777 Finish Store Transactions * Message:* Succeeded: 259; Failed: 0 LOG: [10:00:10] Total: 259 [10:04:42] Succeeded: 259 [10:04:42] Failed: 0 The table columns and content are explained in Template Description Jobs"
  },
  "advanced/overview.html": {
    "href": "advanced/overview.html",
    "title": "Advanced Section | ERP.net Tech Docs",
    "keywords": "Advanced Section This section contains information for advanced concepts, systems and deep dive in the security. It is intended primarily for advanced ERP implementation consultants. Advanced Systems Documents - document-related concepts and services. Custom Attributes - user-defined data attributes. Calculated Attributes - user-defined calculations. Business Rules - user-defined and system business rules. Data Objects - data object extensibility systems. Advanced Concepts Master / Detail Attributes Object / Relational Mapping Aggregates"
  },
  "concepts/documents.html": {
    "href": "concepts/documents.html",
    "title": "Documents | ERP.net Tech Docs",
    "keywords": "Documents"
  },
  "concepts/multi-company.html": {
    "href": "concepts/multi-company.html",
    "title": "Multi-Company Support In ERP Instances | ERP.net Tech Docs",
    "keywords": "Multi-Company Support In ERP Instances ERP.net allows a single ERP instance (database) to contain multiple companies. The different own companies, stored in the database are called \"Enterprise Companies\". Many data objects (definitions, settings and documents) have an \"Enterprise Company\" attribute. When filled, it specifies that the data is specific to one of the enterprise companies. When the attribute is left blank, the data is valid for all enterprise companies. Some data objects have a required \"Enterprise Company\" attribute. In this case, the data is always specific to one enterprise company. For example, all documents have a required enterprise company attribute. For example, lets have the following Accounts in our chart of accounts: 60201 - Expenses, general 60209 - Other Expenses (specific to \"Company X\", one of the companies, managed in the database) This can be defined as follows: Account Enterprise Company 60201 60209 Company X In much the same way, the products and many other definitions can be defined to belong to only a single enterprise company or to all enterprise companies. Note There is no way to define a data object to belong to several enterprise companies. It is either one or all."
  },
  "concepts/multi-language.html": {
    "href": "concepts/multi-language.html",
    "title": "Multi-language support | ERP.net Tech Docs",
    "keywords": "Multi-language support Description Many string attributes in ERP.net support saving the data in multiple languages. These attributes are called Multi-language Strings. For example, the Product Name of a Product can be entered in many languages simultaneously. When visualizing the data, the correct language version of the string is displayed automatically by the system, depending on the current user language. Note For reports, the report designer can specify whether to use the current user language or always use a fixed language. For example, for a Portuguese invoice, one would require that the labels and data are always displayed in Portuguese. Entering data in multiple languages The client applications of ERP.net usually allow the following abilities regarding multi-language strings: Enter the string in many languages Transliterate a string from one language to another (or all) Translate a string from one language to another (or all) When entering translations for a multi-language string, the client application usually displays a table with cells for each language translation, similar to this: Language Value EN: Toothpaste DE: Zahnpasta Depending on the client application, translation can sometimes also be automated. Some client applications support using an online service, like Google Translate to automatically translate a string to other languages. Translation is better suited to Description and Notes attributes. Transliteration Transliteration is the process of translating one language version of a string to another, based on the sounding of the string. Transliteration works great for person and company names and addresses. It allows branch offices to work in their local language and reports can still be shown in the corporate language. For example, the Russian word \"Иван\" would be transliterated in English as \"Ivan\". Transliteration works in two ways - manual and automatic. Manual transliteration \"Manual\" transliteration is actually automatic, but is initiated manually while editing the different language versions of a multi-language string. While editing multi-language string, the client application usually provides a function button, which transliterates the current language version to other languages. Automatic transliteration Automatic transliteration occurs when the system needs to display some a multi-language string in some language, but that specific language translation is not saved in the database. For example, suppose one employee works in a branch office in Russia and enters \"Иван\" as a person first name. The database saves only the Russian language version. Then another employee at a UK location requests to see the first name of the same person. The system would automatically transliterate the string and display it as \"Ivan\". Note Transliteration works optimally between Latin and Cyrillic."
  },
  "concepts/overview.html": {
    "href": "concepts/overview.html",
    "title": "Business Logic Concepts | ERP.net Tech Docs",
    "keywords": "Business Logic Concepts This section contains concepts, applicable to all modules."
  },
  "concepts/parties-concepts.html": {
    "href": "concepts/parties-concepts.html",
    "title": "Parties Concepts | ERP.net Tech Docs",
    "keywords": "Parties Concepts Description Parties in ERP.net are one of the most widely used definition. Generally, a party is a participant in any business relations or transaction. Examples of parties include: Business customers Consumer customers Employees in our or external companies Contacts Dealers Company Locations Departments etc... Basic Party Types Parties do not exist by their own. They are always created as another object. Most parties are created as Person or Company. In object terms, it means that Person and Company inherit Party. The Party itself is called to be of type Person or Company. Note Parties cannot be directly created. They are always instantiated as some sub-type, like Person or Company. This diagram shows the relationship between Party, Person and Company: Party Attributes Inheritance The fact, that Person and Company inherit Party also means, that all attributes of Party are also attributes of Person and Company. For example, a Party has an \"Area\" attribute. So, all Person and Company objects would also have an \"Area\" attribute. The opposite is not true. E.g. Person and Company objects have attributes, which are specific to them and are not general Party attributes. For example: Party has \"Parent Party\" and \"Area\" attributes, which are inherited by Company and Person. But persons \"First Name\" and \"Last Name\" are specific only to persons. Neither companies, nor generally parties have \"First Name\". Relationships with Other Entity Types Although parties do not exist on their own, they can participate in relationships. For example, a Customer or Supplier Contract are objects, which can have a relationship with a Party. Relationship with Party means, that an actual Customer Contract object would relate to either a Person or a Company. This is shown on the following diagram: Note Customer (Contract), Supplier (Contract) and Dealership (Contract) are actually called simply Customer, Supplier and Dealer in ERP.net. Note The diagram shows, that one Party object can participate in relationships with many Customer Contract objects. In fact however, the current implementation of ERP.net allows many Customer Contracts per party, but only one for each Enterprise Company. This means, that one party can have only a single Customer Contract with any given Enterprise Company. To clarify the above diagrams, lets provide an example. Suppose we have: A customer, which is a company, called \"ABC\" A supplier, which is a person, named \"John\" This will be represented with the following objects: Party (ABC) Company (ABC), which inherits Party (ABC) Customer (ABC), which points to Party (ABC) Party (John) Person (John), which inherits from Party (John) Supplier (John), which points to Party (John) If we query the system with a query, that can be stated as \"Show me ALL parties\", the result will be: Party (ABC) Party (John) If we query with \"Show me ALL customers\", the result will be: Customer (ABC) Party Hierachy The basic party types are Person and Company, but there are some more party types. Among them are Department and Division. By using all the party types, the data about parties can be nicely organized. Particularly handy is the ability to hierarchically structure the parties. Having the departments and divisions as parties allows flexible representation of the different corporate hierarchies. For example, lets have Corporation A structured in the following way: Corporation A Division 1 Sales Department Marketing Department Division 2 Sales Department Marketing Department Global Marketing Department Global Accounting Department The flexible party hierarchy also allows structuring even different companies in a corporation: Corporation B Company A Consumer Electronics Division Sales Department Business Consulting Division Sales Department Accounting Department Company B Sales Department Accounting Department Corporate Financials Department Note Because our own enterprise companies (see todo: Multi-company) are also companies (which are parties), party hierarchy can be used for organizing both our own corporate structure and the corporate structure of our business partners. Party Relationships Party Relationships organize the formal and informal relationships between different parties. Using party relationships, information, such as the following can be easily represented: Peter works for Company A Peter is a friend of George Steven is married to Susan since 8/3/2011 John worked for Company B from 1/1/2010 till 3/5/2015 The above information is represented in a table in the following way: From Party Relationship Type To Party From Date To Date Notes Peter works for Company A Peter is friend with George Steven is husband of Susan 8/3/2011 John works for Company B 1/1/2010 3/5/2015 Obviously, From Date and To Date represent the dates when the relationship was established and terminated."
  },
  "includes/erpnet.html": {
    "href": "includes/erpnet.html",
    "title": "| ERP.net Tech Docs",
    "keywords": "ERP.net"
  },
  "includes/name.html": {
    "href": "includes/name.html",
    "title": "| ERP.net Tech Docs",
    "keywords": "ERP.net"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to the ERP.net Technical Documentation | ERP.net Tech Docs",
    "keywords": "Welcome to the ERP.net Technical Documentation The Technical Documentation documents the business logic of ERP.net. It is targeted towards implementation consultants and power users. Learn more Concepts - general concepts, which apply to all modules. Functionality - documentation of the business functions. Advanced - documentation of advanced systems. Other documentations Domain Model - reference information about the entities, business rules, generations, etc. Developer Documentation - information for developers."
  },
  "modules/applications/overview.html": {
    "href": "modules/applications/overview.html",
    "title": "ERP.net Integrated Applications | ERP.net Tech Docs",
    "keywords": "ERP.net Integrated Applications ERP.net contains various built-in applications."
  },
  "modules/community/overview.html": {
    "href": "modules/community/overview.html",
    "title": "ERP.net Community Management | ERP.net Tech Docs",
    "keywords": "ERP.net Community Management Community Management deals with the management of the external community of a company. This includes all sites, forums, ticketing and support systems involving external users. It also includes the social interaction between internal and external users. Learn More Notifications Social Interactions Digital Marketplace"
  },
  "modules/crm/contacts/index.html": {
    "href": "modules/crm/contacts/index.html",
    "title": "CRM Contacts and tasks | ERP.net Tech Docs",
    "keywords": "CRM Contacts and tasks The Contacts and tasks module is used to manage parties and calendars. When used as part of the sales process, they can initiate the sales process flow: Activity → Opportunity → Offer → Sales Order → Invoice Order → Invoice Activities The activities are like calendar appointments on steroids. Activities Have related party reference, allowing to sort activities by party. Allow attachments of files. Support questionaries (through the use of user defined data attributes) And much more. Activities can be used to automatically create sales opportunities in the Presales module."
  },
  "modules/crm/index.html": {
    "href": "modules/crm/index.html",
    "title": "Customer Relationship Management (CRM) Subsystem | ERP.net Tech Docs",
    "keywords": "Customer Relationship Management (CRM) Subsystem The CRM subsystem in ERP.net is used to manage customer relationships and other front-office activities of a company. General concepts and processes The main process in the CRM subsystem is: Activity → Opportunity → Offer → Sales Order → Invoice Order → Invoice Activity - generic activity, related to a party. Includes support for calendar appointments, reminders, questionnaires, etc. Can be used to represent appointments, scheduled meetings, visits, contracts and just about any generic document. Opportunity - sales opportunity, with expected revenue and probability. It does not have detail line items. Offer - sales offer (quote), with line items. It allows optional selection of some of the items, which the customer has accepted. Sales Order - sales order from the customer. The main sales document. All documents before it are optional. The sales order initiates the logistics and financial processes, related to the sale. Invoice Order - an order to issue an invoice. This is an internal document, which is used to track the invoices, which we have to issue. Invoice - legal and financial document, finalizing the sales process. Note The above diagram shows only the CRM part of the whole process. The full process involves many different modules of the ERP system. Modules There are many modules in the CRM subsystem. They are used to manage the different aspects of the CRM processes: Contacts and tasks - calendar appointments, party definitions, etc. Pre-sales - Opportunities management, quotation, etc. Sales - Sales Orders, customers, etc. Invoicing - Invoicing process management, invoices and BI. POS - Manage point-of-sale activities in physical stores. Marketing - Marketing campaigns, activities, distribution channels, etc. Distribution - field sales, sales person targets management, etc. Pricing - price lists management. Product Configuration - create products based on specs for job shops (made-to-order and engineer-to-order environments). Products - manage products master data - products and product measurements, codes, variants, channel, pictures, groups, etc."
  },
  "modules/crm/presales/index.html": {
    "href": "modules/crm/presales/index.html",
    "title": "CRM Presales | ERP.net Tech Docs",
    "keywords": "CRM Presales The presales module is used to manage the presales process. Deals (Opportunities) Activity → Opportunity → Offer → Sales Order → Invoice Order → Invoice The deals in the Crm.Presales.Deals Entity are used to manage sales opportunities to new or existing customers. Note Deal is synonymous to opportunity. The deals: Have appointed sales representative, managing the deal. Do not have line items. They are used to manage deals, which are still not clear enough to detail at this level. Have a percentage probability of success . The percentage is set by the sales representative, based on their own judgement. Have expected sales revenue . Have expected close date . Based on the data above, the team leaders and sales managers have instant and clear visibility over the sales processes. The deals are usually initially created based on General.Contacts.Activities Entity . However, once a deal is created, it can be used to create many more sub-activities to manage related tasks. Offers (quotes) Activity → Opportunity → Offer → Sales Order → Invoice Order → Invoice The deals documents can be easily transformed into Offers (quotes), which contain detailed line items. Entries in the Crm.Presales.Offers Entity allows the customer to be presented with optional items. After approving some or all of the optional items, the offer can generate Crm.Sales.SalesOrders Entity in the Sales module."
  },
  "modules/crm/sales/index.html": {
    "href": "modules/crm/sales/index.html",
    "title": "CRM Sales Module | ERP.net Tech Docs",
    "keywords": "CRM Sales Module Activity → Opportunity → Offer → Sales Order → Invoice Order → Invoice The sales module is used to manage the preparing and issuing of Sales Orders and the related master data."
  },
  "modules/financials/Fixed Assets/Depreciation Methods/DeprecationFunctions.html": {
    "href": "modules/financials/Fixed Assets/Depreciation Methods/DeprecationFunctions.html",
    "title": "| ERP.net Tech Docs",
    "keywords": ""
  },
  "modules/financials/Fixed Assets/Depreciation Methods/overview.html": {
    "href": "modules/financials/Fixed Assets/Depreciation Methods/overview.html",
    "title": "Deprecation Methods | ERP.net Tech Docs",
    "keywords": "Deprecation Methods"
  },
  "modules/financials/Fixed Assets/Depreciation Methods/PeriodDeterminationMetods.html": {
    "href": "modules/financials/Fixed Assets/Depreciation Methods/PeriodDeterminationMetods.html",
    "title": "Period Determination Methods | ERP.net Tech Docs",
    "keywords": "Period Determination Methods From next month to last month From current month to last but one month By days Method of calculation First, the quota for each month is calculated: Month quota = Depreciable amount / Int(Month(Depreciation End Date - Depreciation Start Date -1)) For the first month: First month Depreciation = Month quota * ((Number of Days in First month - Depreciation Start Date)/Number of Days in First month) For every next month but last one: Depreciation = Month quota For the last month: Depreciation = Mont quota - First month Depreciation Example: Asset with Useful life = 6 months and Depreciable amount = 120 Depreciation Plan = 14.01 - 14.07 Mont quota = 120 / 6 months = 20 First month Depreciation = 20 * ((31-14)/31) = 10.97 For 2,3,4,5 and 6th month Depreciation = 20 Last month Depreciation = 20 - 10.97 = 9.03"
  },
  "modules/financials/Fixed Assets/overview.html": {
    "href": "modules/financials/Fixed Assets/overview.html",
    "title": "Fixed Assets | ERP.net Tech Docs",
    "keywords": "Fixed Assets Depreciation Methods"
  },
  "modules/financials/overview.html": {
    "href": "modules/financials/overview.html",
    "title": "ERP.net Financials | ERP.net Tech Docs",
    "keywords": "ERP.net Financials Accounting Cost Accounting Fixed Assets Intrastat Payments VAT"
  },
  "modules/logistics/overview.html": {
    "href": "modules/logistics/overview.html",
    "title": "ERP.net Logistics | ERP.net Tech Docs",
    "keywords": "ERP.net Logistics"
  },
  "modules/logistics/wms/how-it-works/zone-policies.html": {
    "href": "modules/logistics/wms/how-it-works/zone-policies.html",
    "title": "Zone Policies | ERP.net Tech Docs",
    "keywords": "Zone Policies"
  },
  "modules/logistics/wms/how-it-works/zones-and-locations.html": {
    "href": "modules/logistics/wms/how-it-works/zones-and-locations.html",
    "title": "Warehouse Zones and Locations | ERP.net Tech Docs",
    "keywords": "Warehouse Zones and Locations Warehouse Zones are used to organize the different storage areas of the warehouse. Zone Hierarchy The zones are organized in a hierarchy, where each zone can have sub-zones, which can have its own sub-zones and so on. For example: Picking Aisle P1 Rack P1.1 Shelf P1.1.1 Shelf P1.1.2 Shelf P1.1.3 Aisle P2 Refrigeration Aisle R1 Rack R1.1 Aisle R2 Carts Cart C1 Bulk Rack B1 Rack B2 Primary and sub-zones In the above example, Picking, Refrigeration, Carts and Bulk are primary zones . Aisle M1, Rack M1.1, etc. are called sub-zones . The primary zones have no parent zone. Sub-zones always have a parent zone. Locations The warehouse locations (sometimes called bins) are used for the actual storage of the goods. They are the leafs in the hierarchy and are structured under the warehouse zones. For example: Zone \"Shelf P1.1.3\" can contain 3 locations: P1.1.3-A P1.1.3-B P1.1.3-C"
  },
  "modules/logistics/wms/overview.html": {
    "href": "modules/logistics/wms/overview.html",
    "title": "Warehouse Management | ERP.net Tech Docs",
    "keywords": "Warehouse Management"
  },
  "modules/overview.html": {
    "href": "modules/overview.html",
    "title": "ERP.net Modules | ERP.net Tech Docs",
    "keywords": "ERP.net Modules"
  },
  "modules/production/overview.html": {
    "href": "modules/production/overview.html",
    "title": "ERP.net Production | ERP.net Tech Docs",
    "keywords": "ERP.net Production"
  },
  "modules/projects/overview.html": {
    "href": "modules/projects/overview.html",
    "title": "ERP.net Project Management | ERP.net Tech Docs",
    "keywords": "ERP.net Project Management"
  },
  "README.html": {
    "href": "README.html",
    "title": "Welcome to the ERP.net Technical Documentation | ERP.net Tech Docs",
    "keywords": "Welcome to the ERP.net Technical Documentation The documentation uses DocFX to build."
  },
  "reference/config-options-reference.html": {
    "href": "reference/config-options-reference.html",
    "title": "Config Options Reference | ERP.net Tech Docs",
    "keywords": "Config Options Reference The current article contains a list of configuration keys and their values: Key - AllowFirmPlannedParentForReleasedChild a.Action: When the key has value and this value is \"1\" the following is allows: released subdocuments of FirmPlanned document are allowed. b.The user sets it manually. Key - CheckForNonVoidedReferencingDocumentsDisabled a.Action: When the key has value and this value is \"1\", verification for references between the documents is not performed when a document is made void. In all other cases, the verification is performed. b.The user sets it manually. Key - CheckForOverexecutionDisabled a.Action: When the key has value and this value is \"1\", verification for over execution of the parent order documents is not performed. In all other cases, the verification is performed. b.The user sets it manually. Key - CheckForOverinvoicedQuantityInSalesOrderLinesDisabled a.Action: When the key has value and this value is \"1\", verification for invoicing greater quantity than the sold quantity is not performed. In all other cases, the verification is performed. b.The user sets it manually. Key - CheckForTransactionMovementTypeDifferentThanParentStoreOrderMovementTypeDisabled a.Action: When the key has value and this value is \"1\", verification that the movement type of the store transaction is the same as the movement type(s) of the parent store order(s) is not performed. In all other cases, the verification is performed. b.The user sets it manually. Key - Default language a.Action: Defines the default language of multi-language fields. For example: en - English, bg - Bulgarian. b.The user sets it manually. Key - Default_Enterprise_Company_Location_Id/XXX a.Action: Defines the default company location. XXX is the id of the enterprise company. The value is the ID of the default company location. b.Set automatically by the system of the user. Key - Documents/OnlySaveNewVersionsToHistory a. This key is used for compatibility with older versions of the software. The old method of saving a document in the document history is to save the previous version before the current version is saved. The new method is to save the current version. b.Action: When the key has value and this value is \"1\", the new method is applied. In all other cases, the old method is applied. c.The user sets it manually. Key - DontCheckForNegativeUnitPrice a.Action: When the key has value and this value is \"1\", verification for negative values in the Unit Price field is not performed. In all other cases, the verification is performed. b.The user sets it manually. Key - Inv/CheckForNegativeAvailability a.Action: When the key has value \"1\", verification for negative stock balance is performed. The verification checks if the stock balance after the current operation would not become negative and also if the document date is not today's date, the validation checks for not negative stock balance for the dates in the Transaction timestamps in the store transaction rows. If the key has an empty value (null) or its value is different than \"1\" the described validations are not performed. b.The user sets it manually. Key - InvoiceFiscalPrintChangeToState a.Action: This key specifies the document state to which an invoice is switched to after the receipt is printed. The key value is the numeric value of the document states (0 = New, 10 = Planned, 20 = FirmPlanned, 30 = Released, 40 = Completed). In all other cases, the invoice is switched to Released state. b.The user sets it manually. Key - InvoiceFiscalPrintUseDistributedAmountsForUnitPrice a.Action: When the key has value and this value is \"1\", the unit price which is sent to the fiscal printer is calculated through the distributed amounts, which are added to the products. In all other cases, the unit price is calculated as follows: the unit price in the document line with VAT included and discounts in the row. b.The user sets it manually. Key - Last_Used_Enterprise_Company_Id a.Action: Defines the last used by the user enterprise company. The value is the id of the enterprise company. b.Set automatically by the system of the user. Key - Last_Used_Enterprise_Company_Location_Id/XXX a.Defines the last used by the user enterprise company location. The value is the id of the enterprise company location. b.Set automatically by the system of the user. Кеу - SalesOrderFiscalPrintChangeToState a.Action: This key specifies the document state to which a Sales Order is switched to after the receipt is printed. The key value is the numeric value of the document states (0 = New, 10 = Planned, 20 = FirmPlanned, 30 = Released, 40 = Completed). In all other cases, the Sales Order is switched to Released state. b.The user sets it manually. Key - SalesOrderFiscalPrintUseDistributedAmountsForUnitPrice a.Action: When the key has value and this value is \"1\", the unit price which is sent to the fiscal printer is calculated through the distributed amounts, which are added to the products. In all other cases, the unit price is calculated as follows: the unit price in the sales order line with VAT included and discounts in the row. b.The user sets it manually. Key - SalesOrdersOverduePaymentOrdersCheckDisabled a.Action: When the key has value and this value is \"1\", on Sales Order document release overdue Payment Orders check is not performed. In all other cases, such check is performed. b.The user sets it manually. Key - SimpleFilterLayout a.Action: When the value of the key is \"1\", then the \"Use simple layout for filter panels\" option is check-marked and the visualization of the navigator filter panels for the specified user is in the format \"Field OR Value\". If the value of the key is \"0\", then the \"Use simple layout for filter panels\" option is not check-marked and the visualization of the navigator filter panels for the specified user is in the format \"Field: Value\". b.The user set it manually through File tab → Settings → \"Use simple layout for filter panels\". But if the key is not configured for the particular user, then the system will use the default value. The default value depends on the system version: until Version 2019.1 - the default value is \"0\"; in Version 2019.1 and later - the default value is \"1\" Key - CheckInvoiceLinesQuantityUnitDisabled a.Action: When the key has value and this value is \"1\", when an invoice is released the validation if the measurement unit of the invoice line and the invoiced sales order line are the same is not performed. b.The user sets it manually. Key - AllowBaseAmountsFromThirdDocument a.Action: The action of the current key impacts how the additional amounts are distributed. If amount S and B are distributed on document D1 and amount S depends on amount B. When the current key has value and this value is \"1\" the calculation of the additional amounts is performed as follows: - Each B amount which is distributed on the rows of document D1 participate in the calculation of the base amount of amount S no matter which document defines the B amount. When the current key has a value different from \"1\" or the key does not exist: - Amount B participate in the base amount of S amount only if the B amount is defined by the same document as S amount in the referent document of S amount. The preferred document of S amount is the document on which rows S amount is distributed. b.The user sets it manually. Key - CreateReconciliationsByTimestamp a.Action: When this key has value and this value is \"1\", the function \"Add the available products\" in the Reconciliation form and the manually added new rows would use the date of the transaction timestamp in the row, and not the date of the document, to calculate the stocks availability. The stocks availability may be looked at by one of the following methods: - Stock movements in the store by the document date; - Stock movements in the store by the date of the transaction timestamp. b.Usually, the \"i\" method is used to define stock availability (i.e. the quantities at a specified date), and method \"ii\" is used to define the stocks cost (at a specified time) c.The user sets it manually. Key - CostCorrectionsCalculateCostTransferDocumentsCostByDocumentCurrencyReevaluation a.Action: the current key regulates the recalculation of the products costs by the documents which transfer costs (Store Transfers, Work Orders, Sales Returns). When the key has value and this value is \"1\", the recalculation is performed as follows: all costs of the issue and receipt store documents are converted to the currency of the Master document (the document which transfers the cost). If not, usually the base currency of the issue and receipt store documents is used for the recalculation. b.The user sets it manually. Key - ActiveLanguages a.Action: Displays the languages which are active in the current database. If there is no value, all languages are active (currently 15 languages are supported). b.Automatically by the form for editing the languages list, which opens from the Edit Languages menu. Key - CheckForTransactionInvalidLotDisabled a.Action: When this key has value and this value is \"1\", the validation for an invalid lot in the store transaction on document release is not performed. An invalid lot is a lot which is defined for a product, different than the product in the store transaction line. In all other cases, the validation is performed. b.The user sets it manually Key - VisualPasteDisabled - suspended a.Action: When this key has value and this value is \"1\", when rows are pasted in a grid they are pasted all at the same time (as it was in version 2.3). In all other cases when rows are pasted in a grid, they are pasted visually - row by row and field by field. Every value is searched between allowed values in drop-down lists. b.The user sets it manually Note This key is suspended in version 2019.1. In its place there are two new functions in forms and navigators: - Paste Rows - Paste Rows Without On-Screen Validation Key - RealTimeEventsDisabled a.When this key has value and this value is \"1\", EnterpriseOne would not proceed connection with the server which sends real-time events. b.The user sets it manually Key - RealTimeEventsTimeoutSeconds a.Action: Sets the timeout period for waiting for a server response for real-time events, in seconds. If the server does not raise an event in the specified time, the client sends a new request. The value is a number between 5 and 240. If null, the timeout time is 240 seconds (4 minutes). b.The user sets it manually Key - Require strong passwords a.Action: When this key has value and this value is \"1\", strong password validation is performed. Strong password requirements are as follows: the password is at least 8 characters; the password contains characters from 3 out of 4 groups: small letters, capital letters, Nonalphanumeric characters, numbers; the password does not contain the username; the password does not contain \"123\", \"1234\", \"12345\", \"123456\". b.The user sets it manually Key - DisableAccountKeyPropertyDotCheck a.Action: When this key has value and this value is \"1\", when an item key is formed in the accounting voucher rows the validation for no '.' (dot) in the values of the key custom, properties are not performed. For the normal working process of the system, it is important no dots to be part of the values of the key custom properties because the dot is a system character used for item key compilation. b.The user sets it manually Key - AllowPlannedDocumentStateInClient a.Action: When this key has value and this value is \"1\", the document state menu would contain Planned state. In all other cases, the user would not be able to select the Planned state on any document. b.The user sets it manually Key - DisableProductCopyPropertiesFromOtherProduct a.Action: When this key has value and this value is \"1\", the Product Configurator feature for copying the values to custom properties from the custom property which values are Products is deactivated. b.The user sets it manually Key - PaymentTransactionFiscalPrintChangeToState a.This key specifies the document state to which a Payment Transaction is switched to after the receipt is printed. The key value is the numeric value of the document states (0 = New, 10 = Planned, 20 = FirmPlanned, 30 = Released, 40 = Completed). In all other cases, the Payment Transaction is switched to Released state. b.The user sets it manually. Key - Crm/Sales/SalesOrders/ShowFillLotsInLines a.Action: When this key has value and this value is \"1\", the sales order function \"Fill lots in lines\" is activated. b.The user sets it manually. Key - General/Contacts/LoadCalendarForLimitedTime a.Action: When this key has value and this value is \"1\", the calendar in the Activities navigator loads data only for the displayed period (+/- 1 month) when the user scrolls through the calendar. b.The user sets it manually. Key - DisableDocumentRecalculationOnIdle a.Action: When this key has value and this value is \"1\", in the document forms the recalculation of additional amounts, bonus programs, payment plans and etc in real-time would not be performed (Application.Idle event). In such cases, the document would be recalculated only before the COMMIT event and not in real-time while the user enters the b.data in the document form. The method referred by the current key is \"Document.Recalculate\" which performs different actions in the different entities. c.The user sets it manually. Key - DisableParentDocumentReset a.Action: When this key has value and this value is \"1\", on document state change the parent document state is not reset. b.The user sets it manually. Key - RevokedBusinessRules a.Action: When this key has value, the validation and the action of the business rules, which codes are specified as a key value, is not performed. The codes of the business rules must be listed comma-separated (for example 27407, 26881 ..). Since version 2018.2, Business Rule's codes must be set with its full code including \"R\" (eg R27408, R26881 ...). If the key value is changed, the client application requires a restart. b.The user sets it manually. Key - DisableQueryingForSaveOnClose a.Action: When this key has value and this value is \"1\", on closing of a form which is not saved, if there is a change in any table of the form, no information message for saving or undo of the changes appears. b.The user sets it manually. Key - UseLegacyLoadForLotsIssue a.Action: When this key has value and this value is \"1\", for the calculation of the quantity Available to Promise by Lots is used the method that was developed before Version 2018.2. In all other cases, is used the current for Version 2018.2 method which is advisable and has a better performance. b.The user sets it manually. Key - ReservedLicenses (not implemented/ cancelled) Key - EnableCreateGroupForUser a.Action: When this key has value and this value is \"1\" or \"true\" (case-insensitive), when creating a new User into the database a new Group with the User’s name will be created automatically as well. b.The user sets it manually. c.The key is introduced in version: - 2019.1 (in implementation) Note Before version 2019.1 a new User Group was created automatically every time when a new user is created and this behaviour could not be disabled. Since version 2019.1 the behaviour is disabled by default and could be activated manually using the current registry key. Key - DocumentVersioningSystem a.Action: When the value of this key is \"VH\" the system will use the \"old\" document versioning system. If the key's value is \"TC\" the system will not create records using the \"old\" document versioning system and will instead use the Track Changes system. The minimum level that is going to be tracked when the \"TC\" option is activated is \"Track Changes Level 3\". If for the particular document entity is chosen a specific level, then this level will be applied only if it is a higher level than level 3. ( For more information about the track changes system and its levels, please see topic Track Changes Note Please note that the current key affects only entities which are a successor of document entity (such as Sales Orders, Store Orders ...) and NOT entities such as Product Groups, Bonus Programs.. b.The user sets it manually, but if the key is not configured for the particular database or its value is different from \"VH\" or \"TC\", then the system will use the default value. The default value depends on the system version: Version 2019.1 - the default value is \"VH\"; Version 2020.1 and later - the default value is \"TC\"; c.The key is introduced in version: - 2019.1 Key - Crm/Pos/PrintGroupedSalesLinesType a.Action: When the value of this key is \"ShortName\" then items in the fiscal receipt are grouped by \"ShortName\" field in the product. When the value of this key is \"ProductGroup\" then items in the fiscal receipt are grouped by the product group of the product. When the value of this key is different or the key is missing then items in the fiscal receipt are not grouped. b.The key is introduced in version: - 2019.1 Key - UseStartScreen a.Action: When the value of this key is: \"1\" - the form that is going to be opened when the program is started by the specified user will be the Start Screen. \"2\" - the starting form will be the Main Menu. \"0\", different from \"1\" and \"2\" or the key is not configured for the particular database and user - the system will use the default value. The default value for version 2020.1 is Main Menu. Warning: The current key's value will be taken into account only if there is no global policy specifying the use of the start screen for the whole database using the key \"UseStartScreenPolicy\" b.The user sets it manually. c. The key is introduced in version: - 2020.1 Key - UseStartScreenPolicy a.Action: When the value of this key is: \"1\" - the form that is going to be opened when the program is started will be the Start Screen. This applies to all users into the database, regardless of the \"UseStartScreen\" option. \"2\" - the starting form will be the Main Menu. This applies to all users into the database, regardless of the \"UseStartScreen\" option/key. \"0\", different from \"1\" and \"2\" or the key is not configured for the particular database - there is no global policy. Each user decides whether they want to use the start screen using \"UseStartScreen\" option/key. b.The user sets it manually. c.The key is introduced in version: - 2020.1 Key UseDefaultMailClient a.Action: When this key has a value for the particular User and this value is \"1\", then when creating an email the system will start the default Windows mail client. This will apply even if there is a mailbox defined for the user. b. The user sets it manually (directly in the registry or using the option available in tab File => Settings => Use default Windows mail client). c.The key is introduced in version: - 2019.1"
  },
  "reference/country-specific-functionality.html": {
    "href": "reference/country-specific-functionality.html",
    "title": "Country Specific Functionality | ERP.net Tech Docs",
    "keywords": "Country Specific Functionality ERP.net contains some country, region or other specific functionalities that are needed in order to meet legal or regulatory requirements. Such functionality is the creation of VAT return and the VAT export files for submission to the National Revenue Agency (Bulgaria), for example. Party Applicable Legislations In Parties, there is a child table with the Applicable Legislations for the particular Party. The table contains information about the countries, states, unions or other entities whose regulations apply to the Party. The records in this table are used when determining if a business rule must be activated when, for example, it incorporates rules that are specific for the particular country's laws. Bulgaria (BG) List of the System Deal Types and Their Correlation with the Sales and Purchases Ledger's Columns The VAT declaration in ERP.net is a document that serves as a basis for the creation of a VAT return and the VAT export files for submission to the National Revenue Agency. The information in the VAT declaration is based on the VAT Entries created in the system for the particular period. The Entries amounts (Amount Base and VAT Amount Base) are entered in different columns of the Sales and Purchases Ledger of the VAT declaration depending on their Deal Type (for more information about Entries' deal type and amount calculation, see todo: (Defining VAT And Base For VAT Entries)). This article contains information about the correlation between the system Deal Types and the columns of the Sales and Purchases Ledgers according to which the Entries amounts are distributed to those columns. Sales Ledger Column Column Name (EN) Column Name (BG) Deal Type (BG) Additional Conditions Column9_Data Total Base Amount Общ размер на данъчните основи ВОД - Column9_Data Total Base Amount Общ размер на данъчните основи Доставка по чл. 163а от ЗДДС част I (отпадъци) на Приложение 2 - Column9_Data Total Base Amount Общ размер на данъчните основи Доставка по чл. 163а от ЗДДС част II (земеделска продукция) на Приложение 2 - Column9_Data Total Base Amount Общ размер на данъчните основи Доставка по чл.140,146,173(1) или 173(4) - Column9_Data Total Base Amount Общ размер на данъчните основи Износ по глава трета от ЗДДС - Column9_Data Total Base Amount Общ размер на данъчните основи Начисляване на ДДС в др. случаи Apply_Date >= '20160201' Column9_Data Total Base Amount Общ размер на данъчните основи Облагаеми доставки 7/9% - Column9_Data Total Base Amount Общ размер на данъчните основи Облагаеми сделки - Column9_Data Total Base Amount Общ размер на данъчните основи Самоначисляване на ДДС по чл.82,ал.2-5 - Column9_Data Total Base Amount Общ размер на данъчните основи Самоначисляване на ДДС при ВОП - Column10_Data Total VAT Amount Всичко начислен ДДС Начислен ДДС при ползване за лични нужди Apply_Date >= '20160201' Column10_Data Total VAT Amount Всичко начислен ДДС Начисляване на ДДС в др. случаи - Column10_Data Total VAT Amount Всичко начислен ДДС Облагаеми доставки 7/9% - Column10_Data Total VAT Amount Всичко начислен ДДС Облагаеми сделки - Column10_Data Total VAT Amount Всичко начислен ДДС Самоначисляване на ДДС по чл.82,ал.2-5 - Column10_Data Total VAT Amount Всичко начислен ДДС Самоначисляване на ДДС при ВОП - Column11_Data Base Amount 20 Percent Данъчна основа 20% Доставка по чл. 163а от ЗДДС част I (отпадъци) на Приложение 2 - Column11_Data Base Amount 20 Percent Данъчна основа 20% Доставка по чл. 163а от ЗДДС част II (земеделска продукция) на Приложение 2 - Column11_Data Base Amount 20 Percent Данъчна основа 20% Начисляване на ДДС в др. случаи Apply_Date >= '20160201' Column11_Data Base Amount 20 Percent Данъчна основа 20% Облагаеми сделки - Column12_Data VAT Amount 20 Percent Начислен ДДС 20% Начисляване на ДДС в др. случаи Apply_Date >= '20160201' Column12_Data VAT Amount 20 Percent Начислен ДДС 20% Облагаеми сделки - Column13_Data Base Amount EUPurchase Данъчна основа на ВОП Самоначисляване на ДДС при ВОП - Column14_Data Base Amount VATL Article 82 Данъчна основа на доставките по чл.82, ал. 2 - 5 Самоначисляване на ДДС по чл.82,ал.2-5 - Column15_Data VAT Amount EUPurchase VATL Article 82 Начислен ДДС за ВОП и доставките по чл.82, ал. 2 - 5 Самоначисляване на ДДС по чл.82,ал.2-5 - Column15_Data VAT Amount EUPurchase VATL Article 83 Начислен ДДС за ВОП и доставките по чл.82, ал. 2 - 5 Самоначисляване на ДДС при ВОП - Column16_Data VAT amout in case of personal use Начислен данък при ползване за лични нужди Начислен ДДС при ползване за лични нужди Apply_Date >= '20160201' Column16_Data VAT amout in case of personal use Начислен данък при ползване за лични нужди Начисляване на ДДС в др. случаи Apply_Date < '20160201' Column17_Data Base Amount 9 % Данъчна основа 9 % Облагаеми доставки 7/9% - Column18_Data VAT Amount 9 % Начислен ДДС 9 % Облагаеми доставки 7/9% - Column19_Data Base Amount 0 Percent VATL Chapter 3 Данъчна основа 0 % по глава трета от ЗДДС Износ по глава трета от ЗДДС - Column20_Data Base Amount 0 Percent EUSale Данъчна основа 0 % на ВОД ВОД - Column21_Data Base Amount 0 Percent VATL Articles 140 146 173 Данъчна основа 0 % по чл. 140, чл. 146 ал. 1 и чл. 173, ал. 1 и 4 Доставка по чл.140,146,173(1) или 173(4) - Column22_Data Base Amount Service Sales VATL Article 21 Данъчна основа на услугите по чл. 21, ал. 2 Доставка по чл.21(2) в друга държава членка - Column23_Data Base Amount VATL Article 69 Данъчна основа почл. 69, ал. 2 Доставка по чл.69(2) и дистанц. продажба към др.членка - Column24_Data Base Amount Exempted Sales And EUPurchases Данъчна основа на освободени доставки и ВОП Освб. дост. по чл. 21(2), в рамките на ЕС - Column24_Data Base Amount Exempted Sales And EUPurchases Данъчна основа на освободени доставки и ВОП Освободени ВОД, извън територията на България - Column24_Data Base Amount Exempted Sales And EUPurchases Данъчна основа на освободени доставки и ВОП Освободени доставки и освободени ВОП - Column25_Data Base Amount Third Party Operation Данъчна основа от посредник в тристранна операция Доставки като посредник при тристранна операция - Column25_Data Base Amount Third Party Operation Данъчна основа от посредник в тристранна операция Доставки като посредник при тристранна операция (авансови плащания) - Purchases Ledger Column Column Name (EN) Column Name (BG) Deal Type (BG) Additional Conditions Column9_Data Base Amount Without Tax Credit Данъчна основа без право на данъчен кредит Сделки, внос и ВОП без право на данъчен кредит - Column10_Data Base Amount With Full Tax Credit Данъчна основа с право на пълен данъчен кредит Сделки, внос и ВОП с право на пълен данъчен кредит - Column11_Data VAT Amount With Full Tax Credit ДДС с право на пълен данъчен кредит Сделки, внос и ВОП с право на пълен данъчен кредит - Column12_Data Base Amount With Partial Tax Credit Данъчна основа с право на частичен данъчен кредит Сделки, внос и ВОП с право на частичен данъчен кредит - Column13_Data VAT Amount With Partial Tax Credit ДДС с право на частичен данъчен кредит Сделки, внос и ВОП с право на частичен данъчен кредит - Column14_Data Annual Correction Годишна корекция Годишна корекция - Column15_Data Base Amount Third Party Operation Данъчна основа от посредник в тристранна операция Придобиване от посредник в тристранна операция -"
  },
  "reference/format-specifiers.html": {
    "href": "reference/format-specifiers.html",
    "title": "Format Specifiers | ERP.net Tech Docs",
    "keywords": "Format Specifiers Format specifiers are used to state the the desired format when formatting object values. In EnterpriseOne they can be used, for example, as a second parameter for the calculated attribute operator FORMATSTRING or in the formatting string (‘:FormatSpecifier’) when referencing domain attributes in the todo:(SENDMAIL) action (‘{DomainAttribute:FormatSpecifier}’). There are two main types of format specifiers - Standard .Net Format Specifiers (Numeric, Date - Time,..) and Custom Format Specifiers (Multilanguge String, Custom Property). Standard .Net Format Specifiers The standard .Net format specifiers are supported. The list below contains the most frequently used .Net Format Specifiers. For a complete list and more information, please look at the official .Net documentation site. Numeric Format Specifiers 'C', 'c' - abbreviation of Currency. Converts a number to a string that represents a currency amount. Can be used with a precision specifier indicates the desired number of digits after the decimal point. The decimal symbol separator and the currency symbol depend on the local regional settings. Returns: 123,4656 ('C') → $123,46 123,4656 ('C3') → $123,466 'D', 'd' -abbreviation of Decimal. Converts a number to a string of decimal digits (0-9), prefixed by a minus sign if the number is negative. Can be used with a precision specifier indicates the desired number of digits after the decimal point. This format is supported only for integral types. Returns:1234 ('D') → 1234 -1234 ('D6') → -001234 'N', 'n' - abbreviation of Number. Converts a number to a string. Can be used with a precision specifier indicates the desired number of digits after the decimal point. The decimal symbol separator depends on the local regional settings. Returns 123,4656 (N) → 123,47 123,4656 (N3) → 123,466 'P', 'p' - abbreviation of Percent. Multiplies a number by 100 and converts it to a string that represents a percentage. The precision specifier indicates the desired number of decimal places. The decimal symbol separator depends on the local regional settings. Returns 0,488869 (P) → 48,89% 0,488869 (P3) → 48,887% Date and Time Format Strings Standard date and time format specifiers can be used alone (standard date and time format string) or in a combination (custom format string) in order to define the text representation of a date and time value. A standard date and time format string uses a single format specifier to define the text representation of a date and time value. Any date and time format string that contains more than one character, including white space, is interpreted as a custom date and time format string. Standard date and time format strings: 'D', 'd' - Short date pattern. The returned format depends on the pattern set for Short date in the local regional settings. Returns: 2019-05-10 15:18:39.013 → 10.5.2019 'D' - Long date pattern. The returned format depends on the pattern set for Long date in the local regional settings. Returns: 2019-05-10 15:18:39.013 → 10 May 2019 'f' - Full date/time pattern (short time). The returned format depends on the pattern set for Long date and Short time in the local regional settings. Returns: 2019-05-10 15:18:39.013 → 10 May 2019 5:18 'F' - Full date/time pattern (long time).. The returned format depends on the pattern set for Long date and Short time in the local regional settings. Returns: 2019-05-10 15:18:39.013 → 10 May 2019 5:18:39 'M', 'm' - Month/day pattern. The returned format depends on the current culture set in the local regional settings. Returns: 2019-05-10 15:18:39.013 → May 10 'u' - Universal sortable date/time pattern. Returns: 2019-05-10 15:18:39.013 → 2019-05-10 15:18:39Z 'U' - Universal full date/time pattern. Returns: 2019-05-10 15:18:39.013 → 10 May 2019 5:18:39 Custom format strings: 'd' - The day of the month, from 1 through 31. 'M' - The month, from 1 through 12. 'y' - The year, from 0 to 99. 'h' - The hour, using a 12-hour clock from 1 to 12. 'H' - The hour, using a 24-hour clock from 00 to 23. 'm' - The minute, from 0 through 59. 's' - The second, from 0 through 59. 'f' - The tenths of a second in a date and time value. '%' - Defines the following character as a custom '/' - Тhe current's culture date seperator. '' - The escape character. \"string\", 'string' - Literal string delimiter. Examples: 2019-05-10 15:18:39.013 ('dd MM yyyy hh:mm:ss.fff')→ 10 05 2019 03:18:39.013 2019-05-10 15:18:39.013 ('yyyy MM dd hh:mm:ss.fff')→ 2019 05 10 03:18:39.013 2019-05-10 15:18:39.013 ('dd M yyyy hh:mm:ss.fff')→ 10 5 2019 03:18 2019-05-10 15:18:39.013 ('dd MMM yyyy hh:mm')→ 10 May 2019 03:18 2019-05-10 15:18:39.013 ('dd/MM/yyyy hh:mm')→ 10.05.2019 03:18 2019-05-10 15:18:39.013 ('dd/MM/yyyy hh:mm')→ 10/05/2019 03:18 2019-05-10 15:18:39.013 (dd-MM-yyyy hh:mm)→ 10-05-2019 03:18 2019-05-10 15:18:39.013 ('dd MM yyyy hh:mm 'h'')→ 10 05 2019 03:18 h Custom Format Specifiers There are also custom format specifiers which are created specially for EnterpriseOne. They are different for the different data types and are described below. Multilanguge String 'C', 'CURRENT' - returns the string of the current value. 'D', 'DUMP' - returns the content of the multilanguage string in the format: EN= DE= 'T', 'TRANSLITERATED' - returns transliteration to the current language. format specifiers for a particular language - returns the translation of the specified language. If there is no transliteration set for this language, returns an empty string. Note: The format specifiers for a particular language are supported since EnterpriseOne Version 2019.1. Language format specifiers: -'EN' - English 'BG' - Bulgarian 'CS' - Czech 'FR' - French 'DE' - German 'EL' - Greek 'HU' - Hungarian 'IT' - Italian 'MK' - Macedonian 'PL' - Polish 'PT' - Portuguese 'RO' - Romanian 'RU' - Russian 'SR' - Serbian 'ES' - Spanish Custom Property 'VD' - abbreviation of Value/Description, returns: : 'V' - abbreviation of Value, returns: 'VDI' - abbreviation of Value/Description/Id, returns: : ( ) 'D' - abbreviation of Description, returns:"
  },
  "reference/forms-with-activated-domain-front-end-logic.html": {
    "href": "reference/forms-with-activated-domain-front-end-logic.html",
    "title": "Forms with Activated Domain Front-End Logic | ERP.net Tech Docs",
    "keywords": "Forms with Activated Domain Front-End Logic When a Domain Front-End Logic is activated for a particular form, this means that it is activated for all referent panels in this form which are a part of the Aggregate . E.i. if it is activated for the Sales Ordes form - it is also activated for panels such as Sales Orders Lines and Payment Plan which are a part of the Sales Order's aggregate, but not for panels such as Document Amounts which are a part of the Document's aggregate. Module Form Activated BindDomainLogic Version Sales Module Customer Types YES 20.1 CustomerCompanyLocations YES 20.1 Customers YES 20.1 Customers - Companies YES 20.1 Customers - Persons YES 20.1 Dealers YES 20.1 Dealers - Companies YES 20.1 Dealers - Persons YES 20.1 Offers YES 2017.1 Price Lists YES 20.1 Price Types YES 20.1 Sales Orders YES 2017.1 Sales Persons YES 20.1 Deals YES 21.1 Line Discounts YES 21.1 Product Prices YES 21.1 Promotional Packages YES 21.1 POS Module POS Devices YES 20.1 POS Locations YES 20.1 POS Operators YES 20.1 POS Roles YES 20.1 POS Work Terminals YES 20.1 Product Types - Tax Groups YES 20.1 Invoicing Module Invoice Orders YES 20.1 Invoices YES 20.1 Products Module Coding Systems YES 20.1 Measurement Categories YES 20.1 Measurement Units YES 20.1 Product - Pictures YES 20.1 Product Groups YES 20.1 Product Types YES 20.1 Products YES 20.1 Products - Codes YES 20.1 Products - Dimensions YES 20.1 Products - Distribution Channels YES 20.1 Products - Variants YES 2017.1 Product Variants - Colors YES 21.1 Product Variants - Sizes YES 21.1 Product Variants - Styles YES 21.1 Configurator Module Product Groups YES 20.1 Products YES 20.1 Product - Custom Properties NO - Product Group - Required Properties NO - Contacts & Tasks Module Activities YES 20.1 Areas YES 20.1 Call Detail YES 20.1 Companies YES 20.1 Companies - Departments YES 20.1 Company EU Configurator YES 20.1 Contact Mechanisms YES 20.1 Party - Pictures YES 20.1 Party Relationship Types YES 20.1 Party Relationships YES 20.1 Reminders YES 20.1 Resources YES 21.1 Resources - Availability YES 20.1 Resources - Resource Instances YES 20.1 Resource Groups YES 21.1 Activities - Time Intervals NO - Companies - Divisions NO - Companies - Employees NO - Companies - Locations NO - Parties NO - Persons NO - Marketing Module Bonus Programs YES 20.1 Campaingns YES 20.1 Distribution Channels YES 20.1 Forecast Items YES 20.1 Marketing Activities YES 20.1 Product Catalogs YES 20.1 Target Groups YES 20.1 Distribution Module Customers - Products YES 20.1 Sales Person Groups YES 20.1 Sales Person Targets NO - Sales Persons NO - Pricing Module Pricing Models YES 20.1 Products YES 20.1 Types NO - Shipment Module Shipment Orders YES 20.1 Shipments YES 20.1 Inventory Management Module Lots YES 20.1 Products - Default Store Bins YES 20.1 Products - Valuation Groups YES 20.1 Scrap Types YES 20.1 Serial Numbers YES 20.1 Store Bins YES 20.1 Store Groups YES 20.1 Store Orders YES 20.1 Stores YES 20.1 Transactions YES 20.1 Cost Corrections YES 21.1 Reconciliations NO - Transfer Orders NO - Logistics Planning Module Product Supply YES 21.1 Procurement Module Receiving Orders YES 20.1 Suppliers YES 20.1 Suppliers - Companies YES 20.1 Suppliers - Persons YES 20.1 Purchase Control Documents YES 21.1 Purchase Operation Types YES 21.1 Purchase Orders NO - Purchase Price Lists YES 21.1 Purchase Product Prices YES 21.1 Requisitions NO - Supplier Types YES 21.1 Products and Technologies Module Products YES 20.1 Principal Recipies YES 21.1 Recipies NO - Production Planning Module Product Supply NO - Resources Module Function Groups YES 21.1 Functions YES 21.1 Operation Groups YES 21.1 Operations YES 21.1 Resource Groups YES 21.1 Resources YES 21.1 Workgroups YES 21.1 Workgroups - Resources YES 21.1 Work Schedules YES 21.1 Shop Floor Module Consumption Orders NO - Output Orders NO - Work Orders NO - Projects Management Module Project Tasks NO - Projects NO - Projects - Risks YES 21.1 Projects Budgeting Module Resources YES 21.1 Resource Groups YES 21.1 Gen_Resources - Resource Instances YES 20.1 Resources - Availability YES 20.1 Product Variants YES 21.1 Projects Executuion Module Work Reports YES 21.1 Projects Setup Module Project Types YES 21.1 Project Types - Participants Roles YES 21.1 Project Types - Work Elements YES 21.1 Project Types - Work Types YES 21.1 Task Types YES 21.1 Payments Module Bulk Payment Orders YES 20.1 Parties - Bank Accounts YES 20.1 Payment Accounts YES 20.1 Payment Orders YES 20.1 Payment Reasons YES 20.1 Payment Slips YES 20.1 Payment Transfers YES 20.1 Payment Types YES 20.1 Payment Transactions NO - Expenses Module Supliers YES 20.1 Supliers - Companies YES 20.1 Supliers - Persons YES 20.1 Purchase Invoice NO - Accounting Module Account Groups NO - Accounts NO - Cost Centers NO - Operations NO - Profit Centers NO - Templates NO - Vouchers NO - Cost Accounting Module Cost Distributions NO - Cost Types NO - Financial Statements NO - Finanse Analisys Module NO - VAT Module Deal Types YES 21.1 Declaring Person NO - Document Type VAT Codes NO - Entries NO - VAT Declarations NO - Intrastat Module Intrastat Declarations YES 21.1 Fixed Assets Module Acquire and Retire Orders NO - Asset Categories YES 21.1 Asset Groups YES 21.1 Asset Transactions NO - Assets YES 21.1 Depreciation Methods YES 21.1 Depreciation Plans YES 21.1 Depreciations YES 21.1 Valuation Methods YES 21.1 Lease-Out Management Module Asset Groups YES 21.1 Asset Types - Consumables YES 21.1 Asset Types - Properties YES 21.1 Assets NO - Assets - Consumables YES 21.1 Assets Types YES 21.1 Service Module Service Activities YES 21.1- Service Agreements YES 21.1 Service Object Types YES 21.1 Service Objects YES 21.1 Service Orders YES 21.1 Service Types YES 21.1 Services YES 21.1 Services - Ivoicing YES 21.1 Vehicles Module Crews YES 21.1 Equipment Types YES 21.1 Map Points YES 21.1 Trips YES 21.1 Vehicle Equipment YES 21.1 Vehicle Sets YES 21.1 Vehicles YES 21.1 Mail Module Mail Messages NO - Mailboxes NO - Data Warehouse Module Data Measures NO - Data Measures Groups NO - Data Values NO - Personal Data (GDPR) Module Personal Data Management Processes YES 21.1 Processing Consents YES 21.1 Rights Requests YES 21.1 Asset Maintanance Module Maintenance Orders YES 21.1 Maintenance Types Groups YES 21.1 Maintenance Types YES 21.1 Managed Asset Groups YES 21.1 Managed Asset Types YES 21.1 Managed Assets YES 21.1 Service Centers YES 21.1 Tracked Parameters YES 21.1 General Administrative Regions YES 21.1 Countries YES 21.1 Currencies YES 21.1 Currency Directories NO - Custom Properties YES 21.1 Custom Properties Categories YES 21.1 Enterprise Companies NO - Communities Notification Settings YES 21.1 Notifications YES 21.1 Document Model Document Amount Types YES 21.1 Document Types - Amounts NO - Document Types YES 21.1 Document Types - Security Conditions NO - Printouts NO - Printouts - Layouts NO - Processes NO - Routes NO - Sales Orders - Default Payment Plans YES 21.1 Sequence Generators NO - Sequences NO - Business Rules Calculated Attributes YES 2018.1 User Business Rules YES 2018.1 Business Processes Business Processes YES 21.1 Process Connections NO - Process Elements NO - Process Groups YES 21.1 Process Instance YES 21.1 Process Lanes YES 21.1 Security Access Keys NO - Audit Log Entries YES 21.1 Column Permissions YES 21.1 Domains NO - Entities NO - Groups NO - Roles NO - Roles - Users NO - Trusted Applications NO - User Groups NO - Users NO - Tools Data Sources NO - Document Jobs NO - External Applications NO - Jobs NO - Reports NO - Translations YES 21.1 Web Hosts NO - Web Sites NO -"
  },
  "reference/index.html": {
    "href": "reference/index.html",
    "title": "Reference Section | ERP.net Tech Docs",
    "keywords": "Reference Section This section contains topics, which contain reference data. Select a topic from the menu to view reference data."
  },
  "reference/module-codes.html": {
    "href": "reference/module-codes.html",
    "title": "Module Codes | ERP.net Tech Docs",
    "keywords": "Module Codes This Topic contains an up-to-date list of ERP.net modules. Generic Access Licenses CAL01 - Concurrent Client Access License ED01 - Edition - Mini ED02 - Edition - Small Business ED03 - Edition - Standard ED04 - Edition - Corporate Applications APP01 - Applications - Project Management APP02 - Applications - Lease-Out Management APP03 - Applications - Vehicle Management APP04 - Applications - Mail APP05 - Applications - Personal Data Management APP06 - Applications - Data Warehouse APP07 - Applications - Enterprise Asset Management CRM CRM01 - Clients - Sales CRM02 - Clients - Invoices CRM03 - Clients - Products CRM04 - Clients - Product Configuration CRM05 - Clients - Contacts and Tasks CRM06 - Clients - Marketing CRM07 - Clients - Service CRM08 - Clients - Distribution CRM09 - Clients - Unified Communications CRM10 - Clients - Pricing CRM11 - Clients - Point Of Sale Finance FIN01 - Finance - Payments FIN02 - Finance - Expenses FIN03 - Finance - Accounting FIN04 - Finance - VAT FIN05 - Finance - Fixed Assets FIN06 - Finance - Financial Analysis FIN07 - Finance - Intrastat Reporting FIN08 - Finance - Cost Accounting Logistics LOG01 - Logistics - Shipment LOG02 - Logistics - Warehouse Management LOG03 - Logistics - Planning LOG04 - Logistics - Procurement Production PRD01 - Production - Products and Technologies PRD02 - Production - Planning PRD03 - Production - Resources PRD04 - Production - Shop Floor Control Web WEB02 - Web - Client Center Extras X01 - Extras - 10 Companies X02 - Extras - Unlimited Companies X03 - Extras - Store Bins X04 - Extras - Pictures Editor X05 - Extras - Business Intelligence X06 - Extras - Barcode Controlling X07 - Extras - API X08 - Extras - Business Process Management X09 - Extras - CSharp Scripting"
  },
  "reference/system-permissions.html": {
    "href": "reference/system-permissions.html",
    "title": "System Permissions | ERP.net Tech Docs",
    "keywords": "System Permissions In ERP.net there are some predefined System Permissions which are created in order to serve certain business cases and allow giving or restricting access of particular functionalities in the system. Each System Permission has a specific Access Key Id that is the same in each database. The records for that which System Permission is granted to which User Groups is kept in the Group Access Keys table. We are adding a list with the predefined System Permissions and their Access Key IDs. This information could, for example, be used to monitor the changes of those permissions using the Track Changes system. System Permission Access Key ID Allow edit persist lot in shipment orders 17f56001-681a-4972-a75f-425e21158e4c Allow credit limit override in sales orders 39c19335-cdd2-4548-8d0d-b10d5fc9fc9f Allow edit unit price in offers and sales orders b85c23e3-f314-467a-9022-53e43c08b585 Allow edit historical unit cost in sales orders c88e4f8a-7e55-4029-9615-a7e2b12ddd1b Allow edit persist lot in sales orders b2a3cef0-e6e3-11e1-aff1-0800200c9a66 Allow edit line discount in offers and sales orders e71c31d2-e315-4a72-d021-f3143c08b58a Allow edit persist lot in store orders aebcc95b-41d1-494e-92f8-e01501b353a8 Allow release of correct logistics transactions that are not validated orders 61e43e33-5bc4-484c-b581-3737e05b0978 Use personal layout views 850945b7-91da-4aa4-9e55-9f8feb72e423 Show more than 2,000 rows d7208a56-2a02-4069-bbe7-a8ce65085094 Show more than 20,000 rows 4a3c7106-e15b-4c97-bae1-5500c0cf47c6 Show more than 200,000 rows 10c58661-8210-4a77-8444-5126b0d99c91 Advanced User 06051ccb-19ef-49f0-a224-2ce2bcea87cf Super User 0ee5ee4b-3cbc-4fd2-aa50-42b1c5fa1d9a Server Control c10b3c23-2cf0-470b-b80d-549e0533c190"
  }
}