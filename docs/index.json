{
  "advanced/aggregates.html": {
    "href": "advanced/aggregates.html",
    "title": "Aggregates | ERP.net Tech Docs",
    "keywords": "Aggregates What are Aggregates? \"Aggregate is a pattern in Domain-Driven Design. A DDD aggregate is a cluster of domain objects that can be treated as a single unit. An example may be an order and its line-items, these will be separate objects, but it's useful to treat the order (together with its line items) as a single aggregate.\" https://martinfowler.com/bliki/DDD_Aggregate.html Examples For example, in ERP.net, this is one single aggregate: a SalesOrder the Sales Order Lines of this Sales Order the Distributed Amounts for each of these Sales Order Lines the Document Amounts of this Sales Order the Payment Plan of this Sales Order Parent And Root Objects Each object in an aggregate can have a parent object.The parent is the logical \"owner\" of the child object(s). For example: The parent of Sales Order Line is Sales Order . The parent of Distributed Amount is the Sales Order Line . The ultimate object, which has no parent in the aggregate is the Aggregate Root. In this example, this is the Sales Order . Aggregate Events The Commit and ClientCommit events are now available in two different variations: Object Commit / Client-Commit Aggregate Commit / Client-Commit What is the difference? When an object commit event occurs, it means that the object itself was changed. The aggregate event occurs for the object when there is a change in ANY of its constituent objects, but only if the objects is an aggregate root. Lets take a look at the following structure which in EnterpriseOne is one single aggregate: a SalesOrder (which is the aggregate's root) the Sales Order Lines of this Sales Order the Distributed Amounts for each of these Sales Order Lines the Document Amounts of this Sales Order the Payment Plan of this Sales Order In the example above, the Commit event would occur for the Sales Order if and only if the Sales Order object itself has changed. While the Aggregate Commit will occur for the Sales Order if any of the objects in the aggregate has changed. For example, changing just a single Sales Order Line (without changing the Sales Order itself) would still trigger the Sales Order Aggregate event. Note Commit and Client-Commit still have the same meaning. E.g., Commit is the low-level event, which is triggered for everything committed to the database (be it from client request or as a result of some server processing). While Client-Commit is triggered only based on client requests and is considered the more light-weight approach. Note Initially, only the Aggregate Client Commit event would be available for user-defined business rules User Business Rules . The Aggregate Commit will be used only internally, for system-defined business rules todo:(System Business Rules) The reason is to have a more light tread approach. If there is serious need, we can consider adding the Aggregate Commit event in the future for User Business Rules . See also: Systems.Core.ExtensibleDataObjects Entity"
  },
  "advanced/extensible-data-objects.html": {
    "href": "advanced/extensible-data-objects.html",
    "title": "Extensible Data Objects EDO | ERP.net Tech Docs",
    "keywords": "Extensible Data Objects EDO Description And Usage The Extensible Data Objects (EDO) is a system in ERP.net, which allows attaching additional data to all entities in the system. Types of additional data, which can currently be attached: File Attachments. Track Changes change tracking data. How It Works? EDO objects are stored in the Sys_Objects entity. The system works in the following way: An object in any entity requires attaching additional data. A new record is created in Sys_Objects. The additional data is created in sub-tables, which have referential integrity to Sys_Objects. The record in Sys_Objects has only untyped soft reference (not referential integrity) to the original record. It contains Entity_Type and Entity_Item_Id fields, which uniquely identify the original record. All additional data is related to Sys_Objects through typed referential integrity. In this way, the only untyped soft reference is the original reference in Sys_Objects , but most data is solidly related through typed referential integrity. Note The todo:(Custom Properties) system was implemented prior to the Extensible Data Objects system, so it also uses untyped soft reference. If we would have to design the Custom Properties system now, it would be implemented as \"additional data\" to the EDO system. Future Plans The EDO system is very useful for creating additional data, which can be attached to multiple entities. It is not required that the type of data should be attachable to ALL entities. The data model allows attaching data to any entity, but system business rules or User Business Rules can be used to limit the entities, which actually \"accept\" the data. Possible (planned) future uses: Comments/Replies - many objects in the system can be augmented by allowing the users to comment and reply to them. All kinds of attachments - links, pictures, other system objects, etc. Tags/Labels for back-link navigation. Future simplified implementation of custom properties. Reactions - Facebook style reactions. Reviews - marketplace style reviews. See also: Systems.Core.ExtensibleDataObjects Entity"
  },
  "advanced/generation-procedures/overview.html": {
    "href": "advanced/generation-procedures/overview.html",
    "title": "Generation Procedures Overview | ERP.net Tech Docs",
    "keywords": "Generation Procedures Overview Generation Procedures are automated procedures, which generate Documents from other documents. They are the basis for the Document Flow . Generation Procedures are the arrows in the document flow diagrams. Setup In order to start generating documents, the Generation Procedures need to be configured. The configuration is performed in the Document Type entity, in the Document Type Routes child entity. Each Document Type Route is a configuration for a single Generation Procedure."
  },
  "advanced/overview.html": {
    "href": "advanced/overview.html",
    "title": "Advanced Section | ERP.net Tech Docs",
    "keywords": "Advanced Section This section contains information for advanced concepts, systems and deep dive in the security. It is intended primarily for advanced ERP implementation consultants. Advanced Systems User Data Attributes User Calculated Attributes User Business Rules Track Changes Extensible Data Objects Advanced Concepts Master / Detail Attributes Object / Relational Mapping Aggregates"
  },
  "advanced/system-business-rules.html": {
    "href": "advanced/system-business-rules.html",
    "title": "System Business Rules | ERP.net Tech Docs",
    "keywords": "System Business Rules What is System Business Rule? The System Business Rules specify a specific action that the system must take to verify and / or modify data that is entered into the database. Аccording to their аction, there are two main types of business rules: rules that validate the data that has been entered - e.g. if a particular field has a value, if the value is valid, if the value interfere with the values the other fields, settings or business logics. rules that modify something - e.g. sets a value in a particular field, triggers an event for another entity, and oth. Documentation Each System Business Rule which code is with the format 'R' + 'digit number', e.g. R27179, has a documentation topic. The topic is available in the Business Rules section of the Model Documentation for the particular Entity e.g. Sales Orders's Business Rules . Every topic includes a standardized table which contains detailed information about the rule. The standardized table allows us to organize data in a structured way and helps the reader to quickly navigate through the info. The Table Columns and Content Explained Column Name Column Description Code Unique System Business Rule code. Always starts with \"R\" and continues with a digit number. Entity The entity for which the Action of the System Business Rule is executed. Name The name of the System Business Rule. The name is unique per entity. Usually, the name is simply the name of the attribute for which the rule is created. Attribute This is the attribute (field) of the entity object to which the rule applies. There may be rules that do not apply to any particular field. Layer The layer where the System Business Rule is executed. Possible values are: - Front-End - the rule is executed on the client-side of the application i.e. in the user interface while the data is being modified by the user. - Back-End - the rule is executed on the server-ide of the application, regardless of whether the information is entered through a user interface or through the API Events The events that will trigger the execution of the rule. Possible events are: - Commit - occurs when the data is saved into the database. - Planning + - occurs when the document state is changed to 'Planned' or higher. (applies only to documents) - FirmPlanning + - occurs when the document state is changed to 'FirmPlanned' or higher. (applies only to documents) - Releasing + - occurs when the document state is changed to 'Released' or higher. (applies only to documents) - Completing + - occurs when the document state is changed to 'Completed' or higher. (applies only to documents) - Closed - occurs when the document state is changed to 'Closed'. (applies only to documents) - Voiding - occurs when a document is being voided. (applies only to documents) - ClientCommit - occurs when the data is saved into the database, nut only when the saving is initiated by a client application. If the object is modified by the EnterpriseOne server, then this event is not triggered EnterpriseOne Server. - AttributeChanged (TheAttribute) - occurs when an attribute/field value is changed. The attribute/s whose value is being changed is/are specified in the brackets. Priority Possible values are Early, Normal, or Late. The priority is taken into account in the execution order. The rules with an Early priority are executed first, followed by thеse with Normal priority, and rules with a Late priority are executed last. Modify Shows explicitly whether the rule modifies the entity's data. Possible values are YES and NO. If the rule only checks if a particular field is filled in or not, then Modify = NO. But if the rule checks if a particular field is filled in and if it is not - sets a value in it, then Modify = YES. Applicable Legislations Specifies whether the rule has to be executed according to the particular party's applicable legislations. Possible values are: - 'ALL // no condition needed' - There is no condition and the rule will be executed regardless of the legislations of the related parties. - The legislation abbreviation (the conditional Party) e.g. BG (EnterpriseCompany.Company) - The rule will be executed only if in the Applicable Legislations child table of the particular Party there is a record with the specified Legislation. Action Technical description of the conditions and the operation of the rule. Description Text description of the rule - conditions, operation, the business logic behind it, related topics and oth. Sort Messages By Attribute Тhe attribute by whose value the message apparance is ordered - if the message is repeated more than once. If we are editing a document, for example, and the message have to be thrown for a couple of its lines, then it will probably be far easier for the user to follow them if they are sorted by the \"Line Number\" of the document lines. Version A list with all versions in which the Business Rule has been somehow changed. Usually contains two types of records: - 'Introduced: 2xxx.x' - the version since which the Business Rule type is available; - 'Updated: 2xxx.x' - the version in which the Business Rule has been changed plus a short description of the changes. There could be non or multiple records of this type. Revocable Shows whether the rule can be revoked for a particular database or not. In order to be revoked - the rule's code has to be specified in the list of the registry key 'RevokedBusinessRules'. (for more information, see key number 41 in the todo:(Config Options Reference topic))"
  },
  "advanced/track-changes.html": {
    "href": "advanced/track-changes.html",
    "title": "Track Changes | ERP.net Tech Docs",
    "keywords": "Track Changes Track Changes is a system in ERP.net, which can be used to track the changes in any data table. Tracking Levels The tracking levels specify the detail level of the tracking, as per the following table: Track Changes Level Name Description 0 Do Not Track Changes Do not track any changes for this entity. 1 Track Last Change Store information only for the latest modification of the tracked object. 2 Track Object Changes All the data of Level 1 + General tracking information about each update of the object. Do not store information about the changes in the attributes. 3 Track Object & Attribute Changes All the data of Level 2 + Information about the changes in the attributes, excluding the BLOB attributes. The BLOB (Binary Large Objects) attributes are large size attributes like images, files, etc. 4 Track Object, Attribute & BLOB Changes All the data of Level 3 + Changes in the values of BLOB attributes. Effects And Storage The system stores information based on the tracking level. The following topics summarizes the stored data and other considerations and remarks: Level 0 - Do Not Track Changes. No information is stored. Level 1 - Track Last Change Store information only for the latest modification. This is the lightest tracking mode with the least storage requirements. The information is stored in the Systems.Core.ExtensibleDataObjects Entity Note Extensible Data Objects EDO object is created and maintained ONLY for the root object of the object Aggregates ). Upon first update of the tracked object, a new EDO record is created, if there isn't already one. For each successive update of any object in the aggregate, the data in the EDO is updated. The tracking data includes: Version Number - incremented on each update Creation User - the user who initially created the tracked object (if Track Changes was enabled by that time). Creation Time (UTC) - the time of initial creation in Universal Coordinated Time (UTC) timezone. Last Update User - the user who performed the last update OR deleted the object. Last Update Time (UTC) - the time of the last update. Is Deleted - specifies whether the tracked object is deleted. After the tracked object is deleted, the Extensible Data Objects EDO information stays in the DB for some time, but can be purged by cleanup processes. Please note, that when the tracked object is deleted, the deletion user & time are stored in the Last Update User / Time. Level 2 - Track Object Changes With this level, the Extensible Data Objects EDO is still updated, but also, for each modification, a new record is created in two tables: Systems.Core.ObjectChangesets Entity contains data about change-sets. A change-set is one modification request, sent to the server. One request can contain modifications (creates/updates/deletes) of multiple objects. Each change-set stores the following data: User - the user, who initiated the server request. Time (UTC) - server time in UTC, when the request was executed. Application - the name of the client application, which executed the request. Server Version - the version of the server by the time when the request was executed. Object Changes stores one row for each modified object. One change-set can contain data about multiple object changes. The following data is stored: Repository Name - the name of the object repository, containing the object. Entity Item Id - the Id of the tracked object. Change Type - the type of modification: C, U or D for Create/Update/Delete. Root Object Id - the Id of the Extensible Data Objects EDO for the root object of the Aggregates . Level 3 - Track Object & Attribute Changes When this level is selected, all the data for Level 2 is still stored and maintained. But now, also data about each attribute (field) change is also stored. Note This tracking level can consume A LOT of disk space. Use it only when absolutely necessary. Also, make sure to setup some cleanup process (integrated or external). Attribute Changes stores the following data about each attribute change: Attribute Name - the name of the changed attribute New Value - the string representation (culture insensitive) of the new value Some attribute changes might not be \"sensed\" correctly by the system. Since the Track Changes system works at the application level, changes made by direct SQL statements will not be recorded. When a next update occurs, the system will record the changes to the attribute like it is being made by the next update. This behavior is by design. The most frequent effect of this behavior is that the Document No attribute (which is set by SQL statements and not by the application layer) is recorded as being changed by the 2nd modification of the document. Only the new values are stored (not the old values). This design was chosen for the following reasons: We do not store both old values AND new values to save space. If only the old (and not the new) values are stored, the track changes algorithm can save some space (initial object creation do not need to store values), but performance suffers. This was the initial implementation of the track changes system, but it was abandoned. The track changes process needed to synchronously read the previous database value before each update. This slowed down the actual database transactions and it was decided that the \"new values only\" approach would better fit the performance requirements. The storage of the new values can be performed asynchronously AFTER the actual database transaction has completed. In this way, the track changes system has very minor effect on the speed of the every-day OLTP transactions. One drawback of the asynchronous saving is that, upon server crash, the track changes data about the attribute changes might be lost. In this case, the Object Change will still be recorded, because it is recorded synchronously (as part of the transaction). Level 4 - Track Object, Attribute & Blob Changes Same as Level 3, but the values of BLOB attributes are also saved. This can severely affect the storage requirements and should be used only for small tables and as last resort measure. Configuring Track Changes The Track Changes functionality is activated through the Systems.Core.EntitySettings Entity table. Steps: Create a record in Entity Types, specifying the desired entity. In the Track Changes Level field, fill the desired tracking level. Save and close. The tracking will shortly start. For document entities is provided an opportunity for mass activation of the Track Changes system using the DocumentVersioningSystem registry key. For more information see the description key number 42 in the todo:(Config Options Reference) topic. Note If you try to configure a level lower than the default tracking levels, the option will be ignored. Default Tracking Levels Some entities are configured by default to track their changes. The default tracking level is system configured and cannot be lowered. However, the users can specify higher tracking levels. The following table contains the default system specified tracking levels. Entity Default Tracking Level Activated in version Entities 3 2019.1 Config 3 2019.1 Products 2 2019.1 Parties 4 2019.1 Companies 3 2019.1 Company Locations 3 2019.1 Persons 3 2019.1 Enterprise Companies 3 2019.1 Payment Types 2 2019.1 Payment Accounts 2 2019.1 POS Locations 3 2019.1 POS Terminals 2 2019.1 POS Operators 3 2019.1 POS Roles 3 2019.1 POS Sequences 2 2019.1 Users 3 2019.1 Groups 3 2019.1 User Groups 3 2019.1 Group Access Keys 3 2019.1 Document Types 4 2019.1 Printout Layouts 4 2019.1 Calculated Attributes 3 2019.1 User Business Rules 3 2019.1"
  },
  "advanced/user-business-rules/overview.html": {
    "href": "advanced/user-business-rules/overview.html",
    "title": "User Business Rules | ERP.net Tech Docs",
    "keywords": "User Business Rules"
  },
  "advanced/user-calculated-attributes/examples/CalculateStandartPricePerLotBasedOnTheIngredientsAndTheOperationsInTheRecipe.html": {
    "href": "advanced/user-calculated-attributes/examples/CalculateStandartPricePerLotBasedOnTheIngredientsAndTheOperationsInTheRecipe.html",
    "title": "Calculate StandartPricePerLot based on the Ingredients and the Operations in the Recipe | ERP.net Tech Docs",
    "keywords": "Calculate StandartPricePerLot based on the Ingredients and the Operations in the Recipe With this attribute, we can calculate the StandartPricePerLot that is going to be automatically set in the product’s definition we save the recipe. The StandartPricePerLot is determined by the prices of the ingredients and the operations used in the particular recipe. After that, we can use this attribute in a Business rule which to fill in the PricePerLotValue of the product in the recipe. 10: ADD EXP:20 EXP:25 20: SUM CHILD:Ingredients ATTRIB:PriceValue 25: SUM CHILD:Operations EXP:30 30: MULTIPLY EXP:40 EXP:45 40: DIVIDE ATTRIB:StandardPricePerHourValue CONST:60.00 45: CAST EXP:50 CONST:System.Decimal 50: ADD ATTRIB:RunTimeMinutes EXP:60 60: ADD ATTRIB:WaitTimeMinutes EXP:70 70: ADD ATTRIB:SetupTimeMinutes ATTRIB:MoveTimeMinutes Explanation: 10: Add the value of EXP:20 to the value of EXP:25. 20: Sum all recipe's ingredients PriceValues. 25: Sum EXP:30 for all of the recipe's operations. 30: Multiply the value of EXP:40 and EXP:45. 40: Divide the StandardPricePerHourValue by 60.00 to get the StandardPrice per minute. 45: Cast EXP:50 to decimal. 50: Add the values of RunTimeMinutes to EXP:60 => EXP:70 to get the full execution time of the operation."
  },
  "advanced/user-calculated-attributes/examples/CheckIfAValueOfAFieldIsChangedInTheAdjustmentDocument.html": {
    "href": "advanced/user-calculated-attributes/examples/CheckIfAValueOfAFieldIsChangedInTheAdjustmentDocument.html",
    "title": "Check If a value of a field Is changed in the Adjustment Document | ERP.net Tech Docs",
    "keywords": "Check If a value of a field Is changed in the Adjustment Document With the current attribute, we can check if the value of a field in the adjustment document is equal to the value of the same filed in the original (adjusted) document. When we have such information, we can determine if the value of this filed is being or has been changed in the adjustment document. Using this attribute, we can for example, create a Business rule which would allow us to prohibit the correction of the value of this field. 10: IIF EXP:20 CONST:False EXP:30 20: EQUAL REF:AdjustedDocument CONST:NULL 30: IIF EXP:40 CONST:False CONST:True 40: EQUAL ATTRIB:@Property1 EXP:50 50: GETOBJVALUE REF:AdjustedDocument ATTRIB:@Property1 Explanation: 10: Check if EXP:20 is true or false. If EXP:20 is True - the calculated attribute displays 'True', else - 'False'. 20: Check if there is AdjustedDocument. If there is no reference to an Adjusted document, then the document is not an Adjustment document. 30: Check if EXP:40 is true or false. 40: Check if the value of the custom property 'Property1' is equal to EXP:50. 50: Get the value of the 'Property1' of the adjusted document."
  },
  "advanced/user-calculated-attributes/examples/CheckIfTheCurrentUserHasAuthorization.html": {
    "href": "advanced/user-calculated-attributes/examples/CheckIfTheCurrentUserHasAuthorization.html",
    "title": "Check if the current user has authorization | ERP.net Tech Docs",
    "keywords": "Check if the current user has authorization If we want to determine if the user that is currently logged in the system is authorized (to do, see, or edit an entity, for example) we need to know which Group have such rights. When we have that information, we can simply create a calculated attribute that checks if the User is a part of this Group: 10: IIF EXP:20 CONST:True CONST:False 20: GTE EXP:30 CONST:1 30: SUM EXP:40 CONST:1 40: SELECT REPO:Systems.Security.UserGroups EXP:50 50: WHERE EXP:60 EXP:80 60: EQUAL ATTRIB:UserId EXP:70 70: GETOBJVALUE INPUT:10 SYS:UserId 80: EQUAL ATTRIB:GroupId CONST:5daf849d-9986-462f-9171-a23c1c5839b7 Explanation: 10: Check if EXP:20 is true or false. If EXP:20 is True - the calculated attribute displays the 'True' message, else - 'False'. 20: Check if the list EXP:30 returns at least one record. 30: Return the count of records in the filtered list of EXP:40. 40: Select 'User Groups' filtered by EXP:50. 50: The Filters are expression 60, expression 80... 60: Check if the UserId is equal to EXP:70. 70: Get the Id of the user that is currently editing the entity. 80: Check if the GroupId is equal to the Id of an authorized group."
  },
  "advanced/user-calculated-attributes/examples/CheckIfTheQuantityIsAWholeNumber.html": {
    "href": "advanced/user-calculated-attributes/examples/CheckIfTheQuantityIsAWholeNumber.html",
    "title": "Check If the Quantity is a whole number | ERP.net Tech Docs",
    "keywords": "Check If the Quantity is a whole number The current calculated attribute returns true if the quantity in the Sales Order line is whole number, and False - if it is decimal number. The repository of the attribute is Crm.Sales.SalesOrders. It expressions are as follows: 10: IIF EXP:20 CONST:True CONST:False 20: EQUAL ATTRIB:QuantityValue EXP:30 30: CEILING ATTRIB:QuantityValue Explanation: 10: check if expression 20 is true. If so - return True, else - return False 20: check if attribute QuantityValue is equal to expression 30 30: get the smallest integral value greater than or equal to the value in attribute QuantityValue"
  },
  "advanced/user-calculated-attributes/examples/CheckIfTheSystemTypeOfPaymentTypeInTheSalesOrderIsInCash.html": {
    "href": "advanced/user-calculated-attributes/examples/CheckIfTheSystemTypeOfPaymentTypeInTheSalesOrderIsInCash.html",
    "title": "Check If the system type of Payment type in the Sales Order is 'In Cash' | ERP.net Tech Docs",
    "keywords": "Check If the system type of Payment type in the Sales Order is 'In Cash' With this attribute we can check if the System Type of Payment type which is set in the Sales Order is 'In Cash'. When we have that information we can, for example, use the attribute to create a Business Rule (for more information, see @Allow a Credit Limit Override When the Client Pays in Cash) that allows a Credit Limit Override when the Client pays in cash. 10: IIF EXP:20 CONST:True CONST:False 20: EQUAL EXP:25 EXP:30 25: CAST CONST:0 CONST:System.Nullable`1[Aloe.EnterpriseOne.Model.Finance.Payments.PaymentTypesRepository+SystemType] 30: GETOBJVALUE REF:PaymentType ATTRIB:SystemType Explanation: 10: Return True of False according to the result of EXP:20 20: Check if EXP:25 is equal to EXP:30 25: Converts '0' to type System.Nullable`1[Aloe.EnterpriseOne.Model.Finance.Payments.PaymentTypesRepository+SystemType] using CAST 30: Get the System Type of the Payment Type which is set in the Sales Order. Note When using EQUAL we should make sure that we are comparing Parameters from the same type. If we don’t know which is the type of the particular object or what is the value that it is going to return we can use the Aloe.EnterpriseOne.Model Documentation . In the particular example we can check PaymentTypesRepository.SystemType Enumeration , where we can see that the value that corresponds to the System Type in 'Cash' is '0'."
  },
  "advanced/user-calculated-attributes/examples/CheckWhetherTheReleasingOfTheDocumentIsFirstOrNot.html": {
    "href": "advanced/user-calculated-attributes/examples/CheckWhetherTheReleasingOfTheDocumentIsFirstOrNot.html",
    "title": "Check Whether the Releasing of the Document Is First or Not | ERP.net Tech Docs",
    "keywords": "Check Whether the Releasing of the Document Is First or Not Sometimes we may want to know whether the Released state of document is selected for a first time or not (i.e. if the event is First Releasing). For examples a business case may require a certain business rule to be executed only when first releasing the document. The calculated attributes are a tool which when triggered perform their calculation in real time. This means that if we use a calculated attribute as a condition for a business rule, the condition may be fulfilled today, but not tomorrow and if we reselect the document state it may trigger actions that are no longer needed for this record ( for more information see How to start a Business Rule only on First Releasing? ). To avoid such occurrence, we can use a calculated attribute to define whether the releasing of the document is first or not. 10: IIF EXP:20 CONST:false CONST:true 20: EQUAL EXP:30 CONST:30 30: CAST ATTRIB:State CONST:System.Int32 Explanation: 10: Check if EXP:20 is true or false. If EXP:20 is True - the calculated attribute displays 'True', else - 'False'. 20: Check if EXP:20 is equal to \"30\". 30: Cast the State of the document to integer. State Released is stored as \"30\", for more information see DocumentState Enumeration ."
  },
  "advanced/user-calculated-attributes/examples/CompareUnitPriceAndStandardUnitPrice.html": {
    "href": "advanced/user-calculated-attributes/examples/CompareUnitPriceAndStandardUnitPrice.html",
    "title": "Compare Unit Price And Standard Unit Price | ERP.net Tech Docs",
    "keywords": "Compare Unit Price And Standard Unit Price The following calculated attribute calculates if the Unit Price in the Sales Order Lines is greater than the Standard Unit Price of the product and returns a message: 10: IIF EXP:20 CONST:'OK!' CONST:'Not OK!' 20: GT ATTRIB:UnitPriceValue ATTRIB:StandardUnitPriceValue Explanation: 10: Checks if EXP:20 is true or false. If EXP:20 is True - the calculated attribute displays the 'OK!' message, else - 'Not OK!'. 20: Checks if ATTRIB:UnitPriceValue is greater than ATTRIB: StandardUnitPriceValue. If so - returns True, else - False. The same validation may be achieved by using other operator: 10: IIF EXP:20 CONST:'Not OK!' CONST:'OK!' 20: LTE ATTRIB:UnitPriceValue ATTRIB:StandardUnitPriceValue Explanation: 10: Checks if EXP:20 is true or false. If EXP:20 is True - the calculated attribute displays the 'Not OK!' message, else - 'OK!'. 20: Checks if ATTRIB:UnitPriceValue is less than or equal to ATTRIB:StandardUnitPriceValue. If so - returns True, else - False."
  },
  "advanced/user-calculated-attributes/examples/ConvertPropertyToNumber.html": {
    "href": "advanced/user-calculated-attributes/examples/ConvertPropertyToNumber.html",
    "title": "Convert a Value of a Custom Property to a Number | ERP.net Tech Docs",
    "keywords": "Convert a Value of a Custom Property to a Number The values of the custom properties are a specific type of value and the CONVERT operator does not know how to handle it properly. For this reason, if we want to covert a custom property's value to a number, we have to CAST it first. Example - Multiply standard price per lot by a coefficient stored in a property Lets say, for example, we want to multiply the standard price per lot of the product by a coefficient stored as a product's custom property @CustomProperty1. Note The repository of the attributes is General.Products.Products RIGHT calculated attribute: 10: MULTIPLY ATTRIB:StandardPricePerLotValue EXP:20 20: CONVERT EXP:30 CONST:System.Decimal 30: CAST ATTRIB:@CustomProperty1 CONST:System.String Explanation: 10: Multiply the value of the 'Standard Price Per Lot' by EXP: 20. 20: Convert EXP:30 to a decimal number. 25: Cast the value of custom property 'CustomProperty1' to a string. WRONG calculated attribute: 10: MULTIPLY ATTRIB:StandardPricePerLotValue EXP:20 20: CONVERT ATTRIB:@CustomProperty1 CONST:System.Decimal Explanation: 10: Multiply the value of the 'Standard Price Per Lot' by EXP: 20. 20: Convert the value of custom property 'CustomProperty1' to a decimal number. Note When we want to convert CustomPropertyValue to numeric value (for example Decimal), we need to CAST it to a string first!"
  },
  "advanced/user-calculated-attributes/examples/GetAValueOfACustomPropertyInSalesOrderLinesFromTheParentOfferLine.html": {
    "href": "advanced/user-calculated-attributes/examples/GetAValueOfACustomPropertyInSalesOrderLinesFromTheParentOfferLine.html",
    "title": "Get a Value of a Custom Property in Sales Order Lines from the Parent Offer Line | ERP.net Tech Docs",
    "keywords": "Get a Value of a Custom Property in Sales Order Lines from the Parent Offer Line With this attribute we can for example, determine what is the value of a particular customer property which is set for the parent offer line of the current sales order line. Currently, offer lines customer properties are not automatically transferred to the sales order. Thus, we can use this attribute in a User Business Rule to automate the process. For more information how to create a such User Business Rule , see topic ' How to Use Business Rules to Set a Value into a Custom Property? '. Repository: Crm.Sales.SalesOrderLines 10: GETOBJVALUE EXP:20 ATTRIB:@Propery1 20: FIRST EXP:30 30: FILTER EXP:70 EXP:40 40: EQUAL ATTRIB:LineNo EXP:50 50: CAST EXP:60 CONST:System.Int32 60: GETOBJVALUE INPUT:10 ATTRIB:ParentLineNo 70: GETOBJVALUE EXP: 80 CHILD:Lines 80: CAST REF:ParentDocument CONST:Aloe.EnterpriseOne.Model.Crm.Presales.Offer Explanation: 10: Get the record of custom property \"Propery1\" from EXP:20. 20: Get the first value of EXP:30. 30: Filter the list from EXP:70 with the filters from EXP:40. 40: Check in the LineNumber of the offer line is equal to the value from EXP:50. 50: Cast EXP:60 to \"System.Int32\". 60: Get the ”ParentLineNo“ of the sales order line which is an input for EXP:10. 70: Get the list of child line of the object of EXP:80. 80: Cast the “Parent Document” of the sales order line to \"Aloe.EnterpriseOne.Model.Crm.Presales.Offer\" in order to define the type/entity of the parent document."
  },
  "advanced/user-calculated-attributes/examples/GetCurrentAvailabilitiesOfAProduct.html": {
    "href": "advanced/user-calculated-attributes/examples/GetCurrentAvailabilitiesOfAProduct.html",
    "title": "Get Current Availabilities of a Product | ERP.net Tech Docs",
    "keywords": "Get Current Availabilities of a Product This example shows how to create a calculated attribute which returns the sum of the currently available Quantity Base of a particular product. In the example below are applied filters by Product, Store, Store Bin, Lot and Serial Number, because of the specification of the repository of the calculation attribute. Other filters, such as Product Variant and Enterprise Company could be also added if needed. The example is created for Consumption Order Lines, but such attribute could be created for other documents or definitions as well. Repository Name: Production.ShopFloor.ConsumptionOrderLines 10: SUM EXP:20 ATTRIB:QuantityBaseValue 20: FILTER EXP:30 EXP:70 30: SELECT REPO:Logistics.Inventory.CurrentBalances EXP:40 40: WHERE EXP:50 50: EQUAL ATTRIB:ProductId EXP:60 60: GETOBJVALUE INPUT:10 ATTRIB:ProductId 70: AND EXP:100 EXP:80 80: AND EXP:130 EXP:90 90: AND EXP:150 EXP:170 100: EQUAL ATTRIB:StoreId EXP:110 110: CAST EXP:120 CONST:System.Guid 120: GETOBJVALUE INPUT:10 ATTRIB:StoreId 130: EQUAL ATTRIB:StoreBinId EXP:140 140: GETOBJVALUE INPUT:10 ATTRIB:StoreBinId 150: EQUAL ATTRIB:LotId EXP:160 160: GETOBJVALUE INPUT:10 ATTRIB:LotId 170: EQUAL ATTRIB:SerialNumberId EXP:180 180: GETOBJVALUE INPUT:10 ATTRIB:SerialNumberId Explanation: 10: Sum Quantity Base from the filtered list returned by EXP:20 20: Filter the list from EXP:30 by the clauses of EXP:70 30: Select repository \"Logistics.Inventory.CurrentBalances\" and filter by the clauses in EXP:40 40: Filter the list above by the records WHERE/in which the clauses in EXP:50 are True 50: Check whether ATTRIB:ProductId is equal to EXP:60 60: Get ATTRIB:ProductId from the repository of EXP:10 70: EXP:100 and EXP:80 80: EXP:130 and EXP:90 90: EXP:150 and EXP:170 100: Check whether ATTRIB:StoreId is EQUAL to EXP:110 110: CAST EXP:120 to System.Guid 120: Get ATTRIB:StoreId from the repository of EXP:10 130: Check whether ATTRIB:StoreBinId is EQUAL to EXP:140 140: Get ATTRIB:StoreBinId from the repository of EXP:10 150: Check whether ATTRIB:LotId is EQUAL to EXP:160 160: Get ATTRIB:LotId from the repository of EXP:10 170: Check whether ATTRIB:SerialNumberId is EQUAL to EXP:180 180: Get ATTRIB:SerialNumberId from the repository of EXP:10"
  },
  "advanced/user-calculated-attributes/examples/GetValueAndDescriptionOfReferentObject.html": {
    "href": "advanced/user-calculated-attributes/examples/GetValueAndDescriptionOfReferentObject.html",
    "title": "Get Value And Description Of Referent Object | ERP.net Tech Docs",
    "keywords": "Get Value And Description Of Referent Object At first - some additional information - when a value is set to a custom property of an object, a new record is added to the \"General.PropertyValue\" repository. The new record has its own Id, and the id of the specific object - EntityItemId. So in a calculated attribute we need to filter the value which are for the specific property (PropertyId) of the specific object (EntityItemId) and then get the value or description. Let's see an example: The current example shows how the get the description of a property of the customer and show it in the Offer form. Such calculated attribute would have the following parameters: Repository Name:Crm.Presales.Offers And the Calculated Attribute expressions are as follows: 10: GETOBJVALUE EXP:20 ATTRIB:Description 20: FIRST EXP:30 30: SELECT REPO:General.PropertyValues EXP:40 40: WHERE EXP:50 50: AND EXP:60 EXP:70 60: EQUAL ATTRIB:PropertyId CONST:e7005814-6140-4708-a9d8-aaaeb5b151ed 70: EQUAL ATTRIB:EntityItemId EXP:80 80: GETOBJVALUE INPUT:10 ATTRIB:CustomerId Explanation: 10: get the attribute Description of the object in expression 20 20: get the first record in the list from expression 30 30: select repository \"General.PropertyValues\" filtered by expression 40 40: the filter is expression 50 50: expression 60 AND expression 70 60: check if the attribute PropertyId is equal to the constant of \"e7005814-6140-4708-a9d8-aaaeb5b151ed\" (this is a Guid) 70: check if the attribute EntityItemId is equal to expression 80 80: get the attribute CustomerId of the input object of expression 10 If we need the value of the property, the first expression may be set to GETOBJVALUE EXP:20 ATTRIB:PropertyValueField."
  },
  "advanced/user-calculated-attributes/examples/Overview.html": {
    "href": "advanced/user-calculated-attributes/examples/Overview.html",
    "title": "Examples | ERP.net Tech Docs",
    "keywords": "Examples Compare Unit Price And Standard Unit Price Convert a Value of a Custom Property to a Number Specific Day From Document Date Calculate StandartPricePerLot based on the Ingredients and the Operations in the Recipe Check If a value of a field Is changed in the Adjustment Document Check if the current user has authorization Check If the Quantity is a whole number Check If the system type of Payment type in the Sales Order is 'In Cash' Check Whether the Releasing of the Document Is First or Not Get a Value of a Custom Property in Sales Order Lines from the Parent Offer Line Get Current Availabilities of a Product Get Value And Description Of Referent Object Sales Amounts Of The Customer For The Last 30 Days Total Quantity And Scrap Quantity In Recipe Ingredients"
  },
  "advanced/user-calculated-attributes/examples/SalesAmountsOfTheCustomerForTheLast30Days.html": {
    "href": "advanced/user-calculated-attributes/examples/SalesAmountsOfTheCustomerForTheLast30Days.html",
    "title": "Sales Amounts Of The Customer For The Last 30 Days | ERP.net Tech Docs",
    "keywords": "Sales Amounts Of The Customer For The Last 30 Days Let's say the user want to show a field in the Sales Order which calculates the sales amounts of the selected customer for the last 30 days. Such calculated attribute actually represents a report with specific filters. If a user tries to get the sales of a client for the last 30 days, he would open Sales Order Lines report and set the following filters: Client Enterprise Company Enterprise Company Location (eventually) DocumentState (at least Released) Void (he probably won't need voided documents) Document Date So the calculated attribute must SELECT the Sales Order Lines table and filter the records as described above. Such calculated attribute would have the following parameters: Repository Name:Crm.Sales.SalesOrders Name:SOAmountsForTheLast30days And the Calculated Attribute expressions are as follows: 10: SUM EXP:20 ATTRIB:LineAmountValue 20: SELECT REPO:Crm.Sales.SalesOrderLines EXP:30 30: WHERE EXP:40 EXP:90 40: AND EXP:50 EXP:70 50: EQUAL EXP:60 CONST:30 60: CAST EXP:61 CONST:System.Int32 61: GETOBJVALUE REF:Document ATTRIB:State 70: EQUAL EXP:80 CONST:False 80: GETOBJVALUE REF:Document ATTRIB:Void 90: AND EXP:100 EXP:130 100: AND EXP:101 EXP:160 101: EQUAL EXP:110 EXP:120 110: GETOBJVALUE REF:SalesOrder ATTRIB:CustomerId 120: GETOBJVALUE INPUT:10 ATTRIB:CustomerId 130: GTE EXP:140 EXP:150 140: GETOBJVALUE REF:SalesOrder ATTRIB:DocumentDate 150: ADDDAYS EXP:151 CONST:-30 151: GETOBJVALUE INPUT:10 ATTRIB:DocumentDate 160: EQUAL EXP:170 EXP:180 170: GETOBJVALUE REF:SalesOrder ATTRIB:EnterpriseCompanyId 180: GETOBJVALUE INPUT:10 ATTRIB:EnterpriseCompanyId Explanation: 10: Sum all records from expression 20 by their attribute LineAmountValue 20: Select 'Sales Order Lines' filtered by expression 30 30: the filter is expression 40 AND expression 50 40: expression 50 AND expression 70 50: check if expression 60 is equal to expression 30 60: cast expression 61 to \"System.Int32\" (this is integer) 61: get the value of attribute State of the referent object Document 70: check if expression 80 is equal to \"False\" 80: get the value of attribute Void of the referent object Document 90: expression 100 AND expression 130 100: expression 101 AND expression 160 101: check if expression 110 is equal to expression 120 110: get the value of attribute CustomerId of the referent object SalesOrder 120:get the value of attribute CustomerId of the input object of expression 10 130: check if expression 140 is greater than or equal to expression 150 140: get the value of attribute DocumentDate of the referent object SalesOrder 150: add to expression 151 the value of \"-30\" 151: get the value of attribute DocumentDate of the input object of expression 10 160: check if expression 170 is equal to expression 180 170: get the value of attribute EnterpriseCompanyId of the referent object SalesOrder 180: get the value of attribute EnterpriseCompanyId of the input object of expression 10"
  },
  "advanced/user-calculated-attributes/examples/SpecificDayFromDocumentDate.html": {
    "href": "advanced/user-calculated-attributes/examples/SpecificDayFromDocumentDate.html",
    "title": "Specific Day From Document Date | ERP.net Tech Docs",
    "keywords": "Specific Day From Document Date A Calculated Attribute is added with the following parameters: Repository Name:Crm.Sales.SalesOrders Name:TenDaysFromDocumentDay And the Calculated Attribute expressions are as follows: 10: ADDDAYS ATTRIB:DocumentDate CONST:10 Explanation: 10: Add 10 days to the date in DocumentDate If showed in the Sales Order form, this attribute calculates and displays 10 days added to the DocumentDate."
  },
  "advanced/user-calculated-attributes/examples/TotalQuantityAndScrapQuantityInRecipeIngredients.html": {
    "href": "advanced/user-calculated-attributes/examples/TotalQuantityAndScrapQuantityInRecipeIngredients.html",
    "title": "Total Quantity And Scrap Quantity In Recipe Ingredients | ERP.net Tech Docs",
    "keywords": "Total Quantity And Scrap Quantity In Recipe Ingredients If the user wants to see what is the total Quantity of the material in a Recipe which would include the Used Quantity and the Scrap Rate, he would add the following Calculated Attribute: Repository Name:Production.Technologies.RecipeIngredients Name:TotalUsedQuantity And the Calculated Attribute expressions are as follows: 10: ADD ATTRIB:UsageQuantityValue EXP:20 20: MULTIPLY ATTRIB:UsageQuantityValue ATTRIB:ScrapRate Explanation: 10: Add the result from expression 20 to the attribute UsageQuantityValue 20: Multiply UsageQuantityValue and ScrapRate"
  },
  "advanced/user-calculated-attributes/operators/add.html": {
    "href": "advanced/user-calculated-attributes/operators/add.html",
    "title": "ADD - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "ADD - Calculated Attribute Operator Specification Value Name ADD Description The operator returns the sum (total) of two numbers. Parameter 1 Name Number1 Parameter 1 Type numeric type - int, double or decimal Parameter 2 Name Number2 Parameter 2 Type numeric type - int, double or decimal Parameter 3 Name Parameter 3 Type Return Value Number1 + Number2 Note Ensure that the numbers which are summed up are from the the same type. For example, Parameter 1 and Parameter 2 must be both integers, doubles, or decimals. Example The following example adds '0.25' to the the value of the Quantity field in Sales Order Lines and returns the sum of the two numbers. 10: ADD ATTRIB:QuantityValue CONST:0.25 OUTPUT: If 'QuantityValue = 1', the output will be '1.25'. Note The repository of the attribute is Crm.Sales.SalesOrderLines More Examples Total Quantity And Scrap Quantity In Recipe Ingredients"
  },
  "advanced/user-calculated-attributes/operators/adddays.html": {
    "href": "advanced/user-calculated-attributes/operators/adddays.html",
    "title": "ADDDAYS - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "ADDDAYS - Calculated Attribute Operator Specification Value Name ADDDAYS Description Adds the specified number of days to the date. Parameter 1 Name Date Parameter 1 Type Date Parameter 2 Name NumDays Parameter 2 Type int Parameter 3 Name Parameter 3 Type Return Value Date + NumDays Example 10: ADDDAYS ATTRIB:DocumentDate CONST:5 OUTPUT: If 'DocumentDate = 2000-01-20', the output will be '2000-01-25'. Note The repository of the attribute is Crm.Sales.SalesOrders"
  },
  "advanced/user-calculated-attributes/operators/and.html": {
    "href": "advanced/user-calculated-attributes/operators/and.html",
    "title": "AND - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "AND - Calculated Attribute Operator Specification Value Name AND Description Checks if the two conditions are True. If so - the operator returns True. If any of the specified conditions are not True, the operator returns False. Parameter 1 Name Condition1 Parameter 1 Type boolean Parameter 2 Name Condition2 (optional) Parameter 2 Type boolean Parameter 3 Name Condition3 (optional) Parameter 3 Type boolean Return Value Condition1 AND Condition2 Note Parameter 1 and Parameter 2 are optional. If only Parameter 1 has value, the result is its value (Parameter 1). Example 10: AND EXP:20 EXP:30 20: EQUAL ATTRIB:LineNo CONST:10 30: EQUAL ATTRIB:Notes CONST:Apple OUTPUT: If 'LineNo = 10' and 'Notes = Apple', the output will be 'True'. If 'LineNo = 50' and 'Notes = Apple', the output will be 'False'. If 'LineNo = 10' and 'Notes = Pear', the output will be 'False'. Note The repository of the attribute is Crm.Sales.SalesOrderLines More Examples Sales Amounts Of The Customer For The Last 30 Days Get Value And Description Of Referent Object"
  },
  "advanced/user-calculated-attributes/operators/cast.html": {
    "href": "advanced/user-calculated-attributes/operators/cast.html",
    "title": "CAST - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "CAST - Calculated Attribute Operator Specification Value Name CAST Description Casts the parameter to the specified type. Parameter 1 Name param Parameter 1 Type any type Parameter 2 Name type Parameter 2 Type string - 'System.Int32', 'System.String', 'System.Decimal', 'System.Double' and all standart .net types. Parameter 3 Name Parameter 3 Type Return Value Returns the param converted to the type. Note The CAST operator is a secondary operator, used by the other operators to convert their parameters to the same type. The type is usually entered as a constant (CONST). Example The following example converts the value of the 'State' of a Sales Order, whoose type is Enum, to an integer number. Conveting to integer allows comparison between the states (lower -> higher): 10: CONVERT ATTRIB:State CONST:System.Int32 OUTPUT: If 'State = Released', the output will be '30'. Note The repository of the attribute is Crm.Sales.SalesOrders More Examples Check Whether the Releasing of the Document Is First or Not Check If the System type of Payment type in the Sales Order Is 'In Cash'"
  },
  "advanced/user-calculated-attributes/operators/ceiling.html": {
    "href": "advanced/user-calculated-attributes/operators/ceiling.html",
    "title": "CEILING - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "CEILING - Calculated Attribute Operator Specification Value Description Returns the smallest integer that is greater than or equal to the specified number. Parameter 1 Name Number1 Parameter 1 Type double or decimal Parameter 2 Name - Parameter 2 Type - Parameter 3 Name - Parameter 3 Type - Return Value The nearest integer which is larger than Number1. Example The following example gets the smallest integer that is greater than or equal to 'Quantity' of a Sales Order Line: 10:CEILING ATTRIB:QuantityValue OUTPUT: If 'QuantityValue = 14.15', the output will be '15'. If 'QuantityValue = 14', the output will be '14'. Note The repository of the attribute is Crm.Sales.SalesOrderLines"
  },
  "advanced/user-calculated-attributes/operators/concat.html": {
    "href": "advanced/user-calculated-attributes/operators/concat.html",
    "title": "CONCAT - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "CONCAT - Calculated Attribute Operator Specification Value Description Concatenates two strings. Parameter 1 Name String1 Parameter 1 Type string Parameter 2 Name String2 Parameter 2 Type string Parameter 3 Name - Parameter 3 Type - Return Value String1 + String2 Example The following example concatenates the word 'Red' with the value of the field 'Notes' in Sales Order Lines: 10: CONCAT CONST:Red ATTRIB:Notes OUTPUT: If 'Notes = Apple', the output will be 'RedApple'. Note The repository of the attribute is Crm.Sales.SalesOrderLines If we want to expand the example we can add a space between the both strings: 10: CONCAT CONST:Red EXP:20 20: CONCAT CONST:' ' ATTRIB:Notes OUTPUT: If 'Notes = Apple', the output will be 'Red Apple'."
  },
  "advanced/user-calculated-attributes/operators/convert.html": {
    "href": "advanced/user-calculated-attributes/operators/convert.html",
    "title": "CONVERT - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "CONVERT - Calculated Attribute Operator Specification Value Description Returns an object of the specified type and whose value is equivalent to the specified object. This conversion requires absolutely correct input data - if the data is not in the correct form, data loss may occur. For example: if the user tries to convert the string value of '3.12' to decimal, the conversion would be successful. If the conversion of the string is not possible, this may lead to data loss, but no error would be returned. Parameter 1 Name param Parameter 1 Type decimal, int, string or date Parameter 2 Name type Parameter 2 Type string - 'System.Int32', 'System.String', 'System.Decimal', 'System.DateTime' and all standard .net types Parameter 3 Name - Parameter 3 Type - Return Value Returns the param converted to the type. Example The following example converts the value of the 'Quantity' of a Sales Order Line, which is a decimal number, to an integer number: 10: CONVERT ATTRIB:QuantityValue CONST:System.Int32 OUTPUT: If 'QuantityValue = 12.14', the output will be '12'. Note The repository of the attribute is Crm.Sales.SalesOrderLines More Examples Convert a Value of a Custom Property to a Number"
  },
  "advanced/user-calculated-attributes/operators/count.html": {
    "href": "advanced/user-calculated-attributes/operators/count.html",
    "title": "COUNT - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "COUNT - Calculated Attribute Operator Specification Value Description Gets the number of elements contained in the list. Parameter 1 Name list Parameter 1 Type list - repository, child. Parameter 2 Name - Parameter 2 Type - Parameter 3 Name - Parameter 3 Type - Return Value int Introduced In Version 2020.1 Example The following example returns the number of lines in the current document (SalesOrder): 10: COUNT CHILD:Lines Note The repository of the attribute is Crm.Sales.SalesOrders If we want to expand the example and if we want to get the number of lines with quantity greater than or equal to 10, the following attribute would do the job: 10: COUNT EXP:20 20: FILTER CHILD:Lines EXP:30 30: GTE ATTRIB:QuantityValue CONST:10.00"
  },
  "advanced/user-calculated-attributes/operators/divide.html": {
    "href": "advanced/user-calculated-attributes/operators/divide.html",
    "title": "DIVIDE - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "DIVIDE - Calculated Attribute Operator Specification Value Name DIVIDE Description Divide one number by second number. Parameter 1 Name Number1 Parameter 1 Type numeric type - int, double or decimal Parameter 2 Name Number2 Parameter 2 Type numeric type - int, double or decimal Parameter 3 Name Parameter 3 Type Return Value Number1 / Number2 Note Ensure that the numbers of both parameters are from the the same type. For example, Parameter 1 and Parameter 2 must be both integers, doubles, or decimals. Example 10: DIVIDE ATTRIB:QuantityValue CONST:2.00 OUTPUT: If 'QuantityValue = 6.00', the output will be '3.00'. Note The repository of the attribute is Crm.Sales.SalesOrderLines More Examples Calculate StandartPricePerLot Based on the Ingredients and the Operations in the Recipe"
  },
  "advanced/user-calculated-attributes/operators/equal.html": {
    "href": "advanced/user-calculated-attributes/operators/equal.html",
    "title": "EQUAL - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "EQUAL - Calculated Attribute Operator Specification Value Name EQUAL Description Checks if two values are equal. If they are equal, the return value is True, else - the return value is False. Parameter 1 Name Value1 Parameter 1 Type numeric type - int, double or decimal; string; Parameter 2 Name Value2 Parameter 2 Type numeric type - int, double or decimal; string; Parameter 3 Name Parameter 3 Type Return Value boolean (True or False) Note Ensure that the values which are compared up have the same type. For example, Parameter 1 and Parameter 2 must be both integers, or doubles, or decimals, or strings. Example 10: EQUAL ATTRIB:LineNo CONST:30 OUTPUT: If 'LineNo = 30', the output will be 'True'. If 'LineNo = 10', the output will be 'False'. Note The repository of the attribute is Crm.Sales.SalesOrderLines More Examples Check If The Quantity Is A Whole Number Check Whether the Releasing of the Document Is First or Not Get Current Availabilities of a Product"
  },
  "advanced/user-calculated-attributes/operators/filter.html": {
    "href": "advanced/user-calculated-attributes/operators/filter.html",
    "title": "FILTER - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "FILTER - Calculated Attribute Operator Specification Value Name FILTER Description Filters the specified list by the condition. Parameter 1 Name list Parameter 1 Type list of objects Parameter 2 Name condition Parameter 2 Type boolean Parameter 3 Name Parameter 3 Type Return Value Returns sub-list, which meets the condition. Example The following example returns a list with all of lines in the current document (SalesOrder) whose quantity is '1.00': 10: FILTER CHILD:Lines EXP:30 30: EQUAL ATTRIB:QuantityValue CONST:1.00 Note The repository of the attribute is Crm.Sales.SalesOrders"
  },
  "advanced/user-calculated-attributes/operators/first.html": {
    "href": "advanced/user-calculated-attributes/operators/first.html",
    "title": "FIRST - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "FIRST - Calculated Attribute Operator Specification Value Name FIRST Description Returns the first element in the list. Parameter 1 Name list Parameter 1 Type list of objects Parameter 2 Name Parameter 2 Type Parameter 3 Name Parameter 3 Type Return Value Returns the first element of list. Note The FIRST operator returns the first met element of the list, but the criateria about which element is actually first may not match your expectations. If the sorting of the elements matters, please use in combinations with the SORT - Calculated Attribute Operator and ORDERBY - Calculated Attribute Operator operators. Example The following example returns the first met line of the current document (SalesOrder): 10: FIRST CHILD:Lines Note The repository of the attribute is Crm.Sales.SalesOrders If we want to expand the example we can sort the line ascending by line number. This way the atrribute will return the line with lowest line number: 10: FIRST EXP:20 20: SORT CHILD:Lines ATTR:LineNo CONST:ASC"
  },
  "advanced/user-calculated-attributes/operators/floor.html": {
    "href": "advanced/user-calculated-attributes/operators/floor.html",
    "title": "FLOOR - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "FLOOR - Calculated Attribute Operator Specification Value Name FLOOR Description Returns the largest integer less than or equal to the specified number. Parameter 1 Name Number1 Parameter 1 Type double or decimal Parameter 2 Name Parameter 2 Type Parameter 3 Name Parameter 3 Type Return Value Returns the largest integer less than or equal to Number1. Example The following example gets the largest integer that is less than or equal to 'Quantity' of a Sales Order Line: 10: FLOOR ATTRIB:QuantityValue OUTPUT: If 'QuantityValue = 14.85', the output will be '14'. If 'QuantityValue = 14', the output will be '14'. Note The repository of the attribute is Crm.Sales.SalesOrderLines"
  },
  "advanced/user-calculated-attributes/operators/formatstring.html": {
    "href": "advanced/user-calculated-attributes/operators/formatstring.html",
    "title": "FORMATSTRING - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "FORMATSTRING - Calculated Attribute Operator Specification Value Description Returns the specified object, formatted by the specified rules. Parameter 1 Name Param1 Parameter 1 Type object (any type) Parameter 2 Name Format Parameter 2 Type constant - the format argument must contain a valid .NET Framework format string, either as a standard format string (for example, \"C\" or \"D\") or as a pattern of custom characters for dates and numeric values (for example, \"MMMM DD, yyyy (dddd)\"). For more information about the supported format specifiers, see @(Format Specifiers). Parameter 3 Name - Parameter 3 Type - Return Value Param1 as a string formatted by the rule in Format. Note For more information about the supported format specifiers, see @(Format Specifiers). Example Here are some examples of the diffrent formats and format specifiers: 10: FORMATSTRING CONST:DocumentDate CONST:yyyy MM dddd OUTPUT: If 'DocumentDate = 2020-03-15', the output will be '2020 03 Sunday'. ( the language of the day of the week depends on the local regional settings ) 10: FORMATSTRING ATTRIB:QuantityValue CONST:n6 OUTPUT: If 'QuantityValue = 150.00', the output will be '150,000000'. ( the decimal symbol separator depends on the local regional settings ) 10: FORMATSTRING ATTRIB:LineAmountValue CONST:C OUTPUT: If 'LineAmountValue = 150.00', the output will be '150.00 $'. ( the decimal symbol separator and the currency symbol depends on the local regional settings ) Note The repository of the attribute is Crm.Sales.SalesOrderLines"
  },
  "advanced/user-calculated-attributes/operators/getobjvalue.html": {
    "href": "advanced/user-calculated-attributes/operators/getobjvalue.html",
    "title": "GETOBJVALUE - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "GETOBJVALUE - Calculated Attribute Operator Specification Value Description Gets the specified value from the specified object. This operator is used when the user wants the retrieve a value from object different than the current one. The current object is listed in the 'Repository Name' field in the current row. Parameter 1 Name obj Parameter 1 Type object Parameter 2 Name value Parameter 2 Type attribute value Parameter 3 Name - Parameter 3 Type - Return Value Returns value from obj. Example The following example returns the value of the field 'Default Delivery Term Days' set in the definition of the Customer set the current Sales Order: 10: GETOBJVALUE REF:Customer ATTRIB:DefaultDeliveryTermDays OUTPUT: If 'DefaultDeliveryTermDays = 5', the output will be '5'. Note The repository of the attribute is Crm.Sales.SalesOrders More Examples Check If a Value of a Field Is Changed in the Adjustment Document Get Value And Description Of Referent Object"
  },
  "advanced/user-calculated-attributes/operators/getvalue.html": {
    "href": "advanced/user-calculated-attributes/operators/getvalue.html",
    "title": "GETVALUE - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "GETVALUE - Calculated Attribute Operator Specification Value Description Gets the value from the current object. Parameter 1 Name Value Parameter 1 Type attribute value Parameter 2 Name - Parameter 2 Type - Parameter 3 Name - Parameter 3 Type - Return Value Value Example The following example returns the value of the Notes of the current Sales Order Line: 10: GETVALUE ATTRIB:Notes OUTPUT: If 'Notes = Apple', the output will be 'Apple'. Note The repository of the attribute is Crm.Sales.SalesOrderLiness"
  },
  "advanced/user-calculated-attributes/operators/gt.html": {
    "href": "advanced/user-calculated-attributes/operators/gt.html",
    "title": "GT - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "GT - Calculated Attribute Operator Specification Value Description Checks if an attribute value is greater than another attribute's value (or a constant). Parameter 1 Name attribute1 Parameter 1 Type numeric (int, double, decimal) or datetime type Parameter 2 Name attribute2 Parameter 2 Type numeric (int, double, decimal) or datetime type Parameter 3 Name - Parameter 3 Type - Return Value If attribute1 > attribute2 the returned value is True, if else - the operator returns False. Note Ensure that the attributes which are compared have the same type. For example, Parameter 1 and Parameter 2 must be both integers, or doubles, or decimals, or datetime. Example 10: GT ATTRIB:LineNo CONST:30 OUTPUT: If 'LineNo = 40', the output will be 'True'. If 'LineNo = 30', the output will be 'False'. If 'LineNo = 20', the output will be 'False'. Note The repository of the attribute is Crm.Sales.SalesOrderLines More Examples Compare Unit Price And Standard Unit Price"
  },
  "advanced/user-calculated-attributes/operators/gte.html": {
    "href": "advanced/user-calculated-attributes/operators/gte.html",
    "title": "GTE - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "GTE - Calculated Attribute Operator Specification Value Description Checks if an attribute value is greater than or equal to another attribute's value (or a constant). Parameter 1 Name attribute1 Parameter 1 Type numeric (int, double, decimal) or datetime type Parameter 2 Name attribute2 Parameter 2 Type numeric (int, double, decimal) or datetime type Parameter 3 Name - Parameter 3 Type - Return Value If attribute1 >= attribute2 the returned value is True, if else - the operator returns False. Note Ensure that the attributes which are compared have the same type. For example, Parameter 1 and Parameter 2 must be both integers, or doubles, or decimals, or datetime. Example 10: GT ATTRIB:LineNo CONST:30 OUTPUT: If 'LineNo = 40', the output will be 'True'. If 'LineNo = 30', the output will be 'True'. If 'LineNo = 20', the output will be 'False'. Note The repository of the attribute is Crm.Sales.SalesOrderLines"
  },
  "advanced/user-calculated-attributes/operators/iif.html": {
    "href": "advanced/user-calculated-attributes/operators/iif.html",
    "title": "IIF - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "IIF - Calculated Attribute Operator Specification Value Description Depending on a specified condition, returns the second or the third argument. Parameter 1 Name Condition Parameter 1 Type Boolean Parameter 2 Name TrueValue Parameter 2 Type any type Parameter 3 Name FalseValue Parameter 3 Type any type Return Value When Condition is True, returns TrueValue. When Condition is False, returns FalseValue Example 10: IIF EXP:20 CONST:'Quantity is 1.00' CONST: 'Quantity is not 1.00' 20: EQUAL ATTRIB:QuantityValue CONST:1.00 OUTPUT: If 'QuantityValue = 1.00', the output will be 'Quantity is 1.00'. If 'QuantityValue = 2.00', the output will be 'Quantity is not 1.00'. Note The repository of the attribute is Crm.Sales.SalesOrderLines More Examples Compare Unit Price And Standard Unit Price Check If a Value of a Field Is Changed in the Adjustment Document"
  },
  "advanced/user-calculated-attributes/operators/in.html": {
    "href": "advanced/user-calculated-attributes/operators/in.html",
    "title": "IN - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "IN - Calculated Attribute Operator Specification Value Description Determines whether a specified value matches any value in a list. The operator is used in combination with SELECT and FILTER as condition. It can be used to search through values of string and guid types. It cannot be used to search through numeric values or dates. Parameter 1 Name param Parameter 1 Type String or Guid Parameter 2 Name list of values Parameter 2 Type the values must be equal to the param type Parameter 3 Name - Parameter 3 Type - Return Value True or False depending on if param equals a member of the list of values. Note Single quotes are only necessary when the values which we compare to are strings. Example The following example checks whether there are Sales Orders with Notes 'Apple' and 'Pear' into the datatabase: 10: SELECT REPO:Crm.Sales.SalesOrders EXP:20 20: WHERE EXP:30 30: IN ATTRIB:Notes CONST:'Apple', 'Pear' OUTPUT: If there is atleast one Sales Order with 'Notes = Apple', the output will be 'True'. If there is atleast one Sales Order with 'Notes = Pear', the output will be 'True'. If there are NO Sales Orders with 'Notes = Apple OR Pear', the output will be 'False'."
  },
  "advanced/user-calculated-attributes/operators/incnum.html": {
    "href": "advanced/user-calculated-attributes/operators/incnum.html",
    "title": "INCNUM - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "INCNUM - Calculated Attribute Operator Specification Value Description The INCNUM operator increases the value of its parameter by 1. The operator can be used only for String values whоose last character is a number. The INCNUM operator can be used for consecutive numbering of documents and nomenclatures. Parameter 1 Name Value Parameter 1 Type string Parameter 2 Name - Parameter 2 Type - Parameter 3 Name - Parameter 3 Type - Return Value ++Value Note If you try to increment the string value whоose last character is a number 'AA01', the incrementation will be successful and result will be 'AA02'; If you try to increment a value whoоse type is Decimal, Int or Date, the incrementation won't be successful and the Calculated Attribute won't be compilated; If the value is a string whose last character is not a number ('AA', for example), the incrementation won't be successful. Examples The following example shows how to increase the LotNumber of the Lot by 1 with the INCNUM operator: 10: INCNUM ATTRIB:Number OUTPUT: If 'Number = 0001'', the output will be '0002'. If 'Number = AA01'', the output will be 'AA02'. Note The repository of the attribute is Logistics.Inventory.Lots"
  },
  "advanced/user-calculated-attributes/operators/left.html": {
    "href": "advanced/user-calculated-attributes/operators/left.html",
    "title": "LEFT - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "LEFT - Calculated Attribute Operator Specification Value Description Gets the first n characters of a string (starting from left). Parameter 1 Name String Parameter 1 Type string Parameter 2 Name NumChars Parameter 2 Type int Parameter 3 Name - Parameter 3 Type - Return Value Returns the first Numchars characters of the String. Example The following example returns the first 3 characters of the Notes set in the Sales Order: 10: LEFT ATTRIB:Notes CONST:3 OUTPUT: If 'Notes = Apple', the output will be 'App'. If 'Notes = I am', the output will be 'I a'. Note The repository of the attribute is Crm.Sales.SalesOrders"
  },
  "advanced/user-calculated-attributes/operators/len.html": {
    "href": "advanced/user-calculated-attributes/operators/len.html",
    "title": "LEN - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "LEN - Calculated Attribute Operator Specification Value Description Returns the length of the string. Parameter 1 Name String Parameter 1 Type string Parameter 2 Name - Parameter 2 Type - Parameter 3 Name - Parameter 3 Type - Return Value Returns the length of a string. Note The spaces are included when calculating the length. Example The following example returns the lenght of the Notes set in the Sales Order: 10: LEN ATTRIB:Notes OUTPUT: If 'Notes = Apple', the output will be '5'. If 'Notes = I am', the output will be '4'. Note The repository of the attribute is Crm.Sales.SalesOrders"
  },
  "advanced/user-calculated-attributes/operators/like.html": {
    "href": "advanced/user-calculated-attributes/operators/like.html",
    "title": "LIKE - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "LIKE - Calculated Attribute Operator Specification Value Description Searches for a specified pattern in a string. It is usually used in a combination with the wildcars '%' and '_': The '%' symbol is used to define 0 or more characters before and after the searched string. '_' is used to define specifically 1 character. Parameter 1 Name String1 Parameter 1 Type string Parameter 2 Name Mask Parameter 2 Type string Parameter 3 Name - Parameter 3 Type - Return Value True in case String1 matches Mask. False in case String1 does not match the Mask. Examples 'a%' → Finds any values that start with \"a\". '%a' → Finds any values that end with \"a\". '%a%' → Finds any values that have \"a\" in any position. '_a%' → Finds any values that have \"a\" in the second position. 'a_%_%' → Finds any values that start with \"a\" and are at least 3 characters in length. 'a%o' → Finds any values that start with \"a\" and ends with \"o\". The following example returns True if the the string contains 'Apple' and after 'Apple' there is exactly on character: 10 LIKE ATTRIB:Notes CONST:%Apple_ OUTPUT: If 'Notes = Apples', the output will be 'True'. If 'Notes = Green Apples', the output will be 'True'. If 'Notes = apples', the output will be 'False'. If 'Notes = Apple', the output will be 'False'. If 'Notes = Apples', the output will be 'False'. Note The repository of the attribute is Crm.Sales.SalesOrders"
  },
  "advanced/user-calculated-attributes/operators/list.html": {
    "href": "advanced/user-calculated-attributes/operators/list.html",
    "title": "LIST - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "LIST - Calculated Attribute Operator Specification Value Description Returns a list with the string values of the specified attribute of the list of objects.The values in the created list are separated by a separator. If there is no indicated separator, then the list is separated with \", \" (comma + space) by default. Parameter 1 Name list Parameter 1 Type list of objects Parameter 2 Name attribute Parameter 2 Type attribute of the object // An attribute of a referent object could be used as well. For more information, see the example below. Parameter 3 Name separator (optional) // If Parameter3 is not specified, then the default separator is \", \" (comma + space) Parameter 3 Type string Return Value (attributeValue1, attributeValue2, ...) Introduced In Version 2019.1 Example 10: LIST CHILD:Lines EXP:20 CONST:'; ' 20: GETOBJVALUE REF:Product ATTRIB:Name OUTPUT: 'ProductsName1; ProductName2 ...' Note The repository of the attribute is Crm.Sales.SalesOrders"
  },
  "advanced/user-calculated-attributes/operators/lt.html": {
    "href": "advanced/user-calculated-attributes/operators/lt.html",
    "title": "LT - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "LT - Calculated Attribute Operator Specification Value Description Checks if an attribute value is smaller than another attribute's value (or a constant). Parameter 1 Name attribute1 Parameter 1 Type numeric (int, double, decimal) or datetime type Parameter 2 Name attribute2 Parameter 2 Type numeric (int, double, decimal) or datetime type Parameter 3 Name - Parameter 3 Type - Return Value If attribute1 < attribute2 the returned value is True, if else - the operator returns False. Note Ensure that the attributes which are compared have the same type. For example, Parameter 1 and Parameter 2 must be both integers, or doubles, or decimals, or datetime. Example 10: LT ATTRIB:LineNo CONST:30 OUTPUT: If 'LineNo = 20', the output will be 'True'. If 'LineNo = 30', the output will be 'False'. If 'LineNo = 40', the output will be 'False'. Note The repository of the attribute is Crm.Sales.SalesOrderLines"
  },
  "advanced/user-calculated-attributes/operators/lte.html": {
    "href": "advanced/user-calculated-attributes/operators/lte.html",
    "title": "LTE - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "LTE - Calculated Attribute Operator Specification Value Description Checks if an attribute value is smaller than or equal to another attribute's value (or a constant). Parameter 1 Name attribute1 Parameter 1 Type numeric (int, double, decimal) or datetime type Parameter 2 Name attribute2 Parameter 2 Type numeric (int, double, decimal) or datetime type Parameter 3 Name - Parameter 3 Type - Return Value If attribute1 <= attribute2 the returned value is True, if else - the operator returns False. Note Ensure that the attributes which are compared have the same type. For example, Parameter 1 and Parameter 2 must be both integers, or doubles, or decimals, or datetime. See the example in @(Compare Unit Price And The Standard Unit Price). Example 10: LTE ATTRIB:LineNo CONST:30 OUTPUT: If 'LineNo = 20', the output will be 'True'. If 'LineNo = 30', the output will be 'True'. If 'LineNo = 40', the output will be 'False'. Note The repository of the attribute is Crm.Sales.SalesOrderLines More Examples Compare Unit Price And Standard Unit Price"
  },
  "advanced/user-calculated-attributes/operators/multiply.html": {
    "href": "advanced/user-calculated-attributes/operators/multiply.html",
    "title": "MULTIPLY - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "MULTIPLY - Calculated Attribute Operator Specification Value Description Multiply the specified numbers. Parameter 1 Name Number1 Parameter 1 Type numeric type - int, double or decimal Parameter 2 Name Number2 Parameter 2 Type numeric type - int, double or decimal Parameter 3 Name - Parameter 3 Type - Return Value Number1 * Number2 Note Ensure that the numbers of both parameters are from the the same type. For example, Parameter 1 and Parameter 2 must be both integers, doubles, or decimals. Example 10: MULTIPLY ATTRIB:QuantityValue CONST:2.00 OUTPUT: If 'QuantityValue = 3.00', the output will be '6.00'. Note The repository of the attribute is Crm.Sales.SalesOrderLines More Examples Total Quantity And Scrap Quantity In Recipe Ingredients ."
  },
  "advanced/user-calculated-attributes/operators/not.html": {
    "href": "advanced/user-calculated-attributes/operators/not.html",
    "title": "NOT - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "NOT - Calculated Attribute Operator Specification Value Description Returns logical negation on an expression. Parameter 1 Name Condition Parameter 1 Type boolean Parameter 2 Name - Parameter 2 Type - Parameter 3 Name - Parameter 3 Type - Return Value False - if Condition is True; True - if Condition is False Example 10: NOT EXP:20 20: EQUAL ATTRIB:LineNo CONST:10 OUTPUT: If 'LineNo = 10', the output will be 'False'. If 'LineNo = 20', the output will be 'True'. Note The repository of the attribute is Crm.Sales.SalesOrderLines"
  },
  "advanced/user-calculated-attributes/operators/or.html": {
    "href": "advanced/user-calculated-attributes/operators/or.html",
    "title": "OR - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "OR - Calculated Attribute Operator Specification Value Description Checks if any of the conditions are True. If so - the operator returns True. If all specified conditions are not True, the operator returns False. Parameter 1 Name Condition1 Parameter 1 Type boolean Parameter 2 Name Condition2 Parameter 2 Type boolean Parameter 3 Name - Parameter 3 Type - Return Value Condition1 OR Condition2 Example 10: OR EXP:20 EXP:30 20: EQUAL ATTRIB:LineNo CONST:10 30: EQUAL ATTRIB:LineNo CONST:20 OUTPUT: If 'LineNo = 10', the output will be 'True'. If 'LineNo = 20', the output will be 'True'. If 'LineNo = 30', the output will be 'False'. Note The repository of the attribute is Crm.Sales.SalesOrderLines"
  },
  "advanced/user-calculated-attributes/operators/orderby.html": {
    "href": "advanced/user-calculated-attributes/operators/orderby.html",
    "title": "ORDERBY - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "ORDERBY - Calculated Attribute Operator Specification Value Description Clause, that specifies a column or expression on which the query result set is sorted. Used as a clause of SELECT. Parameter 1 Name attribute Parameter 1 Type any type Parameter 2 Name order (optional) //if not set, the default is ASC Parameter 2 Type const - ASC or DESC Parameter 3 Name inner clauses (optional) Parameter 3 Type expression Return Value Ordered result set of a query by the specified column or expression. Introduced In Version (In implementation) Example 10: SELECT REPO:General.Products.Products EXP:20 20: TOP CONST:5 EXP:30 30: ORDERBY ATTR:PartNumber CONST:ASC EXP:40 40: WHERE ..."
  },
  "advanced/user-calculated-attributes/operators/Overview.html": {
    "href": "advanced/user-calculated-attributes/operators/Overview.html",
    "title": "Operators | ERP.net Tech Docs",
    "keywords": "Operators CONVERT - Calculated Attribute Operator FIRST - Calculated Attribute Operator GETOBJVALUE - Calculated Attribute Operator INCNUM - Calculated Attribute Operator LEFT - Calculated Attribute Operator ADD - Calculated Attribute Operator ADDDAYS - Calculated Attribute Operator AND - Calculated Attribute Operator CAST - Calculated Attribute Operator CEILING - Calculated Attribute Operator CONCAT - Calculated Attribute Operator COUNT - Calculated Attribute Operator DIVIDE - Calculated Attribute Operator EQUAL - Calculated Attribute Operator FILTER - Calculated Attribute Operator FLOOR - Calculated Attribute Operator FORMATSTRING - Calculated Attribute Operator GETVALUE - Calculated Attribute Operator GT - Calculated Attribute Operator GTE - Calculated Attribute Operator IIF - Calculated Attribute Operator IN - Calculated Attribute Operator LEN - Calculated Attribute Operator LIST - Calculated Attribute Operator LT - Calculated Attribute Operator LTE - Calculated Attribute Operator MULTIPLY - Calculated Attribute Operator NOT - Calculated Attribute Operator OR - Calculated Attribute Operator ORDERBY - Calculated Attribute Operator POS - Calculated Attribute Operator REGEX - Calculated Attribute Operator REPLACE - Calculated Attribute Operator RIGHT - Calculated Attribute Operator ROUND - Calculated Attribute Operator SELECT - Calculated Attribute Operator SORT - Calculated Attribute Operator SUBSTRING - Calculated Attribute Operator SUM - Calculated Attribute Operator TODAY - Calculated Attribute Operator TOLOWER - Calculated Attribute Operator TOP - Calculated Attribute Operator TOUPPER - Calculated Attribute Operator WHERE - Calculated Attribute Operator"
  },
  "advanced/user-calculated-attributes/operators/pos.html": {
    "href": "advanced/user-calculated-attributes/operators/pos.html",
    "title": "POS - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "POS - Calculated Attribute Operator Specification Value Description Searches term in string, returns first position or -1 if not found. Parameter 1 Name term Parameter 1 Type string Parameter 2 Name string Parameter 2 Type string Parameter 3 Name - Parameter 3 Type - Return Value Returns the position of term in string. If there are more than one occurrences of term in string, returns the first position. If term is not part of string, returns -1."
  },
  "advanced/user-calculated-attributes/operators/regex.html": {
    "href": "advanced/user-calculated-attributes/operators/regex.html",
    "title": "REGEX - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "REGEX - Calculated Attribute Operator Specification Value Description Returns whether the string matches the regex mask. Parameter 1 Name String1 Parameter 1 Type string Parameter 2 Name Mask Parameter 2 Type regex expression Parameter 3 Name - Parameter 3 Type - Return Value True - if String1 matches Mask; False - if String1 does not match the Mask ."
  },
  "advanced/user-calculated-attributes/operators/replace.html": {
    "href": "advanced/user-calculated-attributes/operators/replace.html",
    "title": "REPLACE - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "REPLACE - Calculated Attribute Operator Specification Value Description Replaces old with new value in string. Parameter 1 Name String1 Parameter 1 Type string Parameter 2 Name OldValue Parameter 2 Type string Parameter 3 Name NewValue Parameter 3 Type string Return Value A string that is equivalent to String1 except that all instances of OldValue are replaced with NewValue. If OldValue is not found in String1, the operator returns String1."
  },
  "advanced/user-calculated-attributes/operators/right.html": {
    "href": "advanced/user-calculated-attributes/operators/right.html",
    "title": "RIGHT - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "RIGHT - Calculated Attribute Operator Specification Value Description Gets the last n characters of a string. Parameter 1 Name String Parameter 1 Type string Parameter 2 Name NumChars Parameter 2 Type int Parameter 3 Name - Parameter 3 Type - Return Value Returns the last NumChars characters of String."
  },
  "advanced/user-calculated-attributes/operators/round.html": {
    "href": "advanced/user-calculated-attributes/operators/round.html",
    "title": "ROUND - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "ROUND - Calculated Attribute Operator Specification Value Description Rounds mathematically with the specified precision. Parameter 1 Name Number Parameter 1 Type double or decimal Parameter 2 Name DecimalPlaces (optional) Parameter 2 Type int Parameter 3 Name - Parameter 3 Type - Return Value Number, rounded up to the digit, specified in DecimalPlaces Note Parameter 2 is optional. If Parameter 2 is not set, it is considered 0 (zero)."
  },
  "advanced/user-calculated-attributes/operators/select.html": {
    "href": "advanced/user-calculated-attributes/operators/select.html",
    "title": "SELECT - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "SELECT - Calculated Attribute Operator Specification Value Description Gets the objects matching the clauses. Parameter 1 Name Repository Parameter 1 Type repository Parameter 2 Name Clauses (optional, but highly advisable) // For more information see the 'FILTER AND WHERE filtering of a SELECT' section below) Parameter 2 Type operators ( WHERE , TOP ) Parameter 3 Name - Parameter 3 Type - Return Value Returns a list of objects from Repository matching Clauses. Note The SELECT operator returns limited number of records - 20 000. This limit is only for the returned records count, so as setting much filters as possible are highly recommended (filters in the WHERE clause). Example The WHERE clause of the SELECT statement supports the following operators: AND TOP EQUAL GT GTE LT LTE The operators which are not supported by the SELECT operator but may be used by the FILTER operator are: NOT OR LIKE FILTER AND WHERE filtering of a SELECT Having this in mind is really important when extracting lists from the database. When using SELECT operator we send a request to the database and it is preferred to set as much WHERE filters as possible. But if there is a filter, which is not supported by the EnterpriseOne Server, then the list that is returned by the select may be filtered additionally with the FILTER operator. The disadvantages are that the SELECT statement make a direct request to the database, which may reflect on the productivity and may slow down the calculation of the attribute. When using the SELECT operator the user has to apply as much WHERE filters as possible, because this would limit the amount of data which would be extracted from the database into the client. And then, if the select statement does not provide enough filters, the result from the select may be filtered by the FILTER operator which operates on the already loaded data in the client. Here are some examples to picture the information by far: If there is a need of a list of documents which DocumentTypeId is equal to 'bbd8e7ae-c0e0-4c1b-8730-7d68fa52971e' or '89ca5ca4-ad57-44c7-9b33-2ff44e054bff'. The documents are Work Orders. So the following calculated attribute would be incorrect: 10: SELECT REPO:Production.ShopFloor.WorkOrders EXP:20 20: WHERE EXP:30 30: OR EXP:40 EXP:50 40: EQUAL CONST:bbd8e7ae-c0e0-4c1b-8730-7d68fa52971e 45: ATTRIB:DocumentTypeId CONST:System.Guid 50: EQUAL EXP:45 CONST:89ca5ca4-ad57-44c7-9b33-2ff44e054bff This calculated attribute is incorrect and would return errors when used. So, we can set calculated attribute which selects the work orders and then to filter the list, which the SELECT operator returned and apply the FILTER operator for more precision. So the correct calculated attribute is as follows: 10: FILTER EXP:20 EXP:30 20: SELECT REPO:Production.ShopFloor.WorkOrders 30: OR EXP:40 EXP:50 40: EQUAL EXP:45 CONST:bbd8e7ae-c0e0-4c1b-8730-7d68fa52971e 45: CAST ATTRIB:DocumentTypeId CONST:System.Guid 50: EQUAL ATTRIB:DocumentTypeId CONST:89ca5ca4-ad57-44c7-9b33-2ff44e054bff"
  },
  "advanced/user-calculated-attributes/operators/sort.html": {
    "href": "advanced/user-calculated-attributes/operators/sort.html",
    "title": "SORT - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "SORT - Calculated Attribute Operator Specification Value Description Sorts the input list according to the specified attribute and order. Parameter 1 Name list Parameter 1 Type list Parameter 2 Name attribute Parameter 2 Type any type Parameter 3 Name order (optional) Parameter 3 Type string - ASC or DESC Return Value Returns the input list from parameter1, sorted by the specified attribute and in the specified order. If not specified, the default order is ascending (ASC) Example Take the last line of a sales order (ordered by LineNo), which has quantity >= 0: SalesOrder=> 10: FIRST EXP:20 20: SORT EXP:30 ATTR:LineNo CONST:DESC 30: FILTER CHILD:Lines EXP:40 40: GTE ATTR:QuantityValue CONST:0"
  },
  "advanced/user-calculated-attributes/operators/substring.html": {
    "href": "advanced/user-calculated-attributes/operators/substring.html",
    "title": "SUBSTRING - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "SUBSTRING - Calculated Attribute Operator Specification Value Description Returns a sub-string with the specified start and length. Parameter 1 Name string Parameter 1 Type string Parameter 2 Name start Parameter 2 Type int Parameter 3 Name len Parameter 3 Type int Return Value Part of string, starting from position start and with length of len."
  },
  "advanced/user-calculated-attributes/operators/sum.html": {
    "href": "advanced/user-calculated-attributes/operators/sum.html",
    "title": "SUM - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "SUM - Calculated Attribute Operator Specification Value Description Returns the sum of Value for all elements in the specified list. Parameter 1 Name List Parameter 1 Type list of objects Parameter 2 Name Value Parameter 2 Type numeric type - int, double or decimal Parameter 3 Name - Parameter 3 Type - Return Value Returns the sum of the Values of the elements in the List. Example See the example in Sales Amounts Of The Customer For The Last 30 Days"
  },
  "advanced/user-calculated-attributes/operators/today.html": {
    "href": "advanced/user-calculated-attributes/operators/today.html",
    "title": "TODAY - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "TODAY - Calculated Attribute Operator Specification Value Description This operator returns today's date, according to the server's regional settings. Parameter 1 Name - Parameter 1 Type - Parameter 2 Name - Parameter 2 Type - Parameter 3 Name - Parameter 3 Type - Return Value Today's date"
  },
  "advanced/user-calculated-attributes/operators/tolower.html": {
    "href": "advanced/user-calculated-attributes/operators/tolower.html",
    "title": "TOLOWER - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "TOLOWER - Calculated Attribute Operator Specification Value Description Returns the string, converted to lowercase. Parameter 1 Name string Parameter 1 Type string Parameter 2 Name - Parameter 2 Type - Parameter 3 Name - Parameter 3 Type - Return Value string (in lowercase)"
  },
  "advanced/user-calculated-attributes/operators/top.html": {
    "href": "advanced/user-calculated-attributes/operators/top.html",
    "title": "TOP - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "TOP - Calculated Attribute Operator Specification Value Description Clause, returning only the first n elements Parameter 1 Name Number Parameter 1 Type int Parameter 2 Name Clauses Parameter 2 Type operators WHERE Parameter 3 Name - Parameter 3 Type - Return Value The first Number elements. Note The TOP operator is used with the WHERE operator."
  },
  "advanced/user-calculated-attributes/operators/toupper.html": {
    "href": "advanced/user-calculated-attributes/operators/toupper.html",
    "title": "TOUPPER - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "TOUPPER - Calculated Attribute Operator Specification Value Description Returns the string, converted to uppercase. Parameter 1 Name string Parameter 1 Type string Parameter 2 Name - Parameter 2 Type - Parameter 3 Name - Parameter 3 Type - Return Value string (in uppercase)"
  },
  "advanced/user-calculated-attributes/operators/where.html": {
    "href": "advanced/user-calculated-attributes/operators/where.html",
    "title": "WHERE - Calculated Attribute Operator | ERP.net Tech Docs",
    "keywords": "WHERE - Calculated Attribute Operator Specification Value Description Clause which filters by the specified conditions. The second and the third parameters are optional. Parameter 1 Name Condition1 Parameter 1 Type boolean Parameter 2 Name boolean Parameter 2 Type Condition2 (optional) Parameter 3 Name boolean Parameter 3 Type Condition3 (optional) Return Value Clause, filtered by Condition1 AND Condition2 AND Condition3 Note The operator is used with operator SELECT ."
  },
  "advanced/user-calculated-attributes/overview.html": {
    "href": "advanced/user-calculated-attributes/overview.html",
    "title": "User Calculated Attributes | ERP.net Tech Docs",
    "keywords": "User Calculated Attributes User Calculated Attributes are user-defined objects, which extend the system entities. Calculated attributes are defined like formulas. When the value of a calculated attribute is requested, it is calculated \"on the fly\", in real time. Note Calculated attribute formulas are compiled to native executable format. Their calculation speed is very similar to the speed of the system defined calculated attributes. Example - Get default payment term days Suppose, that in a Sales Order, we want to display the customers default payment term (in days). In the Sales Order, we can define the following Calculated Attribute: No Operation Param1 Param2 Param3 10 GETREF REF:Customer ATTRIB:DefaultPaymentTermDays Explanation: GETREF - gets information from a related entity. The related entity is specified in Param1. The desired information is specified in Param2. Line number 10 is the only line in the calculated attribute The return value is the value of the attribute DefaultPaymentTermDays in the Customer entity. Example - Complex filter and summation The following calculated attribute sums all sales order lines, whose product: has a user data attribute, called \"CustPropPrj\", equal to '500' has a Name, containing the word 'Tool' No Operation Param1 Param2 Param3 10 SUM EXP:20 ATTRIB:LineAmount 20 FILTER CHILD:Lines EXP:30 30 IN ATTRIB:Product EXP:40 40 FILTER QUERY:Gen_Products EXP:50 50 AND EXP:60 EXP:70 60 EQUALS ATTRIB:CustPropPrj CONST:500 70 LIKE ATTRIB:Name CONST:'Tool' Explanation: Line 10: Iterates through the data set, specified on Line 20 (EXP:20), then SUMs the attribute LineAmount. Line 20: Filters the Lines subset with the filter, specified in Line 30 (EXP:30). Line 30: Creates a filter, which will be satisfied only by products, specified in the query on Line 40 (EXP:40). Line 40: Creates a query, which filters the products with the condition, specified on Line 50. Line 50: Specifies that the condition is comprised of two conditions, linked with AND. Line 60: Specifies that the first condition is the value of an attribute, called CustPropPrj should be 500. Line 70: Specifies that the second condition is that the Name of the product should contain 'Tool'. This example demonstrates, that Calculated Attributes can calculate very complicated formulas, query the database, get related values, etc."
  },
  "advanced/user-calculated-attributes/ParameterTypes/Overview.html": {
    "href": "advanced/user-calculated-attributes/ParameterTypes/Overview.html",
    "title": "Parameter Types | ERP.net Tech Docs",
    "keywords": "Parameter Types The type of the parameter specifies how to obtain the parameter value. Several types are available: CONST - when used, indicates that the Value for this parameter type would be a constant for every calculation of the calculated attribute. For more information, see Parameter Type CONST . ATTRIB - the value of system or user-defined attribute; REF - reference to another object; CHILD - detailed objects, related to the current master object; EXP - the value of the expression with the specified number (the user specifies the number in the Value field); INPUT - the input parameter for the specified expression number (the user specifies the number in the Value field); REPO - a repository; SYS - the value of a particular system variable as Login, Today, EnterpriseCompanyId and others. The Parameter Types are used in every calculated attributes. For examples see Calculated Attributes - Examples ."
  },
  "advanced/user-calculated-attributes/ParameterTypes/ParameterTypeCONST.html": {
    "href": "advanced/user-calculated-attributes/ParameterTypes/ParameterTypeCONST.html",
    "title": "Parameter type CONST | ERP.net Tech Docs",
    "keywords": "Parameter type CONST When used, indicates that the Value for this parameter type would be a constant for every calculation of the calculated attribute. The formats of the different types of values which are entered are as follows: Value Description Example NULL null or empty value NULL Boolean true or false value True Integer a whole number (not a fractional number) that can be positive, negative, or zero 93 Decimal number, containing decimal symbol - '.' 93.012 Date date values used in the 'yyyy-MM-dd' format 2020-12-25 Guid Global Unique Identifier - used for objects identification 6B29FC40-CA47-1067-B31D-00DD010662DA String explicitly denoted string, entered in single quotation marks 'Example text.' Type used with CAST . Used for type conversions and the constant is the type to which we want to convert. System.Int32 Everything else is treated as string!"
  },
  "advanced/user-calculated-attributes/ParameterTypes/ParameterTypeSYS.html": {
    "href": "advanced/user-calculated-attributes/ParameterTypes/ParameterTypeSYS.html",
    "title": "Parameter type SYS | ERP.net Tech Docs",
    "keywords": "Parameter type SYS SYS parameter type is used for system variables. They can be applied when we need to acquire information for the current user, date, time, enterprise company and oth.. The list of those variables is as follows: Value Description Example (returned value) Login The login of the user that is currently logged in the program. admin UserId The id of the user that is currently logged in the program. 9da64839-a8d0-491d-aebb-4d18fa42b014 RoleName The name of role that is currently set for the user. Administration RoleId The role that is currently set for the user. c764ff2b-38ca-4906-893a-2a21a1691f43 Today Current date. 23.6.2017 0:00:00 Now Current date-time from the server time zone. 23.6.2017 13:25:33 UtcNow Current date-time in Coordinated Universal Time (UTC) 23.6.2017 10:25:33 EnterpriseCompanyId The id of the enterprise company that is currently set for the user. b0e80577-fbbe-4c9b-811e-20b6c6dd465f EnterpriseCompanyLocationId The id of the enterprise company location that is currently set for the user. f2947790-e21f-4def-b533-fdc00a343ce6 Example (usage): 10: GETVALUE SYS:Login The line returns the login of the user that is currently logged in the program."
  },
  "advanced/user-calculated-attributes/QA/HowToCheckIfACustomPropertyHasValue.html": {
    "href": "advanced/user-calculated-attributes/QA/HowToCheckIfACustomPropertyHasValue.html",
    "title": "How to check if a custom property has value? | ERP.net Tech Docs",
    "keywords": "How to check if a custom property has value? When there is a need to check if a custom property of an object has value, usually we can just CAST the custom property to a string and then check if it is equal to null. However, the syntax of the calculated attribute should be tailored to the specifics of the Property Type of the particular custom property. Here are examples for the different custom property types which are universal to all repositories. The custom property code which is verified is CustomProperty1. Note that when a custom property is cast to string, only its value will be processed, and not its description. Property Type is 'Text' If the Property Type of the particular custom property is 'Text' use the following expressions: 10: IIF EXP:20 CONST:'null' CONST:'not null' 20: EQUAL EXP:30 CONST:NULL 30: CAST ATTRIB:@CustomProperty1 CONST:System.String Explanation: 10: if EXP:20 is true, return the text 'null, else - return 'not null' 20: if EXP:30 is empty, return true, else - return false 30: cast CustomProperty1 to string Property Type is 'Number' or 'Date' If the Property Type of the particular custom property is 'Number' or 'Date' use the following expressions: 10: IIF EXP:20 CONST:'null' CONST:'not null' 20: OR EXP:30 EXP:40 30: EQUAL EXP:50 CONST:NULL 40: EQUAL EXP:50 CONST:'' 50: CAST ATTRIB:@CustomProperty1 CONST:System.String Explanation: 10: if EXP:20 is true, return the text 'null, else - return 'not null' 20: if EXP:30 OR EXP:40 is true, return true, else - return false 30: if EXP:50 is empty, return true, else - return false 40: if EXP:50 is an empty string, return true, else - return false 50: cast CustomProperty1 to string Property Type is 'Picture' If the Property Type of the particular custom property is 'Picture' use the following expressions: 10: IIF EXP:20 CONST:'null' CONST:'not null' 20: EQUAL EXP:30 CONST:0 30: SUM EXP:40 CONST:1 40: FILTER EXP:70 EXP:50 50: NOT EXP:60 60: EQUAL ATTRIB:Picture CONST:NULL 70: SELECT REPO:General.PropertyValues EXP:80 80: WHERE EXP: 90 EXP:100 90: EQUAL ATTRIB:PropertyId CONST:86ba82c9-8843-e611-82a1-b010410e63e2 100: EQUAL ATTRIB:EntityItemId CONST:47e225e9-f4b6-e611-af28-00155d001f28 Explanation: 10: if EXP:20 is true, return the text 'null, else - return 'not null' 20: if EXP:30 is equal to 0, return true, else - return false 30: count the records of the list returned by EXP:40 40: filter the list returned by EXP:70 by the condition of EXP:50 50: if EXP:60 is true, return false, else - return true 60: if ATTRIB:Picture is equal to NULL, return true, else - return false 70: select the records of table General.PropertyValues filtered by the clauses of EXP:80 80: if EXP:90 AND EXP:100 are true, return true, else - return false 90: if ATTRIB:PropertyId is equal to 86ba82c9-8843-e611-82a1-b010410e63e2, return true, else - return false 100: if ATTRIB: ATTRIB:EntityItemId is equal to 47e225e9-f4b6-e611-af28-00155d001f28, return true, else - return false Note EntityItemId is the Id of the actual entity (particular document, line, product) for which the value is specified."
  },
  "advanced/user-calculated-attributes/QA/HowToCheckIfAListHaveValues.html": {
    "href": "advanced/user-calculated-attributes/QA/HowToCheckIfAListHaveValues.html",
    "title": "How to check if a list have values? | ERP.net Tech Docs",
    "keywords": "How to check if a list have values? When working with lists, often there is a need to check if this list actually contains any values (records). For example - there is a calculated attribute which calculates the Quantity in the Sales Order Lines in specified measurement unit. There is always the possibility that the user enter a product which has no dimensions for the required measurement unit. In such cases, an instrument to check the lists records count is needed. The described case is solved by the following expression: SUM(List, 1) This expression returns integer value containing the number of records in the entered list. Here is an example expression and its description. This example is defined in the Sales Order header and checks if the lines contain one specific product. So the Repository of the calculated attribute is Crm.Sales.SalesOrders and its expressions are: 10: SUM EXP:20 CONST:1 20: FILTER CHILD:Lines EXP:30 30: EQUAL ATTRIB:ProductId CONST:d3d83bf0-d1fc-e611-9c53-00155d001f52 Explanation: 10: check the records count in list in expression 20 20: filter the list of Lines (detailed objects of the Sales Order object) by the filter in expression 30 30: check if the ProductId in the line is equal to Guid d3d83bf0-d1fc-e611-9c53-00155d001f52 This calculated attribute returns zero or greater value, depending on the count of the records in the Sales Order Lines with product with id of d3d83bf0-d1fc-e611-9c53-00155d001f52."
  },
  "advanced/user-calculated-attributes/QA/HowToCheckWhetherAFieldThatPointsToAReferenceObjectHasAValue.html": {
    "href": "advanced/user-calculated-attributes/QA/HowToCheckWhetherAFieldThatPointsToAReferenceObjectHasAValue.html",
    "title": "How to check whether a field that points to a reference object has a value? | ERP.net Tech Docs",
    "keywords": "How to check whether a field that points to a reference object has a value? Often when we are creating a calculated attribute and we want to get a value from a referent object, first we need to check if the current record has a reference to this object at all. A.k.a. we need to check if a particular Id field has a value or not. The recommended way to perform this validation is to check whether there is a referent object: 20 EQUAL REF:AdjustedDocument CONST:NULL ​ and NOT whether the Id fields itself is empty: 20 EQUAL ATTRIB:AdjustedDocumentId CONST:NULL The first approach is recommended because: a. the second approach may lead to incorrect results - there are cases with wrong results when this approach is used in a SELECT clause or in multiple nested calculated attributes. b. the first approach does not require type conversions - we are directly checking of there is a reference object and we don't have use CAST or CONVERT operators to match the types before the comparison."
  },
  "advanced/user-calculated-attributes/QA/HowToCreateAnOptimallyFastCalculatedAttribute.html": {
    "href": "advanced/user-calculated-attributes/QA/HowToCreateAnOptimallyFastCalculatedAttribute.html",
    "title": "How to create an optimally fast calculated attribute? | ERP.net Tech Docs",
    "keywords": "How to create an optimally fast calculated attribute? When creating a calculated attribute there are some things that are good too keep in mind in order to create an optimally fast syntax. Here we are going to describe some advices that should be followed during the design of the attribute. Generally, those advices can be summarized to: Use REF instead of SELECT If you have to use a SELECT – Use WHERE clauses instead of FILTER clauses Filter the FILTER - Filter the list returned to the FILTER as much as you can But let's get into the details. Using a REF means that we are using the collection of elements that have already been loaded in the memory. The REF connection leads only to the records that refer to by the current entity. Using a SELECT means that for each calculation of attribute the system will create a request to the server and will look through the whole table that we have selected. A single table could contain millions of records (or even more). More records inevitably means slower calculation. Like any other design when creating a calculated attribute there usually is more than one way that we can use to calculate the value especially when the calculation is a bit more complicated. Sometimes using SELECT looks like the simplest option (the fist that comes in mind) to reach the value we need, but first, we should always try to think if there is a reference connection that we can use instead in order to achieve a faster calculation. Example: Let's imagine that we need to show a field with Total Line Amount value in the Sales Order Line. Therefore we will need to calculate the Sum of the Line Amount of all Sales Order lines of the particular Sales Order. Such attribute can be created at least two ways (the repository is Crm.Sales.SalesOrderLines): Using a SELECT Using a SELECT (using all records in the Crm.Sales.SalesOrderLines table) 10 SUM EXP:20 ATTRIB:LineAmountValue 20 SELECT REPO:Crm.Sales.SalesOrderLines EXP:30 30 WHERE EXP:40 40 EQUAL ATTRIB:SalesOrderId EXP:50 50 GETOBJVALUE INPUT:10 ATTRIB:SalesOrderId Using a REF Using a REF (using only the lines of the current SalesOrder) 10 SUM EXP:20 ATTRIB:LineAmountValue 20 GETOBJVALUE REF:SalesOrder CHILD:Lines Of course, there are some scenarios in which we want to reach the data of a table to which we simply can use a reference connection. But when using a SELECT the are some tricks that we can use to fast the calculation. When we SELECT a table we can filter its records with WHERE or FILTER clauses. The most important thing that we must know about them is that when using: WHERE clauses – the conditions are applied together with the SELECT to the whole list and directly on the server. Much faster performance in comparison with FILTER, especially for a list with lots of records. FILTER clauses - filters are applied locally (on the client side) to the list that has been returned from the SELECT. Knowing this there are two basic conclusions that we can come to. First, if we should always choose WHERE clauses instead FILTER clauses if possible. Most of the other operators are supported in both cases, but we must say that WHERE clauses have certain limitation. For example, they can not be used along with NOT , OR and LIKE operators (for more information, see SELECT ). If we have no other choice but to use FILTER we proceed to the next paragraph (advice). And second, when we use FILTER clauses we should always try to narrow down the list that we are returning. How to do so? Just apply as much WHERE clauses as possible to the SELECT. This way we are filtering the list before it is returned to the FILTER and therefore it will contain fewer records, which will lead to a faster calculation. As a conclusion, we don’t claim that using a SELECT is a bad thing it is a very powerful tool that just has to be used wisely."
  },
  "advanced/user-calculated-attributes/QA/HowToDetermineThePartyTypeOfAParty.html": {
    "href": "advanced/user-calculated-attributes/QA/HowToDetermineThePartyTypeOfAParty.html",
    "title": "How to determine the party type of a party? | ERP.net Tech Docs",
    "keywords": "How to determine the party type of a party? If we need to compare the PartyType to check if it is a company, person or other the following calculation would do the job: CAST ATTRIB:PartyType CONST:System.Int32 Casting the PartyType to integer would return the following values: 0 - Company 1 - Company Location 2 - Person 3 - Store 4 - Company Division"
  },
  "advanced/user-calculated-attributes/QA/HowToGetAttributeValueFromList.html": {
    "href": "advanced/user-calculated-attributes/QA/HowToGetAttributeValueFromList.html",
    "title": "How to get attribute value from list? | ERP.net Tech Docs",
    "keywords": "How to get attribute value from list? Often mistake is to try to get a value of an attribute from a list. For example, if we want to get the user who changed the document state: 10: GETOBJVALUE CHILD:StateChanges ATTRIB:UpdateUser This is incorrect expression. The right expression would be to filter the child list and then get the first element of the list. This is an example filtering: 10 GETOBJVALUE EXP:20 ATTRIB:UpdateUser 20 FIRST EXP:30 30 FILTER CHILD:StateChanges EXP:40 40 EQUAL ATTRIB:SystemInitiated CONST:False Explanation: 10: get the value of the UserUpdate field from object in expression 20 20: get the first record in the list in expression 30 30: filter the child list StateChanges by the filter in expression 40 40: check if the attribute SystemInitiated is equal to False"
  },
  "advanced/user-calculated-attributes/QA/HowToGetSpecificFieldOfAParentDocument.html": {
    "href": "advanced/user-calculated-attributes/QA/HowToGetSpecificFieldOfAParentDocument.html",
    "title": "How to get specific field of a parent document? | ERP.net Tech Docs",
    "keywords": "How to get specific field of a parent document? When in a calculation attribute there is a need of a value of attribute of the parent document there are two options to get them: The attribute is part of the parent Document table The attribute is part of the specific entity of the parent document If the attribute is part of the parent Document table, than we may get it directly by GETOBJVALUE operator in the following expression: 10: GETOBJVALUE REF:Parent ATTRIB:DocumentNo This expression would be valid for every document which has parent document. But in the second case, when the attribute is part of the specific entity of the parent document (meaning SalesOrder, StoreOrder, StoreTransaction, Payment and etc.) than the user has to tell the calculate attribute what is the parent document. This is done by casting the parent document to the entity which is required (in the example a cast to Offer is used): 10: GETOBJVALUE EXP:20 ATTRIB:DocumentNo 20: CAST REF:Parent CONST:Aloe.EnterpriseOne.Model.Crm.Presales.Offer It is supposed to show such calculated attribute in document form where the parent document is exactly Offer."
  },
  "advanced/user-calculated-attributes/QA/HowToShowContactOfAPersonInPersonsNavigator.html": {
    "href": "advanced/user-calculated-attributes/QA/HowToShowContactOfAPersonInPersonsNavigator.html",
    "title": "How to show contact of a Person in Persons navigator? | ERP.net Tech Docs",
    "keywords": "How to show contact of a Person in Persons navigator? The specific of this calculated attribute is that the contact mechanism type is enum type. This is why it is accessed specifically. Its values and codes are as follows: Member name Value Description Address 0 Address value. Stored as 'A'. Mail 1 Mail value. Stored as 'E'. Fax 2 Fax value. Stored as 'F'. MobilePhone 3 MobilePhone value. Stored as 'M'. Other 4 Other value. Stored as 'O'. Telephone 5 Telephone value. Stored as 'T'. WebSite 6 WebSite value. Stored as 'W'. So, lets say we need to get a column with the emails of the persons (if the person has more than one emails - a random one; if a specific email is needed - more filters would be needed). The calculated attribute would have the following expressions: 10 GETOBJVALUE EXP:20 EXP:15 15 GETOBJVALUE REF:ContactMechanism ATTRIB:Name 20 FIRST EXP:21 21 FILTER EXP:30 EXP:22 22 EQUAL EXP:23 EXP:25 23 GETOBJVALUE REF:ContactMechanism ATTRIB:ContactMechanismType 25 CAST CONST:1 CONST:Aloe.EnterpriseOne.Model.General.Contacts.ContactMechanismsRepository+ContactMechanismType 30 SELECT REPO:General.Contacts.PartyContactMechanisms EXP:40 40 WHERE EXP:50 50 EQUAL ATTRIB:PartyId EXP:60 60 GETOBJVALUE INPUT:10 ATTRIB:PartyId Explanation: 10: from the object from EXP:20 get the attribute from EXP:15 15: get the value of the attribute Name from the referent object ContactMechanism 20: get the first element from the list in EXP:21 21: filter the list in EXP:30 by the conditions in EXP:22 22: check if EXP:23 is equal to EXP:25 23: get the value of the attribute ContactMechanismType from the referent object ContactMEchanism 25: cast the constant of \"1\" (this is integer) to type 'Aloe.EnterpriseOne.Model.General.Contacts.ContactMechanismsRepository+ContactMechanismType' 30: select from repository General.Contacts.PartyContactMechanisms and filter it by EXP:40 40: the filter is in EXP:50 50: check if the value of attribute PartyId is equal to EXP:60 60: get the value of attribute PartyId of the input object of expression 10"
  },
  "advanced/user-calculated-attributes/QA/HowToUseTheCustomerAsACompany.html": {
    "href": "advanced/user-calculated-attributes/QA/HowToUseTheCustomerAsACompany.html",
    "title": "How to use the customer as a company? | ERP.net Tech Docs",
    "keywords": "How to use the customer as a company? When we work with the customer, we can only get its party attributes as the customer may be company, company location or a person. So if we know that the customer is a company and we need to get his company attributes, we can cast its reference Party to Aloe.EnterpriseOne.Model.General.Contacts.Company. For example, to get the Responsible Person of the company of the customer, the following attribute would do the job: (repository of the attribute: Crm.Customers) Expressions: 10: GETOBJVALUE EXP:20 ResponsiblePersonName 20: CAST REF:Party CONST:Aloe.EnterpriseOne.Model.General.Contacts.Company Note If the customer is not a company, it would return an error."
  },
  "advanced/user-calculated-attributes/QA/Overview.html": {
    "href": "advanced/user-calculated-attributes/QA/Overview.html",
    "title": "Q & A | ERP.net Tech Docs",
    "keywords": "Q & A How to check if a custom property has value? How to check if a list have values? How to check whether a field that points to a reference object has a value? How to create an optimally fast calculated attribute? How to determine the party type of a party? How to get attribute value from list? How to get specific field of a parent document? How to show contact of a Person in Persons navigator? How to use the customer as a company?"
  },
  "advanced/user-data-attributes/overview.html": {
    "href": "advanced/user-data-attributes/overview.html",
    "title": "User Data Attributes | ERP.net Tech Docs",
    "keywords": "User Data Attributes User Data Attributes (also called \"Custom Properties\") allow the user to extend the data model with custom attributes. User-Defined Data Attributes allow the storage of values in the database, extending the system tables. Similarity With System Data Attributes The user-defined data attributes behave mostly like the system data attributes. They can be shown in columns, grouped and filtered in navigators just like system attributes. Again similar to system attributes, they can have default values and shown in the view of data forms. Most of the time, the end users can't distinguish between system and user-defined attributes. It is up to the implementation team to define custom attributes, which fit best the implementation requirements. Note Many custom attributes can easily be defined and set as \"required\". However, this might endanger the whole ERP implementation, since requiring too much data entry for each operation can alienate the end users from the system. Carefully balance the business needs with the end user comfort. More Information To learn more about user-defined attributes (also called \"Custom Properties\"), select a topic below: Create User-Defined Data Attribute Documents And User-Defined Data Attributes"
  },
  "concepts/document-flow.html": {
    "href": "concepts/document-flow.html",
    "title": "Document Flow | ERP.net Tech Docs",
    "keywords": "Document Flow"
  },
  "concepts/documents.html": {
    "href": "concepts/documents.html",
    "title": "Documents | ERP.net Tech Docs",
    "keywords": "Documents"
  },
  "concepts/fulfillment.html": {
    "href": "concepts/fulfillment.html",
    "title": "Tracking Fulfillment | ERP.net Tech Docs",
    "keywords": "Tracking Fulfillment"
  },
  "concepts/multi-company.html": {
    "href": "concepts/multi-company.html",
    "title": "Multi-Company Support In ERP Instances | ERP.net Tech Docs",
    "keywords": "Multi-Company Support In ERP Instances"
  },
  "concepts/multi-language.html": {
    "href": "concepts/multi-language.html",
    "title": "Multi-language support | ERP.net Tech Docs",
    "keywords": "Multi-language support Description Many string attributes in ERP.net support saving the data in multiple languages. These attributes are called Multi-language Strings. For example, the Product Name of a Product can be entered in many languages simultaneously. When visualizing the data, the correct language version of the string is displayed automatically by the system, depending on the current user language. Note For reports, the report designer can specify whether to use the current user language or always use a fixed language. For example, for a Portuguese invoice, one would require that the labels and data are always displayed in Portuguese. Entering data in multiple languages The client applications of ERP.net usually allow the following abilities regarding multi-language strings: Enter the string in many languages Transliterate a string from one language to another (or all) Translate a string from one language to another (or all) When entering translations for a multi-language string, the client application usually displays a table with cells for each language translation, similar to this: Language Value EN: Toothpaste DE: Zahnpasta Depending on the client application, translation can sometimes also be automated. Some client applications support using an online service, like Google Translate to automatically translate a string to other languages. Translation is better suited to Description and Notes attributes. Transliteration Transliteration is the process of translating one language version of a string to another, based on the sounding of the string. Transliteration works great for person and company names and addresses. It allows branch offices to work in their local language and reports can still be shown in the corporate language. For example, the Bulgarian word \"Иван\" would be transliterated in English as \"Ivan\". Transliteration works in two ways - manual and automatic. Manual transliteration \"Manual\" transliteration is actually automatic, but is initiated manually while editing the different language versions of a multi-language string. While editing multi-language string, the client application usually provides a function button, which transliterates the current language version to other languages. Automatic transliteration Automatic transliteration occurs when the system needs to display some a multi-language string in some language, but that specific language translation is not saved in the database. For example, suppose one employee works in a branch office in Bulgaria and enters \"Иван\" as a person first name. The database saves only the Bulgarian language version. Then another employee in a US branch requests to see the first name of the same person. The system would automatically transliterate the string and display it as \"Ivan\". Note Transliteration works optimally between Latin and Cyrillic."
  },
  "concepts/overview.html": {
    "href": "concepts/overview.html",
    "title": "Business Logic Concepts | ERP.net Tech Docs",
    "keywords": "Business Logic Concepts This section contains concepts, applicable to all modules."
  },
  "includes/erpnet.html": {
    "href": "includes/erpnet.html",
    "title": "| ERP.net Tech Docs",
    "keywords": "ERP.net"
  },
  "includes/name.html": {
    "href": "includes/name.html",
    "title": "| ERP.net Tech Docs",
    "keywords": "ERP.net"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to the ERP.net Technical Documentation | ERP.net Tech Docs",
    "keywords": "Welcome to the ERP.net Technical Documentation The Technical Documentation documents the business logic of ERP.net. It is targeted towards implementation consultants and power users. Learn more Concepts - general concepts, which apply to all modules. Functionality - documentation of the business functions. Advanced - documentation of advanced systems. Other documentations Domain Model - reference information about the entities, business rules, generations, etc. Developer Documentation - information for developers."
  },
  "modules/applications/overview.html": {
    "href": "modules/applications/overview.html",
    "title": "ERP.net Integrated Applications | ERP.net Tech Docs",
    "keywords": "ERP.net Integrated Applications ERP.net contains various built-in applications."
  },
  "modules/community/overview.html": {
    "href": "modules/community/overview.html",
    "title": "ERP.net Community Management | ERP.net Tech Docs",
    "keywords": "ERP.net Community Management Community Management deals with the management of the external community of a company. This includes all sites, forums, ticketing and support systems involving external users. It also includes the social interaction between internal and external users. Learn More Notifications Social Interactions Digital Marketplace"
  },
  "modules/crm/contacts/index.html": {
    "href": "modules/crm/contacts/index.html",
    "title": "CRM Contacts and tasks | ERP.net Tech Docs",
    "keywords": "CRM Contacts and tasks The Contacts and tasks module is used to manage parties and calendars. When used as part of the sales process, they can initiate the sales process flow: Activity → Opportunity → Offer → Sales Order → Invoice Order → Invoice Activities The activities are like calendar appointments on steroids. Activities Have related party reference, allowing to sort activities by party. Allow attachments of files. Support questionaries (through the use of user defined data attributes) And much more. Activities can be used to automatically create sales opportunities in the Presales module."
  },
  "modules/crm/index.html": {
    "href": "modules/crm/index.html",
    "title": "Customer Relationship Management (CRM) Subsystem | ERP.net Tech Docs",
    "keywords": "Customer Relationship Management (CRM) Subsystem The CRM subsystem in ERP.net is used to manage customer relationships and other front-office activities of a company. General concepts and processes The main process in the CRM subsystem is: Activity → Opportunity → Offer → Sales Order → Invoice Order → Invoice Activity - generic activity, related to a party. Includes support for calendar appointments, reminders, questionnaires, etc. Can be used to represent appointments, scheduled meetings, visits, contracts and just about any generic document. Opportunity - sales opportunity, with expected revenue and probability. It does not have detail line items. Offer - sales offer (quote), with line items. It allows optional selection of some of the items, which the customer has accepted. Sales Order - sales order from the customer. The main sales document. All documents before it are optional. The sales order initiates the logistics and financial processes, related to the sale. Invoice Order - an order to issue an invoice. This is an internal document, which is used to track the invoices, which we have to issue. Invoice - legal and financial document, finalizing the sales process. Note The above diagram shows only the CRM part of the whole process. The full process involves many different modules of the ERP system. Modules There are many modules in the CRM subsystem. They are used to manage the different aspects of the CRM processes: Contacts and tasks - calendar appointments, party definitions, etc. Pre-sales - Opportunities management, quotation, etc. Sales - Sales Orders, customers, etc. Invoicing - Invoicing process management, invoices and BI. POS - Manage point-of-sale activities in physical stores. Marketing - Marketing campaigns, activities, distribution channels, etc. Distribution - field sales, sales person targets management, etc. Pricing - price lists management. Product Configuration - create products based on specs for job shops (made-to-order and engineer-to-order environments). Products - manage products master data - products and product measurements, codes, variants, channel, pictures, groups, etc."
  },
  "modules/crm/presales/index.html": {
    "href": "modules/crm/presales/index.html",
    "title": "CRM Presales | ERP.net Tech Docs",
    "keywords": "CRM Presales The presales module is used to manage the presales process. Deals (Opportunities) Activity → Opportunity → Offer → Sales Order → Invoice Order → Invoice The deals in the Crm.Presales.Deals Entity are used to manage sales opportunities to new or existing customers. Note Deal is synonymous to opportunity. The deals: Have appointed sales representative, managing the deal. Do not have line items. They are used to manage deals, which are still not clear enough to detail at this level. Have a percentage probability of success . The percentage is set by the sales representative, based on their own judgement. Have expected sales revenue . Have expected close date . Based on the data above, the team leaders and sales managers have instant and clear visibility over the sales processes. The deals are usually initially created based on General.Contacts.Activities Entity . However, once a deal is created, it can be used to create many more sub-activities to manage related tasks. Offers (quotes) Activity → Opportunity → Offer → Sales Order → Invoice Order → Invoice The deals documents can be easily transformed into Offers (quotes), which contain detailed line items. Entries in the Crm.Presales.Offers Entity allows the customer to be presented with optional items. After approving some or all of the optional items, the offer can generate Crm.Sales.SalesOrders Entity in the Sales module."
  },
  "modules/crm/sales/index.html": {
    "href": "modules/crm/sales/index.html",
    "title": "CRM Sales Module | ERP.net Tech Docs",
    "keywords": "CRM Sales Module Activity → Opportunity → Offer → Sales Order → Invoice Order → Invoice The sales module is used to manage the preparing and issuing of Sales Orders and the related master data."
  },
  "modules/financials/overview.html": {
    "href": "modules/financials/overview.html",
    "title": "ERP.net Financials | ERP.net Tech Docs",
    "keywords": "ERP.net Financials"
  },
  "modules/logistics/overview.html": {
    "href": "modules/logistics/overview.html",
    "title": "ERP.net Logistics | ERP.net Tech Docs",
    "keywords": "ERP.net Logistics"
  },
  "modules/logistics/wms/how-it-works/zone-policies.html": {
    "href": "modules/logistics/wms/how-it-works/zone-policies.html",
    "title": "Zone Policies | ERP.net Tech Docs",
    "keywords": "Zone Policies"
  },
  "modules/logistics/wms/how-it-works/zones-and-locations.html": {
    "href": "modules/logistics/wms/how-it-works/zones-and-locations.html",
    "title": "Warehouse Zones and Locations | ERP.net Tech Docs",
    "keywords": "Warehouse Zones and Locations Warehouse Zones are used to organize the different storage areas of the warehouse. Zone Hierarchy The zones are organized in a hierarchy, where each zone can have sub-zones, which can have its own sub-zones and so on. For example: Picking Aisle P1 Rack P1.1 Shelf P1.1.1 Shelf P1.1.2 Shelf P1.1.3 Aisle P2 Refrigeration Aisle R1 Rack R1.1 Aisle R2 Carts Cart C1 Bulk Rack B1 Rack B2 Primary and sub-zones In the above example, Picking, Refrigeration, Carts and Bulk are primary zones . Aisle M1, Rack M1.1, etc. are called sub-zones . The primary zones have no parent zone. Sub-zones always have a parent zone. Locations The warehouse locations (sometimes called bins) are used for the actual storage of the goods. They are the leafs in the hierarchy and are structured under the warehouse zones. For example: Zone \"Shelf P1.1.3\" can contain 3 locations: P1.1.3-A P1.1.3-B P1.1.3-C"
  },
  "modules/logistics/wms/overview.html": {
    "href": "modules/logistics/wms/overview.html",
    "title": "Warehouse Management | ERP.net Tech Docs",
    "keywords": "Warehouse Management"
  },
  "modules/overview.html": {
    "href": "modules/overview.html",
    "title": "ERP.net Modules | ERP.net Tech Docs",
    "keywords": "ERP.net Modules"
  },
  "modules/production/overview.html": {
    "href": "modules/production/overview.html",
    "title": "ERP.net Production | ERP.net Tech Docs",
    "keywords": "ERP.net Production"
  },
  "modules/projects/overview.html": {
    "href": "modules/projects/overview.html",
    "title": "ERP.net Project Management | ERP.net Tech Docs",
    "keywords": "ERP.net Project Management"
  },
  "README.html": {
    "href": "README.html",
    "title": "Welcome to the ERP.net Technical Documentation | ERP.net Tech Docs",
    "keywords": "Welcome to the ERP.net Technical Documentation The documentation uses DocFX to build."
  },
  "reference/overview.html": {
    "href": "reference/overview.html",
    "title": "| ERP.net Tech Docs",
    "keywords": ""
  }
}